{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5';\nimport { ref } from 'vue';\nimport Modal from 'bootstrap/js/dist/modal';\nlet eventGuid = 0;\nexport function createEventId() {\n  return String(eventGuid++);\n}\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n  data: function () {\n    return {\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1); // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [bootstrap5Plugin, listPlugin, dayGridPlugin, timeGridPlugin, interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5',\n        // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop,\n        // Add eventDrop handler\n        eventResize: this.handleEventResize\n\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: []\n    };\n  },\n  mounted() {\n    this.fetchEvents();\n  },\n  methods: {\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events').then(response => {\n        let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => {\n          let color;\n          switch (event.user) {\n            case 'clientApproval':\n              color = '#007FFF';\n              break;\n            case 'clientApproved':\n              color = '#FF9E00';\n              break;\n            case 'admin':\n              color = '#FF2D00';\n              break;\n            default:\n              // Handle default case if needed\n              break;\n          }\n          return {\n            id: event.id,\n            title: event.title,\n            user: event.user,\n            start: event.start,\n            end: event.end,\n            allDay: event.allDay,\n            color: color // Assign color based on user type\n          };\n        });\n\n        // Update local events with API events and update user if IDs match\n        eventsFromLocalStorage.forEach(localEvent => {\n          let correspondingAPIEvent = response.data.find(apiEvent => apiEvent.id === localEvent.id);\n          if (correspondingAPIEvent) {\n            if (correspondingAPIEvent.user !== localEvent.user) {\n              console.log(\"Delete Approved clients:::\", correspondingAPIEvent.id, correspondingAPIEvent.user, \"  :  \", localEvent.id, localEvent.user);\n              const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n              console.log('Updated events after deletion:', updatedEvents);\n              // Store the updated events back into local storage\n              localStorage.setItem('events', JSON.stringify(updatedEvents));\n              this.fetchEvents();\n            }\n          }\n        });\n\n        // console.log('Events before deletion:', eventsFromLocalStorage);\n\n        let allEvents = eventsFromAPI.concat(eventsFromLocalStorage);\n        this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      if (!this.modal) {\n        this.modal = new Modal(document.getElementById('exampleModal'));\n      }\n      this.modal.show();\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        // Format start and end dates\n        let start = formatDatetime(selectInfo.startStr);\n        let end = formatDatetime(selectInfo.endStr);\n        console.log(start, end);\n        // console.log(formatDatetime(new Date().toISOString()));\n\n        axios.post('http://localhost:8000/api/events', {\n          title: title,\n          start: start,\n          end: end,\n          user: 'clientApproval',\n          allDay: selectInfo.allDay\n        }).then(response => {\n          // Handle success\n          console.log('Event added:', response.data);\n          this.allevents.push(response.data);\n          let newEvent = {\n            id: response.data.id,\n            title: response.data.title,\n            user: response.data.user,\n            start: response.data.start,\n            end: response.data.end,\n            allDay: response.data.allDay\n          };\n\n          // this.allevents.push(newEvent);\n          // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n          // Get existing events from local storage or initialize an empty array\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          events.push(newEvent); // Append the new event to existing events\n          localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n          calendarApi.addEvent(newEvent);\n          // Fetch events again to update the calendar\n          this.fetchEvents();\n        }).catch(error => {\n          // Handle error\n          console.error('Error adding event:', error.response.data);\n        });\n      }\n    },\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`).then(response => {\n          // this.fetchEvents(); // Refresh events after deleting\n          console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n          // Fetch events from local storage\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          // console.log('Events before deletion:', events);\n          // Filter out the event to be deleted\n          const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n          console.log('Updated events after deletion:', updatedEvents);\n          // Store the updated events back into local storage\n          localStorage.setItem('events', JSON.stringify(updatedEvents));\n          this.fetchEvents();\n        }).catch(error => {\n          console.error('Error deleting event:', error);\n        });\n      }\n    },\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      }).then(response => {\n        console.log('Event updated:', response.data);\n\n        // Retrieve events from local storage\n        let events = JSON.parse(localStorage.getItem('events')) || [];\n        console.log('Existing events:', events);\n\n        // Find index of event being updated\n        const eventIndex = events.findIndex(event => event.id === eventId);\n        console.log('Event index:', eventIndex);\n\n        // Update event if found\n        if (eventIndex !== -1) {\n          events[eventIndex].start = response.data.start;\n          events[eventIndex].end = response.data.end;\n\n          // Save updated events to local storage\n          localStorage.setItem('events', JSON.stringify(events));\n          console.log('Updated events:', events);\n        } else {\n          // If event is not found, it might be a new event, handle accordingly\n          console.log('Event not found in local storage. Adding new event...');\n          events.push(response.data);\n          localStorage.setItem('events', JSON.stringify(events));\n          console.log('Updated events:', events);\n        }\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      }).then(response => {\n        console.log('Event updated Resize:', response.data);\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  },\n  saveChanges() {\n    modal.value.hide(); // This will hide the modal after saving\n  },\n  setup() {\n    const modal = ref(null);\n\n    // Method to open the modal\n    const openModal = () => {\n      if (!modal.value) {\n        modal.value = new Modal(document.getElementById('exampleModal'));\n      }\n      modal.value.show();\n    };\n\n    // Method to handle save changes click\n    // const saveChanges = () => {\n    //   console.log(\"Successfully save\");\n    //   // You can add your save logic here\n    //   modal.value.hide(); // This will hide the modal after saving\n    // };\n\n    return {\n      openModal\n      // saveChanges\n    };\n  }\n};","map":{"version":3,"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","axios","bootstrap5Plugin","ref","Modal","eventGuid","createEventId","String","formatDatetime","datetimeStr","replace","components","data","calendarOptions","selectAllow","selectionInfo","startDate","start","endDate","end","setSeconds","getSeconds","getDate","plugins","headerToolbar","left","center","right","themeSystem","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","select","handleDateSelect","eventClick","deleteItem","eventsSet","handleEvents","eventDrop","handleEventDrop","eventResize","handleEventResize","allevents","mounted","fetchEvents","methods","eventsFromLocalStorage","JSON","parse","localStorage","getItem","get","then","response","eventsFromAPI","filter","event","user","map","color","id","title","allDay","forEach","localEvent","correspondingAPIEvent","find","apiEvent","console","log","updatedEvents","setItem","stringify","allEvents","concat","events","catch","error","handleWeekendsToggle","selectInfo","modal","document","getElementById","show","prompt","calendarApi","view","calendar","unselect","startStr","endStr","post","push","newEvent","addEvent","clickInfo","confirm","delete","info","eventId","start_formatdate","end_formatdate","put","eventIndex","findIndex","saveChanges","value","hide","setup","openModal"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\clinicsystem\\src\\views\\ClientView.vue"],"sourcesContent":["<!-- ClientView.vue -->\n\n<script>\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport listPlugin from '@fullcalendar/list'\n\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5'\nimport { ref } from 'vue';\n  import Modal from 'bootstrap/js/dist/modal';\n  \n\nlet eventGuid = 0\nexport function createEventId() {\n  return String(eventGuid++)\n}\n\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\n\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n\n  data: function () {\n    return {\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1);  // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [\n          bootstrap5Plugin,\n          listPlugin,\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5', // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop, // Add eventDrop handler\n        eventResize: this.handleEventResize,\n\n\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: [],\n    }\n  },\n\n  mounted() {\n    this.fetchEvents();\n  },\n\n  methods: {\n\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n          let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => {\n            let color;\n            switch (event.user) {\n              case 'clientApproval':\n                color = '#007FFF';\n                break;\n              case 'clientApproved':\n                color = '#FF9E00';\n                break;\n              case 'admin':\n                color = '#FF2D00';\n                break;\n              default:\n                // Handle default case if needed\n                break;\n            }\n            return {\n              id: event.id,\n              title: event.title,\n              user: event.user,\n              start: event.start,\n              end: event.end,\n              allDay: event.allDay,\n              color: color // Assign color based on user type\n\n            };\n\n          });\n\n          // Update local events with API events and update user if IDs match\n          eventsFromLocalStorage.forEach(localEvent => {\n            let correspondingAPIEvent = response.data.find(apiEvent => apiEvent.id === localEvent.id);\n            if (correspondingAPIEvent) {\n\n              if (correspondingAPIEvent.user !== localEvent.user) {\n                console.log(\"Delete Approved clients:::\", correspondingAPIEvent.id, correspondingAPIEvent.user, \"  :  \", localEvent.id, localEvent.user);\n                const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n                console.log('Updated events after deletion:', updatedEvents);\n                // Store the updated events back into local storage\n                localStorage.setItem('events', JSON.stringify(updatedEvents));\n                this.fetchEvents();\n              }\n            }\n          });\n\n          // console.log('Events before deletion:', eventsFromLocalStorage);\n\n          let allEvents = eventsFromAPI.concat(eventsFromLocalStorage);\n\n          this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      if (!this.modal) {\n          this.modal = new Modal(document.getElementById('exampleModal'));\n        }\n        this.modal.show();\n      let title = prompt('Please enter a new title for your event')\n      let calendarApi = selectInfo.view.calendar;\n\n      calendarApi.unselect() // clear date selection\n\n      \n      if (title) {\n\n        // Format start and end dates\n        let start = formatDatetime(selectInfo.startStr);\n        let end = formatDatetime(selectInfo.endStr);\n        console.log(start, end);\n        // console.log(formatDatetime(new Date().toISOString()));\n\n        axios.post('http://localhost:8000/api/events', {\n\n          title: title,\n          start: start,\n          end: end,\n          user: 'clientApproval',\n          allDay: selectInfo.allDay\n        })\n          .then(response => {\n            // Handle success\n            console.log('Event added:', response.data);\n            this.allevents.push(response.data);\n\n            let newEvent = {\n              id: response.data.id,\n              title: response.data.title,\n              user: response.data.user,\n              start: response.data.start,\n              end: response.data.end,\n              allDay: response.data.allDay,\n\n            };\n\n            // this.allevents.push(newEvent);\n            // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n            // Get existing events from local storage or initialize an empty array\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            events.push(newEvent); // Append the new event to existing events\n            localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n            calendarApi.addEvent(newEvent);\n            // Fetch events again to update the calendar\n            this.fetchEvents();\n\n          })\n          .catch(error => {\n            // Handle error\n            console.error('Error adding event:', error.response.data);\n          });\n      }\n    },\n\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`)\n          .then(response => {\n            // this.fetchEvents(); // Refresh events after deleting\n            console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n            // Fetch events from local storage\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            // console.log('Events before deletion:', events);\n            // Filter out the event to be deleted\n            const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n            console.log('Updated events after deletion:', updatedEvents);\n            // Store the updated events back into local storage\n            localStorage.setItem('events', JSON.stringify(updatedEvents));\n            this.fetchEvents();\n\n          })\n          .catch(error => {\n\n            console.error('Error deleting event:', error);\n          });\n      }\n    },\n\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      })\n        .then(response => {\n          console.log('Event updated:', response.data);\n\n          // Retrieve events from local storage\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          console.log('Existing events:', events);\n\n          // Find index of event being updated\n          const eventIndex = events.findIndex(event => event.id === eventId);\n          console.log('Event index:', eventIndex);\n\n          // Update event if found\n          if (eventIndex !== -1) {\n            events[eventIndex].start = response.data.start;\n            events[eventIndex].end = response.data.end;\n\n            // Save updated events to local storage\n            localStorage.setItem('events', JSON.stringify(events));\n            console.log('Updated events:', events);\n          } else {\n            // If event is not found, it might be a new event, handle accordingly\n            console.log('Event not found in local storage. Adding new event...');\n            events.push(response.data);\n            localStorage.setItem('events', JSON.stringify(events));\n            console.log('Updated events:', events);\n          }\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      })\n        .then(response => {\n          console.log('Event updated Resize:', response.data);\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  },\n  saveChanges(){\n    modal.value.hide(); // This will hide the modal after saving\n      \n  },\n setup() {\n      const modal = ref(null);\n  \n      // Method to open the modal\n      const openModal = () => {\n        if (!modal.value) {\n          modal.value = new Modal(document.getElementById('exampleModal'));\n        }\n        modal.value.show();\n      };\n  \n      // Method to handle save changes click\n      // const saveChanges = () => {\n      //   console.log(\"Successfully save\");\n      //   // You can add your save logic here\n      //   modal.value.hide(); // This will hide the modal after saving\n      // };\n  \n      return {\n        openModal,\n        // saveChanges\n      };\n    }\n\n}\n</script>\n\n\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-sidebar' style=\"display: flex; flex-direction: column; justify-content: space-between;\">\n      <div>\n        <div class=\"text-center\">\n          <img src=\"../assets/icon.png\" alt=\"Ears Nose and Throat\" style=\"width: 160px; height: auto; \"\n            class=\"img-fluid\">\n        </div>\n        <div style=\"margin: 50px 5px 10px 5px ;\">\n          <h2>Instructions</h2>\n          <ul style=\"text-align: left;\">\n            <li>Select dates and you will be prompted to create a new event</li>\n            <li>Drag, drop, and resize events</li>\n            <li>Click an event to delete it</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'about' }\">about</router-link>\n        <router-view />\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'login' }\">Admin Login</router-link>\n        <router-view />\n      </div>\n    </div>\n\n\n    <div class='demo-app-main'>\n      <FullCalendar class='demo-app-calendar' :options='calendarOptions'>\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.start }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n\n      <button type=\"button\" class=\"btn btn-primary\" @click=\"openModal\">\n      Launch demo modal\n    </button>\n          <!-- Modal -->\n    <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\">\n            ...\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveChanges\">Save changes</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n  </div>\n</template>\n\n\n\n<style lang='css'>\nhtml,\nbody {\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n\n  /* overflow: hidden; Disable scrolling of the entire page */\n}\n\n@media (max-width: 650px) {\n  ul {\n    margin: 0;\n    /* padding: 0 0 0 1.5em; */\n    font-size: 10px;\n  }\n\n  li {\n    /* margin: 1.5em 0; */\n    padding: 0;\n    font-size: 10px;\n  }\n}\n\n\nh2 {\n  margin: 0;\n  font-size: 16px;\n}\n\nul {\n  margin: 0;\n  /* padding: 0 0 0 1.5em; */\n}\n\nli {\n  /* margin: 1.5em 0; */\n  padding: 0;\n}\n\nb {\n  /* used for event dates/times */\n  margin-right: 3px;\n  color: black;\n}\n\ni {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.demo-app {\n  display: flex;\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n  font-size: 14px;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-sidebar {\n  padding: 10px;\n  width: 300px;\n  line-height: 1.5;\n  /* background: #eaf9ff; */\n  background-color: #e6e7e9;\n  border-right: 1px solid #d3e2e8;\n  /* overflow-y: auto; */\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-main {\n  flex-grow: 1;\n  padding: 3em;\n}\n\n/* Adjust the height of FullCalendar to fit within the main content area */\n.demo-app-calendar {\n  height: calc(100vh - 6em);\n  /* Adjust as needed, considering header/footer heights */\n}\n\n.fc {\n  /* the calendar root */\n  /* max-width: 1100px; */\n  margin: 0 auto;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.fc-col-header-cell-cushion {\n  text-decoration: none;\n  color: black;\n}\n\n.fc-scrollgrid .fc-daygrid-day-number {\n  text-decoration: none;\n  color: black;\n\n}\n\n.fc-event {\n  color: white;\n}\n\n.fc-list-event-title {\n  color: black;\n}\n\n.fc-list-event-time {\n  color: black;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}