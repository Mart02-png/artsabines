{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../assets/icon.png';\nconst _hoisted_1 = {\n  class: \"demo-app\"\n};\nconst _hoisted_2 = {\n  class: \"demo-app-sidebar\",\n  style: {\n    \"display\": \"flex\",\n    \"flex-direction\": \"column\",\n    \"justify-content\": \"space-between\"\n  }\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"text-center\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"Ears Nose and Throat\",\n  style: {\n    \"width\": \"160px\",\n    \"height\": \"auto\"\n  },\n  class: \"img-fluid\"\n})]), /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"margin\": \"50px 5px 10px 5px\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Instructions\"), /*#__PURE__*/_createElementVNode(\"ul\", {\n  style: {\n    \"text-align\": \"left\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"li\", null, \"Select dates and you will be prompted to create a new event\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"Drag, drop, and resize events\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"Click an event to delete it\")])])], -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"text-center\",\n  style: {\n    \"margin\": \"10px 5px 10px 5px\"\n  }\n};\nconst _hoisted_5 = {\n  class: \"text-center\",\n  style: {\n    \"margin\": \"10px 5px 10px 5px\"\n  }\n};\nconst _hoisted_6 = {\n  class: \"demo-app-main\"\n};\nconst _hoisted_7 = {\n  class: \"modal fade\",\n  id: \"exampleModal\",\n  tabindex: \"-1\",\n  \"aria-labelledby\": \"exampleModalLabel\",\n  \"aria-hidden\": \"true\"\n};\nconst _hoisted_8 = {\n  class: \"modal-dialog\"\n};\nconst _hoisted_9 = {\n  class: \"modal-content\"\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"modal-header\"\n}, [/*#__PURE__*/_createElementVNode(\"h5\", {\n  class: \"modal-title\",\n  id: \"exampleModalLabel\"\n}, \"Modal title\"), /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"button\",\n  class: \"btn-close\",\n  \"data-bs-dismiss\": \"modal\",\n  \"aria-label\": \"Close\"\n})], -1 /* HOISTED */);\nconst _hoisted_11 = {\n  class: \"modal-body\"\n};\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Add Event\", -1 /* HOISTED */);\nconst _hoisted_13 = {\n  class: \"modal-footer\"\n};\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"button\",\n  class: \"btn btn-secondary\",\n  \"data-bs-dismiss\": \"modal\"\n}, \"Close\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  const _component_FullCalendar = _resolveComponent(\"FullCalendar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createCommentVNode(\" Admin Login \"), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_router_link, {\n    to: {\n      name: 'about'\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"about\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_router_view)]), _createCommentVNode(\" Admin Login \"), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_router_link, {\n    to: {\n      name: 'login'\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Admin Login\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_router_view)])]), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_FullCalendar, {\n    class: \"demo-app-calendar\",\n    options: _ctx.calendarOptions\n  }, {\n    eventContent: _withCtx(arg => [_createElementVNode(\"b\", null, _toDisplayString(arg.start), 1 /* TEXT */), _createElementVNode(\"i\", null, _toDisplayString(arg.event.title), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"options\"]), _createCommentVNode(\" Button trigger modal \"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.openModal && _ctx.openModal(...args))\n  }, \" Launch demo modal \"), _createCommentVNode(\" Modal \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _createElementVNode(\"div\", _hoisted_11, [_hoisted_12, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.newEventTitle = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.newEventTitle]]), _createCommentVNode(\" Modal Body Content \")]), _createElementVNode(\"div\", _hoisted_13, [_hoisted_14, _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    onClick: _cache[2] || (_cache[2] = $event => $options.saveChanges(_ctx.selectedInfo))\n  }, \"Save changes\")])])])])])]);\n}","map":{"version":3,"names":["_imports_0","class","style","_createElementVNode","src","alt","id","tabindex","type","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createCommentVNode","_hoisted_4","_createVNode","_component_router_link","to","name","default","_withCtx","_createTextVNode","_","_component_router_view","_hoisted_5","_hoisted_6","_component_FullCalendar","options","_ctx","calendarOptions","eventContent","arg","_toDisplayString","start","event","title","onClick","_cache","args","openModal","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","$event","newEventTitle","_hoisted_13","_hoisted_14","$options","saveChanges","selectedInfo"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\clinicsystem\\src\\views\\ClientView.vue"],"sourcesContent":["<!-- ClientView.vue -->\n\n<script>\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport listPlugin from '@fullcalendar/list'\n\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5'\nimport * as bootstrap from 'bootstrap';\n\n\nlet eventGuid = 0\nexport function createEventId() {\n  return String(eventGuid++)\n}\n\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\n\nfunction checkEventExistence(eventId, events) {\n  // Check if eventId exists in stored events\n  return events.some(event => event.id === eventId);\n}\n\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n\n  data: function () {\n    return {\n      modal: null,\n      newEventTitle: '',\n\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1);  // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [\n          bootstrap5Plugin,\n          listPlugin,\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5', // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop, // Add eventDrop handler\n        eventResize: this.handleEventResize,\n\n\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: [],\n    }\n  },\n\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n  },\n\n  methods: {\n\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n          let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => {\n            let color;\n            switch (event.user) {\n              case 'clientApproval':\n                color = '#007FFF';\n                break;\n              case 'clientApproved':\n                color = '#FF9E00';\n                break;\n              case 'admin':\n                color = '#FF2D00';\n                break;\n              default:\n                // Handle default case if needed\n                break;\n            }\n            return {\n              id: event.id,\n              title: event.title,\n              user: event.user,\n              start: event.start,\n              end: event.end,\n              allDay: event.allDay,\n              color: color // Assign color based on user type\n\n            };\n\n          });\n\n          // Update local events with API events and update user if IDs match\n          eventsFromLocalStorage.forEach(localEvent => {\n            let correspondingAPIEvent = response.data.find(apiEvent => apiEvent.id === localEvent.id);\n            if (correspondingAPIEvent) {\n\n              if (correspondingAPIEvent.user !== localEvent.user) {\n                console.log(\"Delete Approved clients:::\", correspondingAPIEvent.id, correspondingAPIEvent.user, \"  :  \", localEvent.id, localEvent.user);\n                const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n                console.log('Updated events after deletion:', updatedEvents);\n                // Store the updated events back into local storage\n                localStorage.setItem('events', JSON.stringify(updatedEvents));\n                this.fetchEvents();\n              }\n            }\n          });\n\n          // console.log('Events before deletion:', eventsFromLocalStorage);\n\n          let allEvents = eventsFromAPI.concat(eventsFromLocalStorage);\n\n          this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n    saveChanges(selectedInfo) {\n      console.log(\"Successfully saved\");\n      if (this.newEventTitle.trim() !== '') {\n        console.log(\"Successfully saved\", this.newEventTitle);\n        console.log(\"Select Info:\", this.selectedInfo); // Access selectedInfo here\n\n        let calendarApi = selectedInfo.view.calendar;\n        calendarApi.unselect() // clear date selection\n\n        if (this.newEventTitle.trim() !== '') {\n          // Format start and end dates\n          let start = formatDatetime(selectedInfo.startStr);\n          let end = formatDatetime(selectedInfo.endStr);\n\n          axios.post('http://localhost:8000/api/events', {\n\n            title: this.newEventTitle,\n            start: start,\n            end: end,\n            user: 'clientApproval',\n            allDay: selectedInfo.allDay\n          })\n            .then(response => {\n              // Handle success\n              console.log('Event added:', response.data);\n\n\n              this.allevents.push(response.data);\n\n              let newEvent = {\n                id: response.data.id,\n                title: response.data.title,\n                user: response.data.user,\n                start: response.data.start,\n                end: response.data.end,\n                allDay: response.data.allDay,\n\n              };\n\n              // this.allevents.push(newEvent);\n              // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n              // Get existing events from local storage or initialize an empty array\n              let events = JSON.parse(localStorage.getItem('events')) || [];\n              events.push(newEvent); // Append the new event to existing events\n              localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n              calendarApi.addEvent(newEvent);\n              // Fetch events again to update the calendar\n              this.fetchEvents();\n\n              // Hide the modal\n              this.modal.hide();\n              this.newEventTitle = '';\n\n            })\n            .catch(error => {\n              // Handle error\n              console.error('Error adding event:', error.response.data);\n            });\n        }\n\n      } else {\n        // Alert the user if the input field is empty\n        alert('Please enter a title for the event');\n      }\n    },\n\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      this.modal.show();\n      this.selectedInfo = selectInfo; // Store selectInfo in selectedInfo\n      // let title = prompt('Please enter a new title for your event')\n      // let calendarApi = selectInfo.view.calendar;\n\n      // calendarApi.unselect() // clear date selection\n\n\n      // if (title) {\n\n      //   // Format start and end dates\n      //   let start = formatDatetime(selectInfo.startStr);\n      //   let end = formatDatetime(selectInfo.endStr);\n      //   console.log(start, end);\n      //   // console.log(formatDatetime(new Date().toISOString()));\n\n      //   axios.post('http://localhost:8000/api/events', {\n\n      //     title: title,\n      //     start: start,\n      //     end: end,\n      //     user: 'clientApproval',\n      //     allDay: selectInfo.allDay\n      //   })\n      //     .then(response => {\n      //       // Handle success\n      //       console.log('Event added:', response.data);\n      //       this.allevents.push(response.data);\n\n      //       let newEvent = {\n      //         id: response.data.id,\n      //         title: response.data.title,\n      //         user: response.data.user,\n      //         start: response.data.start,\n      //         end: response.data.end,\n      //         allDay: response.data.allDay,\n\n      //       };\n\n      //       // this.allevents.push(newEvent);\n      //       // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n      //       // Get existing events from local storage or initialize an empty array\n      //       let events = JSON.parse(localStorage.getItem('events')) || [];\n      //       events.push(newEvent); // Append the new event to existing events\n      //       localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n      //       calendarApi.addEvent(newEvent);\n      //       // Fetch events again to update the calendar\n      //       this.fetchEvents();\n\n      //     })\n      //     .catch(error => {\n      //       // Handle error\n      //       console.error('Error adding event:', error.response.data);\n      //     });\n      // }\n    },\n\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`)\n          .then(response => {\n            // this.fetchEvents(); // Refresh events after deleting\n            console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n            // Fetch events from local storage\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            // console.log('Events before deletion:', events);\n            // Filter out the event to be deleted\n            const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n            console.log('Updated events after deletion:', updatedEvents);\n            // Store the updated events back into local storage\n            localStorage.setItem('events', JSON.stringify(updatedEvents));\n            this.fetchEvents();\n\n          })\n          .catch(error => {\n\n            console.error('Error deleting event:', error);\n          });\n      }\n    },\n\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n\n      // Retrieve events from local storage\n      const events = JSON.parse(localStorage.getItem('events')) || [];\n\n\n\n\n  \n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      })\n        .then(response => {\n         \n          console.log('response.data:', response.data);\n            // Log the id of each event in the events array\n            events.forEach(event => {\n              // console.log(\"Event ID:\", event.id);\n              if(event.id == eventId){\n                console.log(\"Event ID:\", event.id, eventId, \"event.id and eventId are EQUAL\");\n\n                events[event.id].start = response.data.start;\n                events[event.id].end = response.data.end;\n\n                // Save updated events to local storage\n                localStorage.setItem('events', JSON.stringify(events));\n                console.log('Updated events:', events);\n                \n              }else{\n                console.log(\"Event ID:\", event.id, eventId, \"event.id and eventId are NOT EQUAL\");\n              }\n            });\n\n          // let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n          // console.log('eventsFromLocalStorage:', eventsFromLocalStorage);\n\n          // // Retrieve events from local storage\n          // let events = JSON.parse(localStorage.getItem('events')) || [];\n          // console.log('Existing events:', events);\n\n          // // Find index of event being updated\n          // const eventIndex = events.findIndex(event => event.id === eventId);\n          // console.log('Event index:', eventIndex);\n\n          // // Update event if found\n          // if (eventIndex !== -1) {\n          //   events[eventIndex].start = response.data.start;\n          //   events[eventIndex].end = response.data.end;\n\n          //   // Save updated events to local storage\n          //   localStorage.setItem('events', JSON.stringify(events));\n          //   console.log('Updated events:', events);\n          // } else {\n          //   // If event is not found, it might be a new event, handle accordingly\n          //   console.log('Event not found in local storage. Adding new event...');\n          //   events.push(response.data);\n          //   localStorage.setItem('events', JSON.stringify(events));\n          //   console.log('Else Updated events:', events);\n          // }\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      })\n        .then(response => {\n          console.log('Event updated Resize:', response.data);\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  },\n\n\n}\n</script>\n\n\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-sidebar' style=\"display: flex; flex-direction: column; justify-content: space-between;\">\n      <div>\n        <div class=\"text-center\">\n          <img src=\"../assets/icon.png\" alt=\"Ears Nose and Throat\" style=\"width: 160px; height: auto; \"\n            class=\"img-fluid\">\n        </div>\n        <div style=\"margin: 50px 5px 10px 5px ;\">\n          <h2>Instructions</h2>\n          <ul style=\"text-align: left;\">\n            <li>Select dates and you will be prompted to create a new event</li>\n            <li>Drag, drop, and resize events</li>\n            <li>Click an event to delete it</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'about' }\">about</router-link>\n        <router-view />\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'login' }\">Admin Login</router-link>\n        <router-view />\n      </div>\n    </div>\n\n\n    <div class='demo-app-main'>\n      <FullCalendar class='demo-app-calendar' :options='calendarOptions'>\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.start }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n      <!-- Button trigger modal -->\n      <button type=\"button\" class=\"btn btn-primary\" @click=\"openModal\">\n        Launch demo modal\n      </button>\n\n      <!-- Modal -->\n      <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            <div class=\"modal-body\">\n              <h1>Add Event</h1>\n              <input type=\"text\" v-model=\"newEventTitle\">\n              <!-- Modal Body Content -->\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n              <button type=\"button\" class=\"btn btn-primary\" @click=\"saveChanges(selectedInfo)\">Save changes</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n\n<style lang='css'>\nhtml,\nbody {\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n\n  /* overflow: hidden; Disable scrolling of the entire page */\n}\n\n@media (max-width: 650px) {\n  ul {\n    margin: 0;\n    /* padding: 0 0 0 1.5em; */\n    font-size: 10px;\n  }\n\n  li {\n    /* margin: 1.5em 0; */\n    padding: 0;\n    font-size: 10px;\n  }\n}\n\n\nh2 {\n  margin: 0;\n  font-size: 16px;\n}\n\nul {\n  margin: 0;\n  /* padding: 0 0 0 1.5em; */\n}\n\nli {\n  /* margin: 1.5em 0; */\n  padding: 0;\n}\n\nb {\n  /* used for event dates/times */\n  margin-right: 3px;\n  color: black;\n}\n\ni {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.demo-app {\n  display: flex;\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n  font-size: 14px;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-sidebar {\n  padding: 10px;\n  width: 300px;\n  line-height: 1.5;\n  /* background: #eaf9ff; */\n  background-color: #e6e7e9;\n  border-right: 1px solid #d3e2e8;\n  /* overflow-y: auto; */\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-main {\n  flex-grow: 1;\n  padding: 3em;\n}\n\n/* Adjust the height of FullCalendar to fit within the main content area */\n.demo-app-calendar {\n  height: calc(100vh - 6em);\n  /* Adjust as needed, considering header/footer heights */\n}\n\n.fc {\n  /* the calendar root */\n  /* max-width: 1100px; */\n  margin: 0 auto;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.fc-col-header-cell-cushion {\n  text-decoration: none;\n  color: black;\n}\n\n.fc-scrollgrid .fc-daygrid-day-number {\n  text-decoration: none;\n  color: black;\n\n}\n\n.fc-event {\n  color: white;\n}\n\n.fc-list-event-title {\n  color: black;\n}\n\n.fc-list-event-time {\n  color: black;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}