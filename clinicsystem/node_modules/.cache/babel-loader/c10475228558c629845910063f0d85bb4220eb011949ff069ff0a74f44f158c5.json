{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"table\", null, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.columns, (column, index) => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: index\n    }, [_createTextVNode(_toDisplayString(column.title) + \" \", 1 /* TEXT */), column.sortable ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $options.sort(column.data)\n    }, null, 8 /* PROPS */, _hoisted_1)) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredData, (row, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.columns, (column, index) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: index\n      }, _toDisplayString(row[column.data]), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","columns","column","index","key","_createTextVNode","_toDisplayString","title","sortable","onClick","$event","$options","sort","data","_hoisted_1","_createCommentVNode","filteredData","row"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\Working System\\clinicsystem\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n  <table>\n    <thead>\n      <tr>\n        <th v-for=\"(column, index) in columns\" :key=\"index\">\n          {{ column.title }}\n          <button v-if=\"column.sortable\" @click=\"sort(column.data)\">\n            </button>\n        </th> \n      </tr>\n    </thead>\n    <tbody>\n      <tr v-for=\"(row, index) in filteredData\" :key=\"index\">\n        <td v-for=\"(column, index) in columns\" :key=\"index\">\n          {{ row[column.data] }} \n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      columns: [\n        { title: \"Title\", data: \"title\", sortable: true },\n        // ... more columns\n      ],\n      eventsFromAPI: [],\n      sortOrder: null,\n      sortColumn: null,\n    }\n  },\n  computed: {\n    filteredData() {\n      // Implement filtering/search logic here if needed\n      return this.eventsFromAPI.slice().sort(this.sortComparator);\n    }\n  },\n  methods: {\n    fetchEvents() {\n      // ... (your API fetching logic)\n    },\n    sort(column) {\n      // Implement sorting logic, update sortOrder and sortColumn\n    },\n    sortComparator(a, b) {\n       // Implement comparison logic based on sortColumn and sortOrder\n    }\n  }\n}\n</script>\n"],"mappings":";mBAAA;;uBACEA,mBAAA,CAiBQ,gBAhBNC,mBAAA,CAQQ,gBAPNA,mBAAA,CAMK,c,kBALHD,mBAAA,CAIKE,SAAA,QARbC,WAAA,CAIsCC,KAAA,CAAAC,OAAO,EAJ7C,CAIoBC,MAAM,EAAEC,KAAK;yBAAzBP,mBAAA,CAIK;MAJmCQ,GAAG,EAAED;IAAK,IAJ1DE,gBAAA,CAAAC,gBAAA,CAKaJ,MAAM,CAACK,KAAK,IAAG,GAClB,iBAAcL,MAAM,CAACM,QAAQ,I,cAA7BZ,mBAAA,CACW;MAPrBQ,GAAA;MAM0CK,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,IAAI,CAACV,MAAM,CAACW,IAAI;4BANjEC,UAAA,KAAAC,mBAAA,e;sCAWIlB,mBAAA,CAMQ,iB,kBALND,mBAAA,CAIKE,SAAA,QAhBXC,WAAA,CAYiCY,QAAA,CAAAK,YAAY,EAZ7C,CAYkBC,GAAG,EAAEd,KAAK;yBAAtBP,mBAAA,CAIK;MAJqCQ,GAAG,EAAED;IAAK,K,kBAClDP,mBAAA,CAEKE,SAAA,QAfbC,WAAA,CAasCC,KAAA,CAAAC,OAAO,EAb7C,CAaoBC,MAAM,EAAEC,KAAK;2BAAzBP,mBAAA,CAEK;QAFmCQ,GAAG,EAAED;MAAK,GAAAG,gBAAA,CAC7CW,GAAG,CAACf,MAAM,CAACW,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}