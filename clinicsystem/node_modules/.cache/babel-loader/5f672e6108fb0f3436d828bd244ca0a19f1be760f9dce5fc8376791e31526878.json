{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    check() {\n      axios.get('http://localhost:8000/api/auth/check-mysql-status').then(response => {\n        // MySQL server is running, proceed with login\n        login();\n      }).catch(error => {\n        // MySQL server is not running, display error message\n        console.error(error.response.data); // For debugging\n        this.errorMessage = \"MySQL server is not running. Please start the server and try again.\";\n      });\n    },\n    login() {\n      // Perform login request using Axios\n      axios.post('http://localhost:8000/api/auth/login', {\n        email: this.email,\n        password: this.password\n      }).then(response => {\n        // Handle successful login\n        console.log(response.data); // For debugging\n        // You can store the token in local storage or cookies\n        localStorage.setItem('token', response.data.access_token);\n        // Redirect to another page or perform any other action\n        // Route to the admin view\n        localStorage.setItem('email', this.email);\n        this.$router.push({\n          name: 'admin'\n        });\n      }).catch(error => {\n        // Handle login error\n        console.error(error.response.data); // For debugging\n        this.errorMessage = error.response.data.message;\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","email","password","errorMessage","methods","check","get","then","response","login","catch","error","console","post","log","localStorage","setItem","access_token","$router","push","name","message"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\Working System\\clinicsystem\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n    <div class=\"app\">\r\n      <div class=\"container\">\r\n        <div class=\"d-flex justify-content-center align-items-center\" style=\"min-height: 100vh;\">\r\n       \r\n          <div class=\"col-md-6\">\r\n            <div class=\"card border-0 shadow-lg bg-transparent\">\r\n              <div class=\"card-body p-5\">\r\n                <div class=\"text-center mb-4\">\r\n                  <img src=\"../assets/icon.png\" alt=\"Logo\" width=\"160\">\r\n                </div>\r\n                <form @submit.prevent=\"login\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"email\" class=\"form-label visually-hidden\">Email</label>\r\n                    <div class=\"input-group\">\r\n                      <span class=\"input-group-text\"><img src=\"../assets/email.png\" width=\"40\" alt=\"Email\"></span>\r\n                      <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\" v-model=\"email\" autocomplete=\"current-email\" required>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"password\" class=\"form-label visually-hidden\">Password</label>\r\n                    <div class=\"input-group\">\r\n                      <span class=\"input-group-text\"><img src=\"../assets/password.png\" width=\"40\" alt=\"Password\"></span>\r\n                      <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Password\" v-model=\"password\" autocomplete=\"current-password\" required>\r\n                    </div>\r\n                  </div>\r\n                  <button type=\"submit\" class=\"btn btn-primary w-100\">Login</button>\r\n                </form>\r\n                <p class=\"text-center mt-3 text-danger\" v-if=\"errorMessage\">{{ errorMessage }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        email: '',\r\n        password: '',\r\n        errorMessage: ''\r\n      };\r\n    },\r\n    methods: {\r\n      check(){\r\n        axios.get('http://localhost:8000/api/auth/check-mysql-status')\r\n        .then(response => {\r\n          // MySQL server is running, proceed with login\r\n          login();\r\n        })\r\n        .catch(error => {\r\n          // MySQL server is not running, display error message\r\n          console.error(error.response.data); // For debugging\r\n          this.errorMessage = \"MySQL server is not running. Please start the server and try again.\";\r\n        });\r\n      \r\n\r\n      },\r\n      login() {\r\n        // Perform login request using Axios\r\n        axios.post('http://localhost:8000/api/auth/login', {\r\n          email: this.email,\r\n          password: this.password\r\n        })\r\n        .then(response => {\r\n          // Handle successful login\r\n          console.log(response.data); // For debugging\r\n          // You can store the token in local storage or cookies\r\n          localStorage.setItem('token', response.data.access_token);\r\n          // Redirect to another page or perform any other action\r\n          // Route to the admin view\r\n          localStorage.setItem('email', this.email);\r\n          this.$router.push({ name: 'admin' });\r\n        })\r\n        .catch(error => {\r\n          // Handle login error\r\n          console.error(error.response.data); // For debugging\r\n          this.errorMessage = error.response.data.message;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  \r\n  #app {\r\n  background-image: url(\"../assets/bgLogin.jpg\");\r\n  background-size: cover;\r\n  background-position: center;\r\n  height: 100vh;\r\n}\r\n  .visually-hidden {\r\n    position: absolute !important;\r\n    width: 1px !important;\r\n    height: 1px !important;\r\n    padding: 0 !important;\r\n    margin: -1px !important;\r\n    overflow: hidden !important;\r\n    clip: rect(0, 0, 0, 0) !important;\r\n    white-space: nowrap !important;\r\n    border: 0 !important;\r\n  }\r\n\r\n  /* Additional style for making card border transparent */\r\n.card {\r\n  border-color: rgba(255, 255, 255, 0.7);\r\n  border-radius: 20px;\r\n}\r\n\r\n.card-body {\r\n  background-color: rgba(255, 255, 255, 0.7); /* Optional: If you want the card body to be semi-transparent too */\r\n  border-radius: 20px;\r\n}\r\n  </style>\r\n  "],"mappings":";AAsCE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,KAAKA,CAAA,EAAE;MACLN,KAAK,CAACO,GAAG,CAAC,mDAAmD,EAC5DC,IAAI,CAACC,QAAO,IAAK;QAChB;QACAC,KAAK,CAAC,CAAC;MACT,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QACd;QACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACH,QAAQ,CAACR,IAAI,CAAC,EAAE;QACpC,IAAI,CAACG,YAAW,GAAI,qEAAqE;MAC3F,CAAC,CAAC;IAGJ,CAAC;IACDM,KAAKA,CAAA,EAAG;MACN;MACAV,KAAK,CAACc,IAAI,CAAC,sCAAsC,EAAE;QACjDZ,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,QAAQ,EAAE,IAAI,CAACA;MACjB,CAAC,EACAK,IAAI,CAACC,QAAO,IAAK;QAChB;QACAI,OAAO,CAACE,GAAG,CAACN,QAAQ,CAACR,IAAI,CAAC,EAAE;QAC5B;QACAe,YAAY,CAACC,OAAO,CAAC,OAAO,EAAER,QAAQ,CAACR,IAAI,CAACiB,YAAY,CAAC;QACzD;QACA;QACAF,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,IAAI,CAACf,KAAK,CAAC;QACzC,IAAI,CAACiB,OAAO,CAACC,IAAI,CAAC;UAAEC,IAAI,EAAE;QAAQ,CAAC,CAAC;MACtC,CAAC,EACAV,KAAK,CAACC,KAAI,IAAK;QACd;QACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACH,QAAQ,CAACR,IAAI,CAAC,EAAE;QACpC,IAAI,CAACG,YAAW,GAAIQ,KAAK,CAACH,QAAQ,CAACR,IAAI,CAACqB,OAAO;MACjD,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}