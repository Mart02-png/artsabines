{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5';\nimport * as bootstrap from 'bootstrap';\nlet eventGuid = 0;\nexport function createEventId() {\n  return String(eventGuid++);\n}\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\nfunction updateErrorMessage(message) {\n  const errorMessageElement = document.getElementById('errorMessage');\n  errorMessageElement.textContent = message;\n}\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n  data: function () {\n    return {\n      modal: null,\n      deletemodal: null,\n      errorModal: null,\n      // newEventTitle: '',\n      nameInput: '',\n      lastnameInput: '',\n      emailInput: '',\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1); // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [bootstrap5Plugin, listPlugin, dayGridPlugin, timeGridPlugin, interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5',\n        // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop,\n        // Add eventDrop handler\n        eventResize: this.handleEventResize,\n        eventDisplay: 'block'\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: []\n    };\n  },\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n    this.deletemodal = new bootstrap.Modal(document.getElementById('deleteModal'), {\n      // Optional: specify options here\n    });\n    this.errorModal = new bootstrap.Modal(document.getElementById('errorModal'), {\n      // Optional: specify options here\n    });\n  },\n  methods: {\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n    fetchEvents() {\n      fetch('http://localhost:8000/api/events').then(response => {\n        if (!response.ok) {\n          // Handle the error silently without displaying any error messages\n          return;\n        }\n        return response.json();\n      }).then(data => {\n        // Process the retrieved data\n      }).catch(error => {\n        // Handle the error silently without displaying any error messages\n      });\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events').then(response => {\n        let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => {\n          let color;\n          switch (event.user) {\n            case 'clientApproval':\n              color = '#007FFF';\n              break;\n            case 'clientApproved':\n              color = '#FF9E00';\n              break;\n            case 'admin':\n              color = '#FF2D00';\n              break;\n            default:\n              // Handle default case if needed\n              break;\n          }\n          return {\n            id: event.id,\n            title: event.title,\n            email: event.email,\n            user: event.user,\n            start: event.start,\n            end: event.end,\n            allDay: event.allDay,\n            color: color // Assign color based on user type\n          };\n        });\n\n        // Update local events with API events and update user if IDs match\n        eventsFromLocalStorage.forEach(localEvent => {\n          let correspondingAPIEvent = response.data.find(apiEvent => apiEvent.id === localEvent.id);\n          if (correspondingAPIEvent) {\n            if (correspondingAPIEvent.user !== localEvent.user) {\n              console.log(\"Delete Approved clients:::\", correspondingAPIEvent.id, correspondingAPIEvent.user, \"  :  \", localEvent.id, localEvent.user);\n              const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n              console.log('Updated events after deletion:', updatedEvents);\n              // Store the updated events back into local storage\n              localStorage.setItem('events', JSON.stringify(updatedEvents));\n              this.fetchEvents();\n            }\n          }\n          if (!correspondingAPIEvent && localEvent) {\n            const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n            // Store the updated events back into local storage\n            localStorage.setItem('events', JSON.stringify(updatedEvents));\n            this.fetchEvents();\n          }\n        });\n\n        // console.log('Events before deletion:', eventsFromLocalStorage);\n\n        let allEvents = eventsFromLocalStorage.concat(eventsFromAPI);\n        this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      const moment = require('moment');\n      // Get the current time in HH:mm:ss format\n      const currentTime = moment().format('HH:mm:ss');\n      let startSelectedDate = selectInfo.startStr + \" \" + currentTime;\n      axios.get('http://localhost:8000/api/events').then(response => {\n        let canAddEvent = true;\n        response.data.forEach(event => {\n          const moment = require('moment');\n          // Combine the current time with selectInfo.startStr\n          let startSelectedDateNoTime = moment(selectInfo.startStr).format('YYYY-MM-DD');\n          let EndSelectedDateNoTime = moment(event.start).format('YYYY-MM-DD');\n          // console.log(event.user, event.allDay, \"startSelected\", startSelectedDateNoTime,  \"EndSelected\", EndSelectedDateNoTime);\n          console.log(event.user, \"\\n startSelectedDate\", startSelectedDate, \"\\n event.start\", event.start, \"\\n startSelectedDate\", startSelectedDate, \"\\n event.end\", event.end);\n\n          // Check if the admin has added an event that overlaps with the selected time range\n          if (event.user === 'admin' && event.allDay === 1 && startSelectedDateNoTime === EndSelectedDateNoTime || event.user === 'admin' && startSelectedDate >= event.start && startSelectedDate <= event.end) {\n            canAddEvent = false;\n            // console.log(\"The schedule is busy day of admin. Please select another date\");\n            // this.errorModal.show();\n            updateErrorMessage(\"The schedule is busy on this day. Please select another date\");\n            this.errorModal.show();\n          }\n        });\n        if (canAddEvent) {\n          this.modal.show();\n          this.selectedInfo = selectInfo;\n          console.log(\"YOU CAN NOW ADD\");\n        }\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    saveChanges(selectedInfo) {\n      this.newEventTitle = this.nameInput + ' ' + this.lastnameInput;\n      if (this.newEventTitle.trim() !== '') {\n        let calendarApi = selectedInfo.view.calendar;\n        calendarApi.unselect(); // clear date selection\n\n        // Format start and end dates\n        let start = formatDatetime(selectedInfo.startStr);\n        let end = formatDatetime(selectedInfo.endStr);\n        axios.post('http://localhost:8000/api/events', {\n          title: this.newEventTitle,\n          email: this.emailInput,\n          start: start,\n          end: end,\n          user: 'clientApproval',\n          allDay: selectedInfo.allDay\n        }).then(response => {\n          // Hide the modal\n          this.modal.hide();\n          // Handle success\n          // console.log('Event added:', response.data);\n\n          this.allevents.push(response.data);\n          let newEvent = {\n            id: response.data.id,\n            title: response.data.title,\n            email: response.data.email,\n            user: response.data.user,\n            start: response.data.start,\n            end: response.data.end,\n            allDay: response.data.allDay\n          };\n          this.allevents.push(newEvent);\n          // Get existing events from local storage or initialize an empty array\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          events.push(newEvent); // Append the new event to existing events\n          localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n          calendarApi.addEvent(newEvent);\n          // Fetch events again to update the calendar\n          this.fetchEvents();\n\n          // this.newEventTitle = '';\n          this.nameInput = '';\n          this.lastnameInput = '';\n          this.emailInput = '';\n        }).catch(error => {\n          // Handle error\n          console.error('Error adding event:', error.response.data);\n        });\n      } else {\n        // Alert the user if the input field is empty\n        alert('Please enter a title for the event');\n      }\n    },\n    deleteItem(clickInfo) {\n      // console.log(clickInfo.event.id, clickInfo.event);\n      const user = clickInfo.event.extendedProps && clickInfo.event.extendedProps.user;\n      // console.log(user);\n\n      if (user == 'admin') {\n        // console.log(\"YOU CANNOT DELETE THIS IS FROM ADMIN\");\n        updateErrorMessage(\"Oops! You can't delete admin Schedule.\");\n        this.errorModal.show();\n      } else {\n        this.deletemodal.show();\n        this.clickedInfo = clickInfo;\n      }\n    },\n    deleteItemModal(clickedInfo) {\n      axios.delete(`http://localhost:8000/api/events/${clickedInfo.event.id}`).then(response => {\n        this.deletemodal.hide();\n        console.log(\"Succesfully Deleted: \" + response.data + clickedInfo.event.id);\n        // Fetch events from local storage\n        let events = JSON.parse(localStorage.getItem('events')) || [];\n        // Filter out the event to be deleted\n        const updatedEvents = events.filter(event => String(event.id) !== String(clickedInfo.event.id));\n        // Store the updated events back into local storage\n        localStorage.setItem('events', JSON.stringify(updatedEvents));\n        this.fetchEvents();\n      }).catch(error => {\n        console.error('Error deleting event:', error);\n      });\n    },\n    handleEventDrop(info) {\n      const moment = require('moment');\n      let startSelectedDate = moment(info.event.start).format('YYYY-MM-DD HH:mm:ss');\n      let endSelectedDate = moment(info.event.end).format('YYYY-MM-DD HH:mm:ss');\n      axios.get('http://localhost:8000/api/events').then(response => {\n        let canMoveEvent = true;\n        response.data.forEach(event => {\n          let eventStart = moment(event.start).format('YYYY-MM-DD HH:mm:ss');\n          let eventEnd = moment(event.end).format('YYYY-MM-DD HH:mm:ss');\n\n          // Check if the admin has added an event that overlaps with the selected time range\n          if (event.user === 'admin' && event.allDay === 1 && startSelectedDate === eventStart || event.user === 'admin' && startSelectedDate >= eventStart && endSelectedDate <= eventEnd) {\n            canMoveEvent = false;\n            // console.log(\"SHOW MODAL ALREADY ADDED BY ADMIN\");\n            updateErrorMessage(\"Oops! You can't drop, admin  already have Schedule.\");\n            this.errorModal.show();\n          }\n        });\n        if (canMoveEvent) {\n          const user = info.event.extendedProps && info.event.extendedProps.user;\n          // console.log(user);\n\n          if (user == 'admin') {\n            updateErrorMessage(\"Oops! You can't drop the admin Schedule.\");\n            this.errorModal.show();\n            this.fetchEvents();\n            return;\n          }\n          const eventId = info.event.id;\n          const allDay = info.event.allDay;\n          const start_formatdate = formatDatetime(info.event.startStr);\n          let end_formatdate = formatDatetime(info.event.endStr);\n          const moment = require('moment');\n          // If end date is empty, set it to start date\n          if (end_formatdate === \"\") {\n            end_formatdate = moment(start_formatdate).add(1, 'hours').format('YYYY-MM-DD HH:mm:ss');\n          }\n          if (allDay) {\n            end_formatdate = moment(start_formatdate).add(24, 'hours').format('YYYY-MM-DD HH:mm:ss');\n            console.log(\"allDay\", allDay);\n          }\n          axios.put(`http://localhost:8000/api/events/${eventId}`, {\n            start: start_formatdate,\n            end: end_formatdate,\n            allDay: allDay\n          }).then(response => {\n            console.log('Event updated successfully:', response.data);\n            const events = JSON.parse(localStorage.getItem('events')) || [];\n            events.forEach((event, index) => {\n              if (event.id == eventId) {\n                // Update the event's details\n                events[index] = {\n                  ...event,\n                  start: start_formatdate,\n                  end: end_formatdate,\n                  allDay: allDay\n                };\n                // console.log(\"Updated Event ID:\", event.id, \"with new start and end dates.\");\n              }\n            });\n\n            // Save the updated events array back to local storage\n            localStorage.setItem('events', JSON.stringify(events));\n          }).catch(error => {\n            console.error('Error updating event:', error.response.data);\n          });\n        } else {\n          // Logic to revert the event drop if needed\n          info.revert();\n        }\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    // Function to handle resize event\n    handleEventResize(info) {\n      const user = info.event.extendedProps && info.event.extendedProps.user;\n      if (user == 'admin') {\n        updateErrorMessage(\"Oops! You can't resize admin Schedule.\");\n        this.errorModal.show();\n        info.revert();\n        return;\n      }\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      }).then(response => {\n        console.log('Event updated Resize:', response.data);\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  }\n};","map":{"version":3,"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","axios","bootstrap5Plugin","bootstrap","eventGuid","createEventId","String","formatDatetime","datetimeStr","replace","updateErrorMessage","message","errorMessageElement","document","getElementById","textContent","components","data","modal","deletemodal","errorModal","nameInput","lastnameInput","emailInput","calendarOptions","selectAllow","selectionInfo","startDate","start","endDate","end","setSeconds","getSeconds","getDate","plugins","headerToolbar","left","center","right","themeSystem","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","select","handleDateSelect","eventClick","deleteItem","eventsSet","handleEvents","eventDrop","handleEventDrop","eventResize","handleEventResize","eventDisplay","allevents","mounted","fetchEvents","Modal","methods","handleWeekendsToggle","fetch","then","response","ok","json","catch","error","eventsFromLocalStorage","JSON","parse","localStorage","getItem","get","eventsFromAPI","filter","event","user","map","color","id","title","email","allDay","forEach","localEvent","correspondingAPIEvent","find","apiEvent","console","log","updatedEvents","setItem","stringify","allEvents","concat","events","selectInfo","moment","require","currentTime","format","startSelectedDate","startStr","canAddEvent","startSelectedDateNoTime","EndSelectedDateNoTime","show","selectedInfo","saveChanges","newEventTitle","trim","calendarApi","view","calendar","unselect","endStr","post","hide","push","newEvent","addEvent","alert","clickInfo","extendedProps","clickedInfo","deleteItemModal","delete","info","endSelectedDate","canMoveEvent","eventStart","eventEnd","eventId","start_formatdate","end_formatdate","add","put","index","revert"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\Working System\\clinicsystem\\src\\views\\ClientView.vue"],"sourcesContent":["<!-- ClientView.vue -->\n\n<script>\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport listPlugin from '@fullcalendar/list'\n\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5'\nimport * as bootstrap from 'bootstrap';\n\n\nlet eventGuid = 0\nexport function createEventId() {\n  return String(eventGuid++)\n}\n\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\n\nfunction updateErrorMessage(message) {\n  const errorMessageElement = document.getElementById('errorMessage');\n  errorMessageElement.textContent = message;\n}\n\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n\n  data: function () {\n    return {\n      modal: null,\n      deletemodal: null,\n      errorModal: null,\n      // newEventTitle: '',\n      nameInput: '',\n      lastnameInput: '',\n      emailInput: '',\n\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1);  // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [\n          bootstrap5Plugin,\n          listPlugin,\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5', // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop, // Add eventDrop handler\n        eventResize: this.handleEventResize,\n        eventDisplay: 'block'\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: [],\n    }\n  },\n\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n    this.deletemodal = new bootstrap.Modal(document.getElementById('deleteModal'), {\n      // Optional: specify options here\n    });\n    \n    this.errorModal = new bootstrap.Modal(document.getElementById('errorModal'), {\n      // Optional: specify options here\n    });\n  },\n\n  methods: {\n\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n\n    fetchEvents() {\n      fetch('http://localhost:8000/api/events')\n  .then(response => {\n    if (!response.ok) {\n          // Handle the error silently without displaying any error messages\n          return;\n        }\n        return response.json();\n      })\n      .then(data => {\n        // Process the retrieved data\n      })\n      .catch(error => {\n        // Handle the error silently without displaying any error messages\n      });\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n\n          let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => {\n            let color;\n            switch (event.user) {\n              case 'clientApproval':\n                color = '#007FFF';\n                break;\n              case 'clientApproved':\n                color = '#FF9E00';\n                break;\n              case 'admin':\n                color = '#FF2D00';\n                break;\n              default:\n                // Handle default case if needed\n                break;\n            }\n            return {\n              id: event.id,\n              title: event.title,\n              email: event.email,\n              user: event.user,\n              start: event.start,\n              end: event.end,\n              allDay: event.allDay,\n              color: color // Assign color based on user type\n\n            };\n\n          });\n\n          // Update local events with API events and update user if IDs match\n          eventsFromLocalStorage.forEach(localEvent => {\n\n            let correspondingAPIEvent = response.data.find(apiEvent => apiEvent.id === localEvent.id);\n            if (correspondingAPIEvent) {\n\n              if (correspondingAPIEvent.user !== localEvent.user) {\n                console.log(\"Delete Approved clients:::\", correspondingAPIEvent.id, correspondingAPIEvent.user, \"  :  \", localEvent.id, localEvent.user);\n                const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n                console.log('Updated events after deletion:', updatedEvents);\n                // Store the updated events back into local storage\n                localStorage.setItem('events', JSON.stringify(updatedEvents));\n                this.fetchEvents();\n              }\n\n            }\n\n            if (!correspondingAPIEvent && localEvent) {\n              const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n              // Store the updated events back into local storage\n              localStorage.setItem('events', JSON.stringify(updatedEvents));\n              this.fetchEvents();\n            }\n          });\n\n          // console.log('Events before deletion:', eventsFromLocalStorage);\n\n          let allEvents = eventsFromLocalStorage.concat(eventsFromAPI);\n\n          this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n\n\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      const moment = require('moment');\n      // Get the current time in HH:mm:ss format\n      const currentTime = moment().format('HH:mm:ss');\n      let startSelectedDate = selectInfo.startStr + \" \" + currentTime;\n\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n          let canAddEvent = true;\n          response.data.forEach(event => {\n            const moment = require('moment');\n            // Combine the current time with selectInfo.startStr\n            let startSelectedDateNoTime = moment(selectInfo.startStr).format('YYYY-MM-DD');\n            let EndSelectedDateNoTime = moment(event.start).format('YYYY-MM-DD');\n            // console.log(event.user, event.allDay, \"startSelected\", startSelectedDateNoTime,  \"EndSelected\", EndSelectedDateNoTime);\n            console.log(event.user, \"\\n startSelectedDate\", startSelectedDate, \"\\n event.start\", event.start, \"\\n startSelectedDate\", startSelectedDate, \"\\n event.end\", event.end);\n\n            // Check if the admin has added an event that overlaps with the selected time range\n            if (event.user === 'admin' && event.allDay === 1 && startSelectedDateNoTime === EndSelectedDateNoTime || event.user === 'admin' && startSelectedDate >= event.start && startSelectedDate <= event.end) {\n              canAddEvent = false;\n              // console.log(\"The schedule is busy day of admin. Please select another date\");\n              // this.errorModal.show();\n              updateErrorMessage(\"The schedule is busy on this day. Please select another date\");\n              this.errorModal.show(); \n            }\n          });\n\n          if (canAddEvent) {\n            this.modal.show();\n            this.selectedInfo = selectInfo;\n            console.log(\"YOU CAN NOW ADD\");\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n\n\n    saveChanges(selectedInfo) {\n      this.newEventTitle = this.nameInput + ' ' + this.lastnameInput;\n      if (this.newEventTitle.trim() !== '') {\n\n        let calendarApi = selectedInfo.view.calendar;\n        calendarApi.unselect() // clear date selection\n\n        // Format start and end dates\n        let start = formatDatetime(selectedInfo.startStr);\n        let end = formatDatetime(selectedInfo.endStr);\n\n        axios.post('http://localhost:8000/api/events', {\n          title: this.newEventTitle,\n          email: this.emailInput,\n          start: start,\n          end: end,\n          user: 'clientApproval',\n          allDay: selectedInfo.allDay\n        })\n          .then(response => {\n            // Hide the modal\n            this.modal.hide();\n            // Handle success\n            // console.log('Event added:', response.data);\n\n            this.allevents.push(response.data);\n\n            let newEvent = {\n              id: response.data.id,\n              title: response.data.title,\n              email: response.data.email,\n              user: response.data.user,\n              start: response.data.start,\n              end: response.data.end,\n              allDay: response.data.allDay,\n\n            };\n\n            this.allevents.push(newEvent);\n            // Get existing events from local storage or initialize an empty array\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            events.push(newEvent); // Append the new event to existing events\n            localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n            calendarApi.addEvent(newEvent);\n            // Fetch events again to update the calendar\n            this.fetchEvents();\n\n            // this.newEventTitle = '';\n            this.nameInput = '';\n            this.lastnameInput = '';\n            this.emailInput = '';\n\n          })\n          .catch(error => {\n            // Handle error\n            console.error('Error adding event:', error.response.data);\n          });\n      } else {\n        // Alert the user if the input field is empty\n        alert('Please enter a title for the event');\n      }\n    },\n\n\n    deleteItem(clickInfo) {\n      // console.log(clickInfo.event.id, clickInfo.event);\n      const user = clickInfo.event.extendedProps && clickInfo.event.extendedProps.user;\n      // console.log(user);\n\n      if(user == 'admin'){\n        // console.log(\"YOU CANNOT DELETE THIS IS FROM ADMIN\");\n        updateErrorMessage(\"Oops! You can't delete admin Schedule.\");\n        this.errorModal.show();\n\n      }else{\n        this.deletemodal.show();\n        this.clickedInfo = clickInfo;\n      }\n    },\n\n    deleteItemModal(clickedInfo) {\n\n      axios.delete(`http://localhost:8000/api/events/${clickedInfo.event.id}`)\n        .then(response => {\n          this.deletemodal.hide();\n          console.log(\"Succesfully Deleted: \" + response.data + clickedInfo.event.id);\n          // Fetch events from local storage\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          // Filter out the event to be deleted\n          const updatedEvents = events.filter(event => String(event.id) !== String(clickedInfo.event.id));\n          // Store the updated events back into local storage\n          localStorage.setItem('events', JSON.stringify(updatedEvents));\n          this.fetchEvents();\n        })\n        .catch(error => {\n\n          console.error('Error deleting event:', error);\n        });\n\n    },\n\n    handleEventDrop(info) {\n  const moment = require('moment');\n  let startSelectedDate = moment(info.event.start).format('YYYY-MM-DD HH:mm:ss');\n  let endSelectedDate = moment(info.event.end).format('YYYY-MM-DD HH:mm:ss');\n\n  axios.get('http://localhost:8000/api/events')\n    .then(response => {\n      let canMoveEvent = true;\n      response.data.forEach(event => {\n        let eventStart = moment(event.start).format('YYYY-MM-DD HH:mm:ss');\n        let eventEnd = moment(event.end).format('YYYY-MM-DD HH:mm:ss');\n\n        // Check if the admin has added an event that overlaps with the selected time range\n        if (event.user === 'admin' && event.allDay === 1 && startSelectedDate === eventStart || \n            event.user === 'admin' && startSelectedDate >= eventStart && endSelectedDate <= eventEnd) {\n          canMoveEvent = false;\n          // console.log(\"SHOW MODAL ALREADY ADDED BY ADMIN\");\n          updateErrorMessage(\"Oops! You can't drop, admin  already have Schedule.\");\n          \n          this.errorModal.show();\n        }\n      });\n\n      if (canMoveEvent) {\n\n      const user = info.event.extendedProps && info.event.extendedProps.user;\n      // console.log(user);\n\n      if(user == 'admin'){\n        updateErrorMessage(\"Oops! You can't drop the admin Schedule.\");\n          this.errorModal.show();\n        this.fetchEvents();\n        return;\n      }\n\n\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      const moment = require('moment');\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = moment(start_formatdate).add(1, 'hours').format('YYYY-MM-DD HH:mm:ss');\n      }\n      if(allDay){\n        end_formatdate = moment(start_formatdate).add(24, 'hours').format('YYYY-MM-DD HH:mm:ss');\n        console.log(\"allDay\", allDay);\n      }\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      })\n        .then(response => {\n          console.log('Event updated successfully:', response.data);\n\n          const events = JSON.parse(localStorage.getItem('events')) || [];\n          events.forEach((event, index) => {\n            if (event.id == eventId) {\n              // Update the event's details\n              events[index] = { ...event, start: start_formatdate, end: end_formatdate, allDay: allDay };\n              // console.log(\"Updated Event ID:\", event.id, \"with new start and end dates.\");\n            }\n          });\n\n          // Save the updated events array back to local storage\n          localStorage.setItem('events', JSON.stringify(events));\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n\n      } else {\n        // Logic to revert the event drop if needed\n        info.revert();\n      }\n    })\n    .catch(error => {\n      console.error('Error fetching events:', error);\n    });\n},\n\n    // Function to handle resize event\n    handleEventResize(info) {\n      const user = info.event.extendedProps && info.event.extendedProps.user;\n      if(user == 'admin'){\n        updateErrorMessage(\"Oops! You can't resize admin Schedule.\");\n        this.errorModal.show();\n        info.revert();\n        return;\n      }\n\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      })\n        .then(response => {\n          console.log('Event updated Resize:', response.data);\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  },\n}\n</script>\n\n\n\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-sidebar' style=\"display: flex; flex-direction: column; justify-content: space-between;\">\n      <div>\n        <div class=\"text-center\">\n          <img src=\"../assets/icon.png\" alt=\"Ears Nose and Throat\" style=\"width: 160px; height: auto; \"\n            class=\"img-fluid\">\n        </div>\n        <div style=\"margin: 50px 5px 10px 5px ;\">\n          <h2>Instructions</h2>\n          <ul style=\"text-align: left;\">\n            <li>Select dates and you will be prompted to create a new event</li>\n            <li>Drag, drop, and resize events</li>\n            <li>Click an event to delete it</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'about' }\">about</router-link>\n        <router-view />\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'login' }\">Admin Login</router-link>\n        <router-view />\n      </div>\n    </div>\n\n\n    <div class='demo-app-main'>\n      <FullCalendar class='demo-app-calendar' :options='calendarOptions'>\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.start }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n\n      <!-- Modal -->\n      <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header bg-primary text-white\">\n              <h5 class=\"modal-title\" id=\"exampleModalLabel\">Create Schedule</h5>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            <!-- Modal Body Content -->\n            <div class=\"modal-body\">\n              <!-- <div class=\"mb-3\">\n                  <input type=\"text\" class=\"form-control\" id=\"newEventTitle\" v-model=\"newEventTitle\" placeholder=\"Event Title\">\n                </div> -->\n              <div class=\"mb-3\">\n                <input type=\"text\" class=\"form-control\" id=\"nameInput\" v-model=\"nameInput\" placeholder=\"Name\">\n              </div>\n              <div class=\"mb-3\">\n                <input type=\"text\" class=\"form-control\" id=\"lastnameInput\" v-model=\"lastnameInput\"\n                  placeholder=\"Lastname\">\n              </div>\n              <div class=\"mb-3\">\n                <input type=\"email\" class=\"form-control\" id=\"emailInput\" v-model=\"emailInput\" placeholder=\"Email\">\n              </div>\n              <!-- Rest of your modal content -->\n            </div>\n\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n              <button type=\"button\" class=\"btn btn-primary\" @click=\"saveChanges(selectedInfo)\">Save changes</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Delete -->\n      <div class=\"modal fade\" id=\"deleteModal\" tabindex=\"-1\" aria-labelledby=\"deleteModal\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header bg-danger text-white\">\n              <h5 class=\"modal-title\">Delete</h5>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            <div class=\"modal-body\">\n              <p>Are you sure you want to delete?</p>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n              <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteItemModal(clickedInfo)\">Delete</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n            <!-- Error -->\n        <div class=\"modal fade\" id=\"errorModal\" tabindex=\"-1\" aria-labelledby=\"errorModal\" aria-hidden=\"true\">\n          <div class=\"modal-dialog modal-dialog-centered\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header bg-danger text-white\">\n                <h5 class=\"modal-title bi-exclamation-triangle-fill\"> Error</h5>\n                <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n              </div>\n              <div class=\"modal-body\">\n              <h4><p><i class=\"bi\"></i> <span id=\"errorMessage\"></span></p></h4>\n              </div>\n              <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-danger\" data-bs-dismiss=\"modal\">Close</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n    </div>\n  </div>\n</template>\n\n\n\n<style lang='css'>\nhtml,\nbody {\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n\n  /* overflow: hidden; Disable scrolling of the entire page */\n}\n\n@media (max-width: 650px) {\n  ul {\n    margin: 0;\n    /* padding: 0 0 0 1.5em; */\n    font-size: 10px;\n  }\n\n  li {\n    /* margin: 1.5em 0; */\n    padding: 0;\n    font-size: 10px;\n  }\n}\n\n/* .modal-backdrop {\n    display: none;\n    z-index: 1040 !important;\n}\n\n.modal-content {\n    margin: 2px auto;\n    z-index: 1100 !important;\n} */\n\nh2 {\n  margin: 0;\n  font-size: 16px;\n}\n\nul {\n  margin: 0;\n  /* padding: 0 0 0 1.5em; */\n}\n\nli {\n  /* margin: 1.5em 0; */\n  padding: 0;\n}\n\nb {\n  /* used for event dates/times */\n  margin-right: 3px;\n  color: black;\n}\n\ni {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.demo-app {\n  display: flex;\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n  font-size: 14px;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-sidebar {\n  padding: 10px;\n  width: 300px;\n  line-height: 1.5;\n  /* background: #eaf9ff; */\n  background-color: #e6e7e9;\n  border-right: 1px solid #d3e2e8;\n  /* overflow-y: auto; */\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-main {\n  flex-grow: 1;\n  padding: 3em;\n}\n\n/* Adjust the height of FullCalendar to fit within the main content area */\n.demo-app-calendar {\n  height: calc(100vh - 6em);\n  /* Adjust as needed, considering header/footer heights */\n}\n\n.fc {\n  /* the calendar root */\n  /* max-width: 1100px; */\n  margin: 0 auto;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.fc-col-header-cell-cushion {\n  text-decoration: none;\n  color: black;\n}\n\n.fc-scrollgrid .fc-daygrid-day-number {\n  text-decoration: none;\n  color: black;\n\n}\n\n.fc-event {\n  color: white;\n}\n\n.fc-list-event-title {\n  color: black;\n}\n\n.fc-list-event-time {\n  color: black;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n\n/* Make the text bold in the week view of FullCalendar */\n.fc-timegrid-event .fc-content {\n  /* For event titles */\n  font-weight: bold;\n}\n\n.fc-timegrid-axis,\n/* For time labels on the left */\n.fc-day-header,\n/* For day headers */\n.fc-timegrid-slots td,\n/* For time slots */\n.fc-timegrid-slots .fc-timegrid-slot-lane {\n  /* For the content within time slots */\n  font-weight: bold;\n}\n\n\n/* Make the dates bold in FullCalendar */\n.fc-daygrid-day-number {\n  /* For day numbers in month view */\n  font-weight: bold;\n}\n\n.fc-col-header {\n  /* For day headers (e.g., Sun, Mon, Tue) */\n  font-weight: bold;\n  background-color: white;\n  font-size: 20px;\n}\n\n.fc table {\n  font-size: 14px;\n}\n\n\n/* Make the text bold in FullCalendar */\n.fc-daygrid-event,\n/* Event titles */\n.fc-list-item-title\n\n/* List view event titles */\n  {\n  font-weight: bold;\n  overflow: hidden;\n}\n\n.fc-toolbar-title\n\n/* Calendar header title */\n  {\n  font-weight: bold;\n  color: white;\n}\n\n.fc-view-harness {\n  background-color: rgba(230, 231, 233, 0.783);\n  /* Adjust the alpha value (0.5) to make it more or less transparent */\n}\n\n:root {\n  --fc-list-event-hover-bg-color: #ADD8E6;\n  /* Light blue color */\n  --fc-today-bg-color: rgba(77, 76, 75, 0.53);\n}\n\n.fc-day:hover {\n  background-color: #ADD8E6;\n  /* Light blue color on hover */\n  cursor: pointer;\n  /* Change cursor to pointer on hover */\n}\n\n.fc-event-time,\n.fc-event-title {\n  display: inline;\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}