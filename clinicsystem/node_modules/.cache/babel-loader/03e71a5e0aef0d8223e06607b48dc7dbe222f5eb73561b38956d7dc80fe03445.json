{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"daw\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_DataTable = _resolveComponent(\"DataTable\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_DataTable, {\n    ref: \"myDataTable\",\n    columns: $data.columns,\n    data: $data.events\n  }, null, 8 /* PROPS */, [\"columns\", \"data\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_DataTable","ref","columns","$data","data","events"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\Working System\\clinicsystem\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n  <div class=\"daw\">\n    <DataTable ref=\"myDataTable\" :columns=\"columns\" :data=\"events\" />\n  </div>\n</template>\n\n<script>\n// import DataTable from 'datatables.net-vue3';\n// import 'datatables.net-bs5'; // Or another styling library if you prefer\nimport axios from 'axios'; // Import axios for HTTP requests\n\n\nimport DataTable from 'datatables.net-vue3'\nimport DataTablesLib from 'datatables.net-bs5';\nimport 'datatables.net-select-bs5';\n\nDataTable.use(DataTablesLib);\n\n\nexport default {\n  components: {\n    DataTable\n  },\n  data() {\n    return {\n      columns: [\n        { data: 'id', title: 'ID' },\n        { data: 'title', title: 'Title' },\n        { data: 'email', title: 'Email' },\n      ],\n      events: []\n    };\n  },\n  mounted() {\n    this.fetchEvents();\n  },\n  methods: {\n    async fetchEvents() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/events');\n        this.events = response.data.filter(event => event.user === 'clientApproval')\n                                   .map(event => ({\n                                      id: event.id,\n                                      title: event.title,\n                                      email: event.email\n                                   }));\n        this.$refs.myDataTable.refresh(); // Refresh DataTable after data update\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    }\n  }\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAK;;;uBAAhBC,mBAAA,CAEM,OAFNC,UAEM,GADJC,YAAA,CAAiEC,oBAAA;IAAtDC,GAAG,EAAC,aAAa;IAAEC,OAAO,EAAEC,KAAA,CAAAD,OAAO;IAAGE,IAAI,EAAED,KAAA,CAAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}