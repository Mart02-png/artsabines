{"ast":null,"code":"// Import necessary dependencies\nimport { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport ClientView from '../views/ClientView.vue';\nimport AdminView from '../views/AdminView.vue';\nimport AboutView from '../views/AboutView.vue';\nimport LoginView from '../views/LoginView.vue';\n\n// Create routes array\nconst routes = [{\n  path: '/home',\n  name: 'home',\n  component: HomeView\n}, {\n  path: '/about',\n  name: 'about',\n  component: AboutView\n}, {\n  path: '/admin',\n  name: 'admin',\n  component: AdminView,\n  meta: {\n    requiresAuth: true\n  } // Add meta field to indicate route requires authentication\n  // props: true // This allows passing route params as props\n}, {\n  path: '/',\n  name: 'client',\n  component: ClientView\n}, {\n  path: '/login',\n  name: 'login',\n  component: LoginView\n}];\n\n// Create router instance\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// Add navigation guard to check if user is logged in\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = localStorage.getItem('token'); // Check if token exists in local storage\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth); // Check if route requires authentication\n\n  // If route requires authentication and user is not logged in, redirect to login page\n  if (requiresAuth && !isAuthenticated) {\n    next('/login');\n  } else if (to.name === 'login' && isAuthenticated) {\n    // If user is already logged in and tries to access login page, redirect to admin page or home page\n    next('/admin'); // You can change '/admin' to any other page you want to redirect to\n  } else {\n    next(); // Continue to the requested route\n  }\n});\n\n// Export router instance\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","ClientView","AdminView","AboutView","LoginView","routes","path","name","component","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","isAuthenticated","localStorage","getItem","matched","some","record"],"sources":["C:/Users/Asus/Desktop/Clinic/Working System/clinicsystem/src/router/index.js"],"sourcesContent":["// Import necessary dependencies\nimport { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\nimport ClientView from '../views/ClientView.vue'\nimport AdminView from '../views/AdminView.vue'\nimport AboutView from '../views/AboutView.vue'\nimport LoginView from '../views/LoginView.vue'\n\n// Create routes array\nconst routes = [\n  {\n    path: '/home',\n    name: 'home',\n    component: HomeView\n  },\n  {\n    path: '/about',\n    name: 'about',\n    component: AboutView\n  },\n  {\n    path: '/admin',\n    name: 'admin',\n    component: AdminView,\n    meta: { requiresAuth: true }, // Add meta field to indicate route requires authentication\n    // props: true // This allows passing route params as props\n  },\n  {\n    path: '/',\n    name: 'client',\n    component: ClientView\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: LoginView\n  },\n]\n\n// Create router instance\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\n// Add navigation guard to check if user is logged in\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = localStorage.getItem('token'); // Check if token exists in local storage\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth); // Check if route requires authentication\n\n  // If route requires authentication and user is not logged in, redirect to login page\n  if (requiresAuth && !isAuthenticated) {\n    next('/login');\n  } else if (to.name === 'login'&& isAuthenticated ) {\n    // If user is already logged in and tries to access login page, redirect to admin page or home page\n    next('/admin'); // You can change '/admin' to any other page you want to redirect to\n  } else {\n    next(); // Continue to the requested route\n  }\n});\n\n// Export router instance\nexport default router\n"],"mappings":"AAAA;AACA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;;AAE9C;AACA,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAER;AACb,CAAC,EACD;EACEM,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEL;AACb,CAAC,EACD;EACEG,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEN,SAAS;EACpBO,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;EAC9B;AACF,CAAC,EACD;EACEJ,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEP;AACb,CAAC,EACD;EACEK,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEJ;AACb,CAAC,CACF;;AAED;AACA,MAAMO,MAAM,GAAGb,YAAY,CAAC;EAC1Bc,OAAO,EAAEb,gBAAgB,CAACc,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CV;AACF,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EACvD,MAAMZ,YAAY,GAAGO,EAAE,CAACM,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAChB,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC;;EAE1E;EACA,IAAIA,YAAY,IAAI,CAACU,eAAe,EAAE;IACpCD,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM,IAAIF,EAAE,CAACV,IAAI,KAAK,OAAO,IAAGa,eAAe,EAAG;IACjD;IACAD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EAClB,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;;AAEF;AACA,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}