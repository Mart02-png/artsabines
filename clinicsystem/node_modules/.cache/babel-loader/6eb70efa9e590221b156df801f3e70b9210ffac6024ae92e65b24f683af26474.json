{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { nextTick, openBlock, createBlock, createVNode, withKeys, withModifiers, renderSlot, createCommentVNode, withDirectives, Fragment, renderList, toDisplayString, vShow } from 'vue';\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a'],\n  BASIC_TYPES: ['hour', 'minute', 'second', 'apm']\n};\nconst DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false,\n  advancedKeyboard: false,\n  hideDropdown: false,\n  blurDelay: 300,\n  manualInputTimeout: 1000,\n  dropOffsetHeight: 160\n};\nvar script = {\n  name: 'VueTimepicker',\n  props: {\n    modelValue: {\n      type: [Object, String]\n    },\n    format: {\n      type: String\n    },\n    minuteInterval: {\n      type: [Number, String]\n    },\n    secondInterval: {\n      type: [Number, String]\n    },\n    hourRange: {\n      type: Array\n    },\n    minuteRange: {\n      type: Array\n    },\n    secondRange: {\n      type: Array\n    },\n    hideDisabledHours: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledMinutes: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledSeconds: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledItems: {\n      type: Boolean,\n      default: false\n    },\n    hideClearButton: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    closeOnComplete: {\n      type: Boolean,\n      default: false\n    },\n    id: {\n      type: String\n    },\n    name: {\n      type: String\n    },\n    inputClass: {\n      type: [String, Object, Array]\n    },\n    placeholder: {\n      type: String\n    },\n    tabindex: {\n      type: [Number, String],\n      default: 0\n    },\n    inputWidth: {\n      type: String\n    },\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    hourLabel: {\n      type: String\n    },\n    minuteLabel: {\n      type: String\n    },\n    secondLabel: {\n      type: String\n    },\n    apmLabel: {\n      type: String\n    },\n    amText: {\n      type: String\n    },\n    pmText: {\n      type: String\n    },\n    blurDelay: {\n      type: [Number, String]\n    },\n    advancedKeyboard: {\n      type: Boolean,\n      default: false\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    autoScroll: {\n      type: Boolean,\n      default: false\n    },\n    dropDirection: {\n      type: String,\n      default: 'down'\n    },\n    dropOffsetHeight: {\n      type: [Number, String]\n    },\n    containerId: {\n      type: String\n    },\n    manualInput: {\n      type: Boolean,\n      default: false\n    },\n    manualInputTimeout: {\n      type: [Number, String]\n    },\n    hideDropdown: {\n      type: Boolean,\n      default: false\n    },\n    fixedDropdownButton: {\n      type: Boolean,\n      default: false\n    },\n    debugMode: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      timeValue: {},\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n      isActive: false,\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined,\n      doClearApmChecking: false,\n      selectionTimer: undefined,\n      kbInputTimer: undefined,\n      kbInputLog: '',\n      bakCurrentPos: undefined,\n      forceDropOnTop: false\n    };\n  },\n  emits: ['update:modelValue', 'change', 'open', 'close', 'focus', 'blur', 'error'],\n  computed: {\n    opts() {\n      const options = Object.assign({}, DEFAULT_OPTIONS);\n      if (this.format && this.format.length) {\n        options.format = String(this.format);\n      }\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval;\n      }\n      // minuteInterval failsafe\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (this.debugMode) {\n          if (options.minuteInterval > 60) {\n            this.debugLog(`\"minute-interval\" should be less than 60. Current value is ${this.minuteInterval}`);\n          } else if (options.minuteInterval === 0 || options.minuteInterval < 1) {\n            this.debugLog(`\"minute-interval\" should be NO less than 1. Current value is ${this.minuteInterval}`);\n          }\n        }\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60;\n        } else {\n          options.minuteInterval = 1;\n        }\n      }\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval;\n      }\n      // secondInterval failsafe\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (this.debugMode) {\n          if (options.secondInterval > 60) {\n            this.debugLog(`\"second-interval\" should be less than 60. Current value is ${this.secondInterval}`);\n          } else if (options.secondInterval === 0 || options.secondInterval < 1) {\n            this.debugLog(`\"second-interval\" should be NO less than 1. Current value is ${this.secondInterval}`);\n          }\n        }\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60;\n        } else {\n          options.secondInterval = 1;\n        }\n      }\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange));\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)');\n        }\n      }\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange));\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)');\n        }\n      }\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange));\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)');\n        }\n      }\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true;\n      }\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true;\n      }\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true;\n      }\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true;\n      }\n      if (this.hideDropdown) {\n        if (this.manualInput) {\n          options.hideDropdown = true;\n        } else if (this.debugMode) {\n          this.debugLog('\"hide-dropdown\" only works with \"manual-input\" mode');\n        }\n      }\n      if (this.blurDelay && +this.blurDelay > 0) {\n        options.blurDelay = +this.blurDelay;\n      }\n      if (this.manualInputTimeout && +this.manualInputTimeout > 0) {\n        options.manualInputTimeout = +this.manualInputTimeout;\n      }\n      if (this.dropOffsetHeight && +this.dropOffsetHeight > 0) {\n        options.dropOffsetHeight = +this.dropOffsetHeight;\n      }\n      return options;\n    },\n    useStringValue() {\n      return typeof this.modelValue === 'string';\n    },\n    formatString() {\n      return this.opts.format || DEFAULT_OPTIONS.format;\n    },\n    inUse() {\n      const typesInUse = CONFIG.BASIC_TYPES.filter(type => this.getTokenByType(type));\n      // Sort types and tokens by their sequence in the \"format\" string\n      typesInUse.sort((l, r) => {\n        return this.formatString.indexOf(this.getTokenByType(l) || null) - this.formatString.indexOf(this.getTokenByType(r) || null);\n      });\n      const tokensInUse = typesInUse.map(type => this.getTokenByType(type));\n      return {\n        hour: !!this.hourType,\n        minute: !!this.minuteType,\n        second: !!this.secondType,\n        apm: !!this.apmType,\n        types: typesInUse || [],\n        tokens: tokensInUse || []\n      };\n    },\n    displayTime() {\n      let formatString = String(this.formatString);\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour);\n      }\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute);\n      }\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second);\n      }\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm);\n      }\n      return formatString;\n    },\n    customDisplayTime() {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime;\n      }\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm));\n    },\n    inputIsEmpty() {\n      return this.formatString === this.displayTime;\n    },\n    allValueSelected() {\n      if (this.inUse.hour && !this.hour || this.inUse.minute && !this.minute || this.inUse.second && !this.second || this.inUse.apm && !this.apm) {\n        return false;\n      }\n      return true;\n    },\n    columnsSequence() {\n      return this.inUse.types.map(type => type) || [];\n    },\n    showClearBtn() {\n      if (this.hideClearButton || this.disabled) {\n        return false;\n      }\n      return !this.inputIsEmpty;\n    },\n    showDropdownBtn() {\n      if (this.fixedDropdownButton) {\n        return true;\n      }\n      if (this.opts.hideDropdown && this.isActive && !this.showDropdown) {\n        return true;\n      }\n      return false;\n    },\n    baseOn12Hours() {\n      return this.hourType === 'h' || this.hourType === 'hh';\n    },\n    hourRangeIn24HrFormat() {\n      if (!this.hourType || !this.opts.hourRange) {\n        return false;\n      }\n      if (!this.opts.hourRange.length) {\n        return [];\n      }\n      const range = [];\n      this.opts.hourRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"hour-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`);\n          }\n          let start = value[0];\n          let end = value[1] || value[0];\n          if (this.is12hRange(start)) {\n            start = this.translate12hRange(start);\n          }\n          if (this.is12hRange(end)) {\n            end = this.translate12hRange(end);\n          }\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) {\n              continue;\n            }\n            if (!range.includes(i)) {\n              range.push(i);\n            }\n          }\n        } else {\n          if (this.is12hRange(value)) {\n            value = this.translate12hRange(value);\n          } else {\n            value = +value;\n          }\n          if (value < 0 || value > 24) {\n            return;\n          }\n          if (!range.includes(value)) {\n            range.push(value);\n          }\n        }\n      });\n      range.sort((l, r) => {\n        return l - r;\n      });\n      return range;\n    },\n    restrictedHourRange() {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) {\n        return false;\n      }\n      // 12-Hour\n      if (this.baseOn12Hours) {\n        const range = this.hourRangeIn24HrFormat.map(value => {\n          if (value === 12) {\n            return '12p';\n          } else if (value === 24 || value === 0) {\n            return '12a';\n          }\n          return value > 12 ? `${value % 12}p` : `${value}a`;\n        });\n        return range;\n      }\n      // 24-Hour\n      return this.hourRangeIn24HrFormat;\n    },\n    validHoursList() {\n      if (!this.manualInput) {\n        return false;\n      }\n      if (this.restrictedHourRange) {\n        let list = [];\n        if (this.baseOn12Hours) {\n          list = this.restrictedHourRange.map(hr => {\n            const l = hr.substr(0, hr.length - 1);\n            const r = hr.substr(-1);\n            return `${this.formatValue(this.hourType, l)}${r}`;\n          });\n          const am12Index = list.indexOf('12a');\n          if (am12Index > 0) {\n            // Make '12a' the first item in h/hh\n            list.unshift(list.splice(am12Index, 1)[0]);\n          }\n          return list;\n        }\n        list = this.restrictedHourRange.map(hr => {\n          return this.formatValue(this.hourType, hr);\n        });\n        if (list.length > 1 && list[0] && list[0] === '24') {\n          // Make '24' the last item in k/kk\n          list.push(list.shift());\n        }\n        return list;\n      }\n      if (this.baseOn12Hours) {\n        return [].concat([], this.hours.map(hr => `${hr}a`), this.hours.map(hr => `${hr}p`));\n      }\n      return this.hours;\n    },\n    has() {\n      const result = {\n        customApmText: false\n      };\n      const apmEnabled = !!this.apmType;\n      if (apmEnabled && this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        const range = [].concat([], this.hourRangeIn24HrFormat);\n        result.am = range.some(value => value < 12 || value === 24);\n        result.pm = range.some(value => value >= 12 && value < 24);\n      } else {\n        result.am = apmEnabled;\n        result.pm = apmEnabled;\n      }\n      if (this.amText && this.amText.length || this.pmText && this.pmText.length) {\n        result.customApmText = true;\n      }\n      return result;\n    },\n    minuteRangeList() {\n      if (!this.minuteType || !this.opts.minuteRange) {\n        return false;\n      }\n      if (!this.opts.minuteRange.length) {\n        return [];\n      }\n      return this.renderRangeList(this.opts.minuteRange, 'minute');\n    },\n    secondRangeList() {\n      if (!this.secondType || !this.opts.secondRange) {\n        return false;\n      }\n      if (!this.opts.secondRange.length) {\n        return [];\n      }\n      return this.renderRangeList(this.opts.secondRange, 'second');\n    },\n    hourLabelText() {\n      return this.hourLabel || this.hourType;\n    },\n    minuteLabelText() {\n      return this.minuteLabel || this.minuteType;\n    },\n    secondLabelText() {\n      return this.secondLabel || this.secondType;\n    },\n    apmLabelText() {\n      return this.apmLabel || this.apmType;\n    },\n    inputWidthStyle() {\n      if (!this.inputWidth || !this.inputWidth.length) {\n        return;\n      }\n      return {\n        width: this.inputWidth\n      };\n    },\n    tokenRegexBase() {\n      return this.inUse.tokens.join('|');\n    },\n    tokenChunks() {\n      if (!this.manualInput && !this.useStringValue) {\n        return false;\n      }\n      const formatString = String(this.formatString);\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`;\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr);\n      const tokenChunks = [];\n      for (let tkMatch of tokensMatchAll) {\n        const rawToken = tkMatch[0];\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: rawToken,\n          type: this.getTokenType(rawToken),\n          needsCalibrate: rawToken.length < 2,\n          len: (rawToken || '').length\n        };\n        tokenChunks.push(tokenMatchItem);\n      }\n      return tokenChunks;\n    },\n    needsPosCalibrate() {\n      if (!this.manualInput) {\n        return false;\n      }\n      return this.tokenChunks.some(chk => chk.needsCalibrate);\n    },\n    tokenChunksPos() {\n      if (!this.manualInput) {\n        return false;\n      }\n      if (!this.needsPosCalibrate) {\n        return this.tokenChunks.map(chk => {\n          return {\n            token: chk.token,\n            type: chk.type,\n            start: chk.index,\n            end: chk.index + chk.len\n          };\n        });\n      }\n      const list = [];\n      let calibrateLen = 0;\n      this.tokenChunks.forEach(chk => {\n        let chunkCurrentLen;\n        // Adjust for customized AM/PM text\n        if (chk.type === 'apm' && this.has.customApmText) {\n          if (this.apm && this.apm.length) {\n            const customApmText = this.apm.toLowerCase() === 'am' ? this.amText : this.pmText;\n            chunkCurrentLen = customApmText && customApmText.length ? customApmText.length : chk.len;\n          } else {\n            chunkCurrentLen = chk.len;\n          }\n          // Others\n        } else {\n          chunkCurrentLen = this[chk.type] && this[chk.type].length ? this[chk.type].length : chk.len;\n        }\n        list.push({\n          token: chk.token,\n          type: chk.type,\n          start: chk.index + calibrateLen,\n          end: chk.index + calibrateLen + chunkCurrentLen\n        });\n        if (chk.needsCalibrate && chunkCurrentLen > chk.len) {\n          calibrateLen += chunkCurrentLen - chk.len;\n        }\n      });\n      return list;\n    },\n    invalidValues() {\n      if (this.inputIsEmpty) {\n        return [];\n      }\n      if (!this.restrictedHourRange && !this.minuteRangeList && !this.secondRangeList && this.opts.minuteInterval === 1 && this.opts.secondInterval === 1) {\n        return [];\n      }\n      const result = [];\n      if (this.inUse.hour && !this.isEmptyValue(this.hourType, this.hour) && (!this.isValidValue(this.hourType, this.hour) || this.isDisabled('hour', this.hour))) {\n        result.push('hour');\n      }\n      if (this.inUse.minute && !this.isEmptyValue(this.minuteType, this.minute) && (!this.isValidValue(this.minuteType, this.minute) || this.isDisabled('minute', this.minute) || this.notInInterval('minute', this.minute))) {\n        result.push('minute');\n      }\n      if (this.inUse.second && !this.isEmptyValue(this.secondType, this.second) && (!this.isValidValue(this.secondType, this.second) || this.isDisabled('second', this.second) || this.notInInterval('second', this.second))) {\n        result.push('second');\n      }\n      if (this.inUse.apm && !this.isEmptyValue(this.apmType, this.apm) && (!this.isValidValue(this.apmType, this.apm) || this.isDisabled('apm', this.apm))) {\n        result.push('apm');\n      }\n      if (result.length) {\n        return result;\n      }\n      return [];\n    },\n    hasInvalidInput() {\n      return Boolean(this.invalidValues && this.invalidValues.length);\n    },\n    autoDirectionEnabled() {\n      return this.dropDirection === 'auto';\n    },\n    dropdownDirClass() {\n      if (this.autoDirectionEnabled) {\n        return this.forceDropOnTop ? 'drop-up' : 'drop-down';\n      }\n      return this.dropDirection === 'up' ? 'drop-up' : 'drop-down';\n    }\n  },\n  watch: {\n    'opts.format'(newValue) {\n      this.renderFormat(newValue);\n    },\n    'opts.minuteInterval'(newInteval) {\n      this.renderList('minute', newInteval);\n    },\n    'opts.secondInterval'(newInteval) {\n      this.renderList('second', newInteval);\n    },\n    value: {\n      deep: true,\n      handler() {\n        this.readValues();\n      }\n    },\n    displayTime() {\n      this.fillValues();\n    },\n    disabled(toDisabled) {\n      if (toDisabled) {\n        // Force close dropdown and reset status when disabled\n        if (this.isActive) {\n          this.isActive = false;\n        }\n        if (this.showDropdown) {\n          this.showDropdown = false;\n        }\n      }\n    },\n    'invalidValues.length'(newLength, oldLength) {\n      if (newLength && newLength >= 1) {\n        this.$emit('error', this.invalidValues);\n      } else if (oldLength && oldLength >= 1) {\n        this.$emit('error', []);\n      }\n    }\n  },\n  methods: {\n    formatValue(token, i) {\n      if (!this.isNumber(i)) {\n        return '';\n      }\n      i = +i;\n      switch (token) {\n        case 'H':\n        case 'h':\n        case 'k':\n        case 'm':\n        case 's':\n          if (['h', 'k'].includes(token) && i === 0) {\n            return token === 'k' ? '24' : '12';\n          }\n          return String(i);\n        case 'HH':\n        case 'mm':\n        case 'ss':\n        case 'hh':\n        case 'kk':\n          if (['hh', 'kk'].includes(token) && i === 0) {\n            return token === 'kk' ? '24' : '12';\n          }\n          return i < 10 ? `0${i}` : String(i);\n        default:\n          return '';\n      }\n    },\n    checkAcceptingType(validValues, formatString) {\n      if (!validValues || !formatString || !formatString.length) {\n        return '';\n      }\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i];\n        }\n      }\n      return '';\n    },\n    renderFormat(newFormat) {\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format;\n      let hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat);\n      let minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat);\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat);\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat);\n\n      // Failsafe checking\n      if (!hourType && !minuteType && !this.secondType && !this.apmType) {\n        if (this.debugMode && this.format) {\n          this.debugLog(`No valid tokens found in your defined \"format\" string \"${this.format}\". Fallback to the default \"HH:mm\" format.`);\n        }\n        hourType = 'HH';\n        minuteType = 'mm';\n      }\n      this.hourType = hourType;\n      this.minuteType = minuteType;\n      this.hourType ? this.renderHoursList() : this.hours = [];\n      this.minuteType ? this.renderList('minute') : this.minutes = [];\n      this.secondType ? this.renderList('second') : this.seconds = [];\n      this.apmType ? this.renderApmList() : this.apms = [];\n      nextTick(() => {\n        this.readValues();\n      });\n    },\n    renderHoursList() {\n      const hoursCount = this.baseOn12Hours ? 12 : 24;\n      const hours = [];\n      for (let i = 0; i < hoursCount; i++) {\n        if (this.hourType === 'k' || this.hourType === 'kk') {\n          hours.push(this.formatValue(this.hourType, i + 1));\n        } else {\n          hours.push(this.formatValue(this.hourType, i));\n        }\n      }\n      this.hours = hours;\n    },\n    renderList(listType, interval) {\n      if (!this.isMinuteOrSecond(listType)) {\n        return;\n      }\n      const isMinute = listType === 'minute';\n      interval = interval || (isMinute ? this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval : this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval);\n      const result = [];\n      for (let i = 0; i < 60; i += interval) {\n        result.push(this.formatValue(isMinute ? this.minuteType : this.secondType, i));\n      }\n      isMinute ? this.minutes = result : this.seconds = result;\n    },\n    renderApmList() {\n      this.apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm'];\n    },\n    readValues() {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(`Received a string value: \"${this.modelValue}\"`);\n        }\n        this.readStringValues(this.modelValue);\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`Received an object value: \"${JSON.stringify(this.modelValue || {})}\"`);\n        }\n        this.readObjectValues(this.modelValue);\n      }\n    },\n    readObjectValues(objValue) {\n      const timeValue = JSON.parse(JSON.stringify(objValue || {}));\n      const values = Object.keys(timeValue);\n\n      // Failsafe for empty `v-model` object\n      if (values.length === 0) {\n        this.addFallbackValues();\n        return;\n      }\n      CONFIG.BASIC_TYPES.forEach(type => {\n        const token = this.getTokenByType(type);\n        if (values.indexOf(token) > -1) {\n          const sanitizedValue = this.sanitizedValue(token, timeValue[token]);\n          this[type] = sanitizedValue;\n          timeValue[token] = sanitizedValue;\n        } else {\n          this[type] = '';\n        }\n      });\n      this.timeValue = timeValue;\n    },\n    getMatchAllByRegex(testString, regexString) {\n      const str = 'polyfillTest';\n      const needsPolyfill = Boolean(!str.matchAll || typeof str.matchAll !== 'function');\n      return needsPolyfill ? this.polyfillMatchAll(testString, regexString) : testString.matchAll(new RegExp(regexString, 'g'));\n    },\n    readStringValues(stringValue) {\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues();\n        return;\n      }\n      const formatString = String(this.formatString);\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`;\n      const othersRegxStr = `[^(${this.tokenRegexBase})]+`;\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr);\n      const othersMatchAll = this.getMatchAllByRegex(formatString, othersRegxStr);\n      const chunks = [];\n      const tokenChunks = [];\n      for (let tkMatch of tokensMatchAll) {\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: tkMatch[0],\n          isValueToken: true\n        };\n        chunks.push(tokenMatchItem);\n        tokenChunks.push(tokenMatchItem);\n      }\n      for (let otMatch of othersMatchAll) {\n        chunks.push({\n          index: otMatch.index,\n          token: otMatch[0]\n        });\n      }\n      chunks.sort((l, r) => l.index < r.index ? -1 : 1);\n      let regexCombo = '';\n      chunks.forEach(chunk => {\n        if (chunk.isValueToken) {\n          const tokenRegex = this.getTokenRegex(chunk.token) || '';\n          regexCombo += tokenRegex;\n        } else {\n          const safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1');\n          regexCombo += `(?:${safeChars})`;\n        }\n      });\n      const comboReg = new RegExp(regexCombo);\n\n      // Do test before match\n      if (comboReg.test(stringValue)) {\n        const matchResults = stringValue.match(new RegExp(regexCombo));\n        const valueResults = matchResults.slice(1, tokenChunks.length + 1);\n        const timeValue = {};\n        valueResults.forEach((value, vrIndex) => {\n          if (tokenChunks[vrIndex]) {\n            const targetToken = tokenChunks[vrIndex].token;\n            timeValue[targetToken] = this.setValueFromString(value, targetToken);\n          }\n        });\n        this.timeValue = timeValue;\n        if (this.debugMode) {\n          const tokenChunksForLog = tokenChunks.map(tChunk => tChunk && tChunk.token);\n          this.debugLog(`Successfully parsed values ${JSON.stringify(valueResults)}\\nfor ${JSON.stringify(tokenChunksForLog)}\\nin format pattern '${this.formatString}'`);\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`The input string in \"v-model\" does NOT match the \"format\" pattern\\nformat: ${this.formatString}\\nv-model: ${stringValue}`);\n        }\n      }\n    },\n    polyfillMatchAll(targetString, regxStr) {\n      const matchesList = targetString.match(new RegExp(regxStr, 'g'));\n      const result = [];\n      const indicesReg = [];\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(matchedItem => {\n          const existIndex = indicesReg.findIndex(idxItem => idxItem.str === matchedItem);\n          let index;\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index;\n            }\n          } else {\n            const itemIndicesRegex = new RegExp(matchedItem, 'g');\n            index = itemIndicesRegex.exec(targetString).index;\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            });\n          }\n          result.push({\n            0: String(matchedItem),\n            index: index\n          });\n        });\n      }\n      return result;\n    },\n    addFallbackValues() {\n      const timeValue = {};\n      this.inUse.types.forEach(type => {\n        timeValue[this.getTokenByType(type)] = '';\n      });\n      this.timeValue = timeValue;\n    },\n    setValueFromString(parsedValue, token) {\n      if (!token || !parsedValue) {\n        return '';\n      }\n      const tokenType = this.getTokenType(token);\n      if (!tokenType || !tokenType.length) {\n        return '';\n      }\n      const stdValue = parsedValue !== this.getTokenByType(tokenType) ? parsedValue : '';\n      this[tokenType] = stdValue;\n      return stdValue;\n    },\n    fillValues(forceEmit) {\n      const fullValues = {};\n      const baseHour = this.hour;\n      const baseHourType = this.hourType;\n      let apmValue;\n\n      // Hour type or hour value is NOT set in the \"format\" string\n      if (!baseHourType || !this.isNumber(baseHour)) {\n        CONFIG.HOUR_TOKENS.forEach(token => fullValues[token] = '');\n        apmValue = this.lowerCasedApm(this.apm || '');\n        fullValues.a = apmValue;\n        fullValues.A = apmValue.toUpperCase();\n\n        // Both Hour type and value are set\n      } else {\n        const hourValue = +baseHour;\n        const apmValue = this.baseOn12Hours && this.apm ? this.lowerCasedApm(this.apm) : false;\n        CONFIG.HOUR_TOKENS.forEach(token => {\n          if (token === baseHourType) {\n            fullValues[token] = baseHour;\n            return;\n          }\n          let value;\n          let apm;\n          switch (token) {\n            case 'H':\n            case 'HH':\n            case 'k':\n            case 'kk':\n              if (this.baseOn12Hours) {\n                if (apmValue === 'pm') {\n                  value = hourValue < 12 ? hourValue + 12 : hourValue;\n                } else if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 12 ? 24 : hourValue;\n                } else {\n                  value = hourValue % 12;\n                }\n              } else {\n                if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 0 ? 24 : hourValue;\n                } else {\n                  value = hourValue % 24;\n                }\n              }\n              fullValues[token] = this.formatValue(token, value);\n              break;\n            case 'h':\n            case 'hh':\n              // h <-> hh\n              if (this.baseOn12Hours) {\n                value = hourValue;\n                apm = apmValue || '';\n                // Read from other hour formats\n              } else {\n                if (hourValue > 11 && hourValue < 24) {\n                  apm = 'pm';\n                  value = hourValue === 12 ? 12 : hourValue % 12;\n                } else {\n                  apm = 'am';\n                  value = hourValue % 12 === 0 ? 12 : hourValue;\n                }\n              }\n              fullValues[token] = this.formatValue(token, value);\n              fullValues.a = apm;\n              fullValues.A = apm.toUpperCase();\n              break;\n          }\n        });\n      }\n      fullValues.m = this.formatValue('m', this.minute);\n      fullValues.mm = this.formatValue('mm', this.minute);\n      fullValues.s = this.formatValue('s', this.second);\n      fullValues.ss = this.formatValue('ss', this.second);\n      this.fullValues = fullValues;\n\n      // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue();\n      }\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleActive();\n      }\n    },\n    emitTimeValue() {\n      if (!this.fullValues) {\n        return;\n      }\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.');\n        }\n        return;\n      }\n      const fullValues = JSON.parse(JSON.stringify(this.fullValues));\n      if (this.useStringValue) {\n        this.$emit('update:modelValue', this.inputIsEmpty ? '' : String(this.displayTime));\n      } else {\n        const tokensInUse = this.inUse.tokens || [];\n        const timeValue = {};\n        tokensInUse.forEach(token => {\n          timeValue[token] = fullValues[token] || '';\n        });\n        this.$emit('update:modelValue', JSON.parse(JSON.stringify(timeValue)));\n      }\n      this.$emit('change', {\n        data: fullValues,\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      });\n    },\n    translate12hRange(value) {\n      const valueT = this.match12hRange(value);\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12);\n      }\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0);\n    },\n    isDisabled(type, value) {\n      if (!this.isBasicType(type) || !this.inUse[type]) {\n        return true;\n      }\n      switch (type) {\n        case 'hour':\n          return this.isDisabledHour(value);\n        case 'minute':\n        case 'second':\n          if (!this[`${type}RangeList`]) {\n            return false;\n          }\n          return !this[`${type}RangeList`].includes(value);\n        case 'apm':\n          if (!this.restrictedHourRange) {\n            return false;\n          }\n          return !this.has[this.lowerCasedApm(value)];\n        default:\n          return true;\n      }\n    },\n    isDisabledHour(value) {\n      if (!this.restrictedHourRange) {\n        return false;\n      }\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false;\n        } else {\n          const token = this.apm.toLowerCase() === 'am' ? 'a' : 'p';\n          return !this.restrictedHourRange.includes(`${+value}${token}`);\n        }\n      }\n      // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n      if ((this.hourType === 'HH' || this.hourType === 'H') && +value === 0 && this.restrictedHourRange.includes(24)) {\n        return false;\n      }\n      return !this.restrictedHourRange.includes(+value);\n    },\n    notInInterval(section, value) {\n      if (!section || !this.isMinuteOrSecond(section)) {\n        return;\n      }\n      if (this.opts[`${section}Interval`] === 1) {\n        return false;\n      }\n      return +value % this.opts[`${section}Interval`] !== 0;\n    },\n    renderRangeList(rawRange, section) {\n      if (!rawRange || !section || !this.isMinuteOrSecond(section)) {\n        return [];\n      }\n      const range = [];\n      let formatedValue;\n      rawRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"${section}-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`);\n          }\n          const start = value[0];\n          const end = value[1] || value[0];\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) {\n              continue;\n            }\n            formatedValue = this.formatValue(this.getTokenByType(section), i);\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue);\n            }\n          }\n        } else {\n          if (+value < 0 || +value > 59) {\n            return;\n          }\n          formatedValue = this.formatValue(this.getTokenByType(section), value);\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue);\n          }\n        }\n      });\n      range.sort((l, r) => {\n        return l - r;\n      });\n      // Debug Mode\n      if (this.debugMode) {\n        const fullList = (section === 'minute' ? this.minutes : this.seconds) || [];\n        const validItems = fullList.filter(item => range.includes(item));\n        if (!validItems || !validItems.length) {\n          if (section === 'minute') {\n            this.debugLog(`The minute list is empty due to the \"minute-range\" config\\nminute-range: ${JSON.stringify(this.minuteRange)}\\nminute-interval: ${this.opts.minuteInterval}`);\n          } else {\n            this.debugLog(`The second list is empty due to the \"second-range\" config\\nsecond-range: ${JSON.stringify(this.secondRange)}\\nsecond-interval: ${this.opts.secondInterval}`);\n          }\n        }\n      }\n      return range;\n    },\n    forceApmSelection() {\n      if (this.manualInput) {\n        // Skip this to allow users to paste a string value from the clipboard in Manual Input mode\n        return;\n      }\n      if (this.apmType && !this.apm) {\n        if (this.has.am || this.has.pm) {\n          this.doClearApmChecking = true;\n          const apmValue = this.has.am ? 'am' : 'pm';\n          this.apm = this.apmType === 'A' ? apmValue.toUpperCase() : apmValue;\n        }\n      }\n    },\n    emptyApmSelection() {\n      if (this.doClearApmChecking && this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = '';\n      }\n      this.doClearApmChecking = false;\n    },\n    apmDisplayText(apmValue) {\n      if (this.amText && this.lowerCasedApm(apmValue) === 'am') {\n        return this.amText;\n      }\n      if (this.pmText && this.lowerCasedApm(apmValue) === 'pm') {\n        return this.pmText;\n      }\n      return apmValue;\n    },\n    toggleActive() {\n      if (this.disabled) {\n        return;\n      }\n      this.isActive = !this.isActive;\n      if (this.isActive) {\n        this.isFocusing = true;\n        if (this.manualInput) {\n          this.$emit('focus');\n        }\n        if (!this.opts.hideDropdown) {\n          this.setDropdownState(true);\n        }\n        // Record to check if value did change in the later phase\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '');\n        }\n        if (this.manualInput && !this.inputIsEmpty) {\n          nextTick(() => {\n            if (this.$refs.input && this.$refs.input.selectionStart === 0 && this.$refs.input.selectionEnd === this.displayTime.length) {\n              // Select the first slot instead of the whole value string when tabbed in\n              this.selectFirstSlot();\n            }\n          });\n        }\n      } else {\n        if (this.showDropdown) {\n          this.setDropdownState(false);\n        } else if (this.manualInput) {\n          this.$emit('blur');\n        }\n        this.isFocusing = false;\n        if (this.lazy) {\n          this.fillValues(true);\n          this.bakDisplayTime = undefined;\n        }\n      }\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        this.showDropdown ? this.forceApmSelection() : this.emptyApmSelection();\n      }\n      if (this.showDropdown) {\n        this.checkForAutoScroll();\n      }\n    },\n    setDropdownState(toShow, fromUserClick = false) {\n      if (toShow) {\n        this.keepFocusing();\n        if (this.autoDirectionEnabled) {\n          this.checkDropDirection();\n        }\n        this.showDropdown = true;\n        this.$emit('open');\n        if (fromUserClick) {\n          if (this.fixedDropdownButton) {\n            this.isActive = true;\n          }\n          this.$emit('blur');\n          this.checkForAutoScroll();\n        }\n      } else {\n        this.showDropdown = false;\n        this.$emit('close');\n      }\n    },\n    blurEvent() {\n      if (this.manualInput && !this.opts.hideDropdown) {\n        // hideDropdown's `blur` event is handled somewhere else\n        this.$emit('blur');\n      }\n    },\n    select(type, value) {\n      if (this.isBasicType(type) && !this.isDisabled(type, value)) {\n        this[type] = value;\n        if (this.doClearApmChecking) {\n          this.doClearApmChecking = false;\n        }\n      }\n    },\n    clearTime() {\n      if (this.disabled) {\n        return;\n      }\n      this.hour = '';\n      this.minute = '';\n      this.second = '';\n      this.apm = '';\n      if (this.manualInput && this.$refs && this.$refs.input && this.$refs.input.value.length) {\n        this.$refs.input.value = '';\n      }\n      if (this.lazy) {\n        this.fillValues(true);\n      }\n    },\n    //\n    // Auto-Scroll\n    //\n\n    checkForAutoScroll() {\n      if (this.inputIsEmpty) {\n        return;\n      }\n      if (this.autoScroll) {\n        nextTick(() => {\n          this.scrollToSelectedValues();\n        });\n      } else if (this.advancedKeyboard) {\n        // Auto-focus on selected value in the first column for advanced-keyboard\n        nextTick(() => {\n          const firstColumn = this.inUse.types[0];\n          this.scrollToSelected(firstColumn, true);\n        });\n      }\n    },\n    scrollToSelected(column, allowFallback = false) {\n      if (!this.timeValue || this.inputIsEmpty) {\n        return;\n      }\n      const targetList = this.$el.querySelectorAll(`ul.${column}s`)[0];\n      let targetValue = this.activeItemInCol(column)[0];\n      if (!targetValue && allowFallback) {\n        // No value selected in the target column, fallback to the first found valid item\n        targetValue = this.validItemsInCol(column)[0];\n      }\n      if (targetList && targetValue) {\n        targetList.scrollTop = targetValue.offsetTop || 0;\n        if (this.advancedKeyboard) {\n          targetValue.focus();\n        }\n      }\n    },\n    scrollToSelectedValues() {\n      if (!this.timeValue || this.inputIsEmpty) {\n        return;\n      }\n      this.inUse.types.forEach(section => {\n        this.scrollToSelected(section);\n      });\n    },\n    //\n    // Additional Keyboard Navigation\n    //\n\n    onFocus() {\n      if (this.disabled) {\n        return;\n      }\n      if (!this.isFocusing) {\n        this.isFocusing = true;\n      }\n      if (!this.isActive) {\n        this.toggleActive();\n      }\n    },\n    escBlur() {\n      if (this.disabled) {\n        return;\n      }\n      window.clearTimeout(this.debounceTimer);\n      this.isFocusing = false;\n      const inputBox = this.$el.querySelectorAll('input.vue__time-picker-input')[0];\n      if (inputBox) {\n        inputBox.blur();\n      }\n    },\n    debounceBlur() {\n      if (this.disabled) {\n        return;\n      }\n      this.isFocusing = false;\n      window.clearTimeout(this.debounceTimer);\n      this.debounceTimer = window.setTimeout(() => {\n        window.clearTimeout(this.debounceTimer);\n        this.onBlur();\n      }, this.opts.blurDelay);\n    },\n    onBlur() {\n      if (!this.disabled && !this.isFocusing && this.isActive) {\n        this.toggleActive();\n      }\n    },\n    keepFocusing() {\n      if (this.disabled) {\n        return;\n      }\n      window.clearTimeout(this.debounceTimer);\n      if (!this.isFocusing) {\n        this.isFocusing = true;\n      }\n    },\n    validItemsInCol(column) {\n      const columnClass = `${column}s`;\n      return this.$el.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`);\n    },\n    activeItemInCol(column) {\n      const columnClass = `${column}s`;\n      return this.$el.querySelectorAll(`ul.${columnClass} > li.active:not(.hint)`);\n    },\n    getClosestSibling(column, dataKey, getPrevious = false) {\n      const siblingsInCol = this.validItemsInCol(column);\n      const selfIndex = Array.prototype.findIndex.call(siblingsInCol, sbl => {\n        return sbl.getAttribute('data-key') === dataKey;\n      });\n\n      // Already the first item\n      if (getPrevious && selfIndex === 0) {\n        return siblingsInCol[siblingsInCol.length - 1];\n      }\n      // Already the last item\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        return siblingsInCol[0];\n      }\n      // Selected value not in the valid values list\n      if (selfIndex < 0) {\n        return siblingsInCol[0];\n      }\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1];\n      }\n      return siblingsInCol[selfIndex + 1];\n    },\n    prevItem(column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, true);\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus();\n      }\n    },\n    nextItem(column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, false);\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus();\n      }\n    },\n    getSideColumnName(currentColumn, toLeft = false) {\n      const currentColumnIndex = this.inUse.types.indexOf(currentColumn);\n      if (toLeft && currentColumnIndex <= 0) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already');\n        }\n        return;\n      } else if (!toLeft && currentColumnIndex === this.inUse.types.length - 1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already');\n        }\n        return;\n      }\n      return this.inUse.types[toLeft ? currentColumnIndex - 1 : currentColumnIndex + 1];\n    },\n    getFirstItemInSideColumn(currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft);\n      if (!targetColumn) {\n        return;\n      }\n      const listItems = this.validItemsInCol(targetColumn);\n      if (listItems && listItems[0]) {\n        return listItems[0];\n      }\n    },\n    getActiveItemInSideColumn(currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft);\n      if (!targetColumn) {\n        return;\n      }\n      const activeItems = this.activeItemInCol(targetColumn);\n      if (activeItems && activeItems[0]) {\n        return activeItems[0];\n      }\n    },\n    toLeftColumn(currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, true) || this.getFirstItemInSideColumn(currentColumn, true);\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n    toRightColumn(currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, false) || this.getFirstItemInSideColumn(currentColumn, false);\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n    //\n    // Manual Input\n    //\n\n    onMouseDown() {\n      if (!this.manualInput) {\n        return;\n      }\n      window.clearTimeout(this.selectionTimer);\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer);\n        if (this.$refs && this.$refs.input) {\n          const nearestSlot = this.getNearestChunkByPos(this.$refs.input.selectionStart || 0);\n          this.debounceSetInputSelection(nearestSlot);\n        }\n      }, 50);\n    },\n    keyDownHandler(evt) {\n      if (evt.isComposing || evt.keyCode === 229) {\n        // Skip IME inputs\n        evt.preventDefault();\n        evt.stopPropagation();\n        return false;\n      }\n      // Numbers\n      if (evt.keyCode >= 48 && evt.keyCode <= 57 || evt.keyCode >= 96 && evt.keyCode <= 105) {\n        evt.preventDefault();\n        this.keyboardInput(evt.key);\n        // A|P|M\n      } else if ([65, 80, 77].includes(evt.keyCode)) {\n        evt.preventDefault();\n        this.keyboardInput(evt.key, true);\n        // Arrow keys\n      } else if (evt.keyCode >= 37 && evt.keyCode <= 40) {\n        evt.preventDefault();\n        this.clearKbInputLog();\n        this.arrowHandler(evt);\n        // Delete|Backspace\n      } else if (evt.keyCode === 8 || evt.keyCode === 46) {\n        evt.preventDefault();\n        this.clearKbInputLog();\n        this.clearTime();\n        // Tab\n      } else if (evt.keyCode === 9) {\n        this.clearKbInputLog();\n        this.tabHandler(evt);\n        // Prevent any Non-ESC and non-pasting inputs\n      } else if (evt.keyCode !== 27 && !(evt.metaKey || evt.ctrlKey)) {\n        evt.preventDefault();\n      }\n    },\n    onCompostionStart(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.bakCurrentPos = this.getCurrentTokenChunk();\n      return false;\n    },\n    onCompostionEnd(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      const cpsData = evt.data;\n      let inputIsCustomApmText = false;\n      if (this.has.customApmText) {\n        inputIsCustomApmText = this.isCustomApmText(cpsData);\n      }\n      if (inputIsCustomApmText) {\n        this.setSanitizedValueToSection('apm', inputIsCustomApmText);\n      }\n      this.$refs.input.value = this.has.customApmText ? this.customDisplayTime : this.displayTime;\n      nextTick(() => {\n        if (this.bakCurrentPos) {\n          const bakPos = JSON.parse(JSON.stringify(this.bakCurrentPos));\n          if (inputIsCustomApmText) {\n            bakPos.end = bakPos.start + cpsData.length;\n          }\n          this.debounceSetInputSelection(bakPos);\n          this.bakCurrentPos = null;\n        }\n      });\n      return false;\n    },\n    pasteHandler(evt) {\n      evt.preventDefault();\n      let pastingText = (evt.clipboardData || window.clipboardData).getData('text');\n      if (this.debugMode) {\n        this.debugLog(`Pasting value \"${pastingText}\" from clipboard`);\n      }\n      if (!pastingText || !pastingText.length) {\n        return;\n      }\n\n      // Replace custom AM/PM text (if any)\n      if (this.has.customApmText) {\n        pastingText = this.replaceCustomApmText(pastingText);\n      }\n      if (this.inputIsEmpty) {\n        this.readStringValues(pastingText);\n      } else {\n        this.kbInputLog = pastingText.substr(-2, 2);\n        this.setKbInput();\n        this.debounceClearKbLog();\n      }\n    },\n    arrowHandler(evt) {\n      const direction = {\n        37: 'L',\n        38: 'U',\n        39: 'R',\n        40: 'D'\n      }[evt.keyCode];\n      if (direction === 'U' || direction === 'D') {\n        if (this.inputIsEmpty) {\n          this.selectFirstValidValue();\n        } else {\n          const currentChunk = this.getCurrentTokenChunk();\n          if (!currentChunk) {\n            this.selectFirstValidValue();\n            return;\n          }\n          const tokenType = currentChunk.type;\n          this.getClosestValidItemInCol(tokenType, this[tokenType], direction);\n          const newChunkPos = this.getCurrentTokenChunk();\n          this.debounceSetInputSelection(newChunkPos);\n        }\n      } else if (direction === 'R') {\n        this.toLateralToken(false);\n      } else if (direction === 'L') {\n        this.toLateralToken(true);\n      }\n    },\n    tabHandler(evt) {\n      if (!this.inputIsEmpty && this.tokenChunksPos && this.tokenChunksPos.length) {\n        const currentChunk = this.getCurrentTokenChunk();\n        if (!currentChunk) {\n          return;\n        }\n        const firstChunk = this.tokenChunksPos[0];\n        const lastChunk = this.tokenChunksPos[this.tokenChunksPos.length - 1];\n        if (evt.shiftKey && currentChunk.token !== firstChunk.token || !evt.shiftKey && currentChunk.token !== lastChunk.token) {\n          evt.preventDefault();\n          this.toLateralToken(evt.shiftKey);\n        }\n      }\n    },\n    keyboardInput(newChar, isApm = false) {\n      const currentChunk = this.getCurrentTokenChunk();\n      if (!currentChunk || currentChunk.type !== 'apm' && isApm || currentChunk.type === 'apm' && !isApm) {\n        return;\n      }\n      this.kbInputLog = `${this.kbInputLog.substr(-1)}${newChar}`;\n      this.setKbInput();\n      this.debounceClearKbLog();\n    },\n    clearKbInputLog() {\n      window.clearTimeout(this.kbInputTimer);\n      this.kbInputLog = '';\n    },\n    debounceClearKbLog() {\n      window.clearTimeout(this.kbInputTimer);\n      this.kbInputTimer = window.setTimeout(() => {\n        this.clearKbInputLog();\n      }, this.opts.manualInputTimeout);\n    },\n    setKbInput(value) {\n      value = value || this.kbInputLog;\n      const currentChunk = this.getCurrentTokenChunk();\n      if (!currentChunk || !value || !value.length) {\n        return;\n      }\n      const chunkType = currentChunk.type;\n      const chunkToken = currentChunk.token;\n      let validValue;\n      if (chunkType === 'apm') {\n        if (this.lowerCasedApm(value).includes('a')) {\n          validValue = 'am';\n        } else if (this.lowerCasedApm(value).includes('p')) {\n          validValue = 'pm';\n        }\n        if (validValue) {\n          validValue = chunkToken === 'A' ? validValue.toUpperCase() : validValue;\n        }\n      } else {\n        if (this.isValidValue(chunkToken, value)) {\n          validValue = value;\n        } else {\n          const lastInputValue = this.formatValue(chunkToken, value.substr(-1));\n          if (this.isValidValue(chunkToken, lastInputValue)) {\n            validValue = lastInputValue;\n          }\n        }\n      }\n      if (validValue) {\n        this.setSanitizedValueToSection(chunkType, validValue);\n        const newChunkPos = this.getCurrentTokenChunk();\n        this.debounceSetInputSelection(newChunkPos);\n      }\n      if (this.debugMode) {\n        if (validValue) {\n          this.debugLog(`Successfully set value \"${validValue}\" from latest input \"${value}\" for the \"${chunkType}\" slot`);\n        } else {\n          this.debugLog(`Value \"${value}\" is invalid in the \"${chunkType}\" slot`);\n        }\n      }\n    },\n    // Form Autofill\n    onChange() {\n      if (!this.manualInput || !this.$refs || !this.$refs.input) {\n        return;\n      }\n      const autoFillValue = this.$refs.input.value || '';\n      if (autoFillValue && autoFillValue.length) {\n        this.readStringValues(autoFillValue);\n      }\n    },\n    getNearestChunkByPos(startPos) {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) {\n        return;\n      }\n      let nearest;\n      let nearestDelta = -1;\n      for (let i = 0; i < this.tokenChunksPos.length; i++) {\n        const chunk = JSON.parse(JSON.stringify(this.tokenChunksPos[i]));\n        if (chunk.start === startPos) {\n          return chunk;\n        }\n        const delta = Math.abs(chunk.start - startPos);\n        if (nearestDelta < 0) {\n          nearest = chunk;\n          nearestDelta = delta;\n        } else {\n          if (nearestDelta <= delta) {\n            return nearest;\n          }\n          nearestDelta = delta;\n          nearest = chunk;\n        }\n      }\n      return nearest;\n    },\n    selectFirstValidValue() {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) {\n        return;\n      }\n      const firstSlotType = this.tokenChunksPos[0].type;\n      if (firstSlotType === 'hour') {\n        this.getClosestHourItem();\n      } else {\n        this.getClosestValidItemInCol(firstSlotType, this[firstSlotType]);\n      }\n      this.selectFirstSlot();\n    },\n    getClosestHourItem(currentValue, direction = 'U') {\n      if (!this.validHoursList || !this.validHoursList.length) {\n        if (this.debugMode) {\n          this.debugLog(`No valid hour values found, please check your \"hour-range\" config\\nhour-range: ${JSON.stringify(this.hourRange)}`);\n        }\n        return;\n      }\n      if (!currentValue) {\n        this.setManualHour(this.validHoursList[0]);\n        return;\n      }\n      const currentIndex = this.validHoursList.findIndex(item => {\n        if (!this.baseOn12Hours) {\n          return item === currentValue;\n        } else {\n          const valueKey = `${currentValue}${this.lowerCasedApm(this.apm) === 'pm' ? 'p' : 'a'}`;\n          return item === valueKey;\n        }\n      });\n      let nextIndex;\n      if (currentIndex === -1) {\n        nextIndex = 0;\n      } else if (direction === 'D') {\n        nextIndex = currentIndex === 0 ? this.validHoursList.length - 1 : currentIndex - 1;\n      } else {\n        nextIndex = (currentIndex + 1) % this.validHoursList.length;\n      }\n      const nextItem = this.validHoursList[nextIndex];\n      this.setManualHour(nextItem);\n    },\n    getClosestValidItemInCol(column, currentValue, direction = 'U') {\n      if (column === 'hour') {\n        this.getClosestHourItem(currentValue, direction);\n      } else {\n        const nextItem = direction === 'D' ? this.prevItem(column, this[column], true) : this.nextItem(column, this[column], true);\n        if (nextItem) {\n          this.select(column, nextItem.getAttribute('data-key'));\n        }\n      }\n    },\n    setSanitizedValueToSection(section, inputValue) {\n      if (!section || !this.getTokenByType(section)) {\n        return;\n      }\n      // NOTE: Disabled values are allowed here, followed by an 'error' event, though\n      const sanitizedValue = this.sanitizedValue(this.getTokenByType(section), inputValue);\n      this[section] = sanitizedValue;\n    },\n    setManualHour(nextItem) {\n      if (this.is12hRange(nextItem)) {\n        const hourT = this.match12hRange(nextItem);\n        const apmValue = hourT[2] === 'a' ? 'AM' : 'PM';\n        this.setSanitizedValueToSection('apm', this.apmType === 'a' ? apmValue.toLowerCase() : apmValue);\n        this.setSanitizedValueToSection('hour', hourT[1]);\n      } else {\n        this.setSanitizedValueToSection('hour', nextItem);\n      }\n    },\n    debounceSetInputSelection({\n      start = 0,\n      end = 0\n    }) {\n      nextTick(() => {\n        this.setInputSelectionRange(start, end);\n      });\n      window.clearTimeout(this.selectionTimer);\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer);\n        // Double-check selection for 12hr format\n        if (this.$refs.input && (this.$refs.input.selectionStart !== start || this.$refs.input.selectionEnd !== end)) {\n          this.setInputSelectionRange(start, end);\n        }\n      }, 30);\n    },\n    setInputSelectionRange(start, end) {\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.setSelectionRange(start, end);\n      }\n    },\n    getCurrentTokenChunk() {\n      return this.getNearestChunkByPos(this.$refs.input && this.$refs.input.selectionStart || 0);\n    },\n    selectFirstSlot() {\n      const firstChunkPos = this.getNearestChunkByPos(0);\n      this.debounceSetInputSelection(firstChunkPos);\n    },\n    toLateralToken(toLeft) {\n      const currentChunk = this.getCurrentTokenChunk();\n      if (!currentChunk) {\n        this.selectFirstValidValue();\n        return;\n      }\n      const currentChunkIndex = this.tokenChunksPos.findIndex(chk => chk.token === currentChunk.token);\n      if (!toLeft && currentChunkIndex >= this.tokenChunksPos.length - 1 || toLeft && currentChunkIndex === 0) {\n        if (this.debugMode) {\n          if (toLeft) {\n            this.debugLog('You\\'re in the leftmost slot already');\n          } else {\n            this.debugLog('You\\'re in the rightmost slot already');\n          }\n        }\n        return;\n      }\n      const targetSlotPos = toLeft ? this.tokenChunksPos[currentChunkIndex - 1] : this.tokenChunksPos[currentChunkIndex + 1];\n      this.debounceSetInputSelection(targetSlotPos);\n    },\n    isCustomApmText(inputData) {\n      if (!inputData || !inputData.length) {\n        return false;\n      }\n      if (this.amText && this.amText === inputData) {\n        return this.apmType === 'A' ? 'AM' : 'am';\n      }\n      if (this.pmText && this.pmText === inputData) {\n        return this.apmType === 'A' ? 'PM' : 'pm';\n      }\n      return false;\n    },\n    replaceCustomApmText(inputString) {\n      if (this.amText && this.amText.length && inputString.includes(this.amText)) {\n        return inputString.replace(new RegExp(this.amText, 'g'), this.apmType === 'A' ? 'AM' : 'am');\n      } else if (this.pmText && this.pmText.length && inputString.includes(this.pmText)) {\n        return inputString.replace(new RegExp(this.pmText, 'g'), this.apmType === 'A' ? 'PM' : 'pm');\n      }\n      return inputString;\n    },\n    checkDropDirection() {\n      if (!this.$el) {\n        return;\n      }\n      let container;\n      if (this.containerId && this.containerId.length) {\n        container = document.getElementById(this.containerId);\n        if (!container && this.debugMode) {\n          this.debugLog(`Container with id \"${this.containerId}\" not found. Fallback to document body.`);\n        }\n      }\n      const el = this.$el;\n      let spaceDown;\n      if (container && container.offsetHeight) {\n        // Valid container found\n        spaceDown = container.offsetTop + container.offsetHeight - (el.offsetTop + el.offsetHeight);\n      } else {\n        // Fallback to document body\n        const docHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);\n        spaceDown = docHeight - (el.offsetTop + el.offsetHeight);\n      }\n      this.forceDropOnTop = this.opts.dropOffsetHeight > spaceDown;\n    },\n    //\n    // Helpers\n    //\n\n    is12hRange(value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value);\n    },\n    match12hRange(value) {\n      return value.match(/^(\\d{1,2})(a|p|A|P)$/);\n    },\n    isNumber(value) {\n      return !isNaN(parseFloat(value)) && isFinite(value);\n    },\n    isBasicType(type) {\n      return CONFIG.BASIC_TYPES.includes(type);\n    },\n    lowerCasedApm(apmValue) {\n      return (apmValue || '').toLowerCase();\n    },\n    getTokenRegex(token) {\n      switch (token) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})';\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})';\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})';\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})';\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})';\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})';\n        case 'mm':\n          return '([0-5][0-9]|m{2})';\n        case 'ss':\n          return '([0-5][0-9]|s{2})';\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})';\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})';\n        case 'A':\n          return '(AM|PM|A{1})';\n        case 'a':\n          return '(am|pm|a{1})';\n        default:\n          return '';\n      }\n    },\n    isEmptyValue(targetToken, testValue) {\n      return !testValue || !testValue.length || testValue && testValue === targetToken;\n    },\n    isValidValue(targetToken, testValue) {\n      if (!targetToken || this.isEmptyValue(targetToken, testValue)) {\n        return false;\n      }\n      const tokenRegexStr = this.getTokenRegex(targetToken);\n      if (!tokenRegexStr || !tokenRegexStr.length) {\n        return false;\n      }\n      return new RegExp(`^${tokenRegexStr}$`).test(testValue);\n    },\n    sanitizedValue(targetToken, inputValue) {\n      if (this.isValidValue(targetToken, inputValue)) {\n        return inputValue;\n      }\n      return '';\n    },\n    getTokenType(token) {\n      return this.inUse.types[this.inUse.tokens.indexOf(token)] || '';\n    },\n    getTokenByType(type) {\n      return this[`${type}Type`] || '';\n    },\n    isMinuteOrSecond(type) {\n      return ['minute', 'second'].includes(type);\n    },\n    // Breaking attribution coercion changes in Vue 3\n    // > https://v3.vuejs.org/guide/migration/attribute-coercion.html#overview\n    booleanAttr(isTrue = false) {\n      return isTrue ? true : null;\n    },\n    debugLog(logText) {\n      if (!logText || !logText.length) {\n        return;\n      }\n      let identifier = '';\n      if (this.id) {\n        identifier += `#${this.id}`;\n      }\n      if (this.name) {\n        identifier += `[name=${this.name}]`;\n      }\n      if (this.inputClass) {\n        let inputClasses = [];\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g);\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass);\n        } else if (typeof this.inputClass === 'object') {\n          Object.keys(this.inputClass).forEach(clsName => {\n            if (this.inputClass[clsName]) {\n              inputClasses.push(clsName);\n            }\n          });\n        }\n        for (let inputClass of inputClasses) {\n          if (inputClass && inputClass.trim().length) {\n            identifier += `.${inputClass.trim()}`;\n          }\n        }\n      }\n      const finalLogText = `DEBUG: ${logText}${identifier ? `\\n\\t(${identifier})` : ''}`;\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText);\n      } else {\n        window.console.log(finalLogText);\n      }\n    }\n  },\n  mounted() {\n    window.clearTimeout(this.debounceTimer);\n    window.clearTimeout(this.selectionTimer);\n    window.clearTimeout(this.kbInputTimer);\n    this.renderFormat();\n  },\n  beforeUnmount() {\n    window.clearTimeout(this.debounceTimer);\n    window.clearTimeout(this.selectionTimer);\n    window.clearTimeout(this.kbInputTimer);\n  }\n};\nconst _hoisted_1 = {\n  key: 0,\n  class: \"controls\",\n  tabindex: \"-1\"\n};\nconst _hoisted_2 = /*#__PURE__*/createVNode(\"span\", {\n  class: \"char\"\n}, \"×\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/createVNode(\"span\", {\n  class: \"char\"\n}, \"▾\", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  key: 1,\n  class: \"custom-icon\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createBlock(\"span\", {\n    class: \"vue__time-picker\",\n    style: $options.inputWidthStyle\n  }, [createVNode(\"input\", {\n    type: \"text\",\n    class: [\"vue__time-picker-input\", [$props.inputClass, {\n      'is-empty': $options.inputIsEmpty,\n      'invalid': $options.hasInvalidInput,\n      'all-selected': $options.allValueSelected,\n      'disabled': $props.disabled,\n      'has-custom-icon': _ctx.$slots && _ctx.$slots.icon\n    }]],\n    ref: \"input\",\n    style: $options.inputWidthStyle,\n    id: $props.id,\n    name: $props.name,\n    value: $options.inputIsEmpty ? null : $options.customDisplayTime,\n    placeholder: $props.placeholder ? $props.placeholder : $options.formatString,\n    tabindex: $props.disabled ? -1 : $props.tabindex,\n    disabled: $options.booleanAttr($props.disabled),\n    readonly: $options.booleanAttr(!$props.manualInput),\n    autocomplete: $props.autocomplete,\n    onFocus: _cache[1] || (_cache[1] = (...args) => $options.onFocus(...args)),\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.onChange(...args)),\n    onBlur: _cache[3] || (_cache[3] = $event => {\n      $options.debounceBlur();\n      $options.blurEvent();\n    }),\n    onMousedown: _cache[4] || (_cache[4] = (...args) => $options.onMouseDown(...args)),\n    onKeydown: [_cache[5] || (_cache[5] = (...args) => $options.keyDownHandler(...args)), _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => $options.escBlur(...args), [\"exact\"]), [\"esc\"]))],\n    onCompositionstart: _cache[6] || (_cache[6] = (...args) => $options.onCompostionStart(...args)),\n    onCompositionend: _cache[7] || (_cache[7] = (...args) => $options.onCompostionEnd(...args)),\n    onPaste: _cache[8] || (_cache[8] = (...args) => $options.pasteHandler(...args))\n  }, null, 46 /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */, [\"id\", \"name\", \"value\", \"placeholder\", \"tabindex\", \"disabled\", \"readonly\", \"autocomplete\"]), $options.showClearBtn || $options.showDropdownBtn ? (openBlock(), createBlock(\"div\", _hoisted_1, [!$data.isActive && $options.showClearBtn ? (openBlock(), createBlock(\"span\", {\n    key: 0,\n    class: [\"clear-btn\", {\n      'has-custom-btn': _ctx.$slots && _ctx.$slots.clearButton\n    }],\n    tabindex: \"-1\",\n    onClick: _cache[10] || (_cache[10] = (...args) => $options.clearTime(...args))\n  }, [renderSlot(_ctx.$slots, \"clearButton\", {}, () => [_hoisted_2])], 2 /* CLASS */)) : createCommentVNode(\"v-if\", true), $options.showDropdownBtn ? (openBlock(), createBlock(\"span\", {\n    key: 1,\n    class: [\"dropdown-btn\", {\n      'has-custom-btn': _ctx.$slots && _ctx.$slots.dropdownButton\n    }],\n    tabindex: \"-1\",\n    onClick: _cache[11] || (_cache[11] = $event => $options.setDropdownState($props.fixedDropdownButton ? !$data.showDropdown : true, true)),\n    onMousedown: _cache[12] || (_cache[12] = (...args) => $options.keepFocusing(...args))\n  }, [renderSlot(_ctx.$slots, \"dropdownButton\", {}, () => [_hoisted_3])], 34 /* CLASS, HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true)])) : createCommentVNode(\"v-if\", true), _ctx.$slots && _ctx.$slots.icon ? (openBlock(), createBlock(\"div\", _hoisted_4, [renderSlot(_ctx.$slots, \"icon\")])) : createCommentVNode(\"v-if\", true), $data.showDropdown ? (openBlock(), createBlock(\"div\", {\n    key: 2,\n    class: \"time-picker-overlay\",\n    onClick: _cache[13] || (_cache[13] = (...args) => $options.toggleActive(...args)),\n    tabindex: \"-1\"\n  })) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(\"div\", {\n    class: [\"dropdown\", [$options.dropdownDirClass]],\n    tabindex: \"-1\",\n    style: $options.inputWidthStyle,\n    onMouseup: _cache[42] || (_cache[42] = (...args) => $options.keepFocusing(...args)),\n    onClick: _cache[43] || (_cache[43] = withModifiers(() => {}, [\"stop\"]))\n  }, [createVNode(\"div\", {\n    class: \"select-list\",\n    style: $options.inputWidthStyle,\n    tabindex: \"-1\"\n  }, [createCommentVNode(\" Common Keyboard Support: less event listeners \"), !$props.advancedKeyboard ? (openBlock(true), createBlock(Fragment, {\n    key: 0\n  }, renderList($options.columnsSequence, column => {\n    return openBlock(), createBlock(Fragment, {\n      key: column\n    }, [column === 'hour' ? (openBlock(), createBlock(\"ul\", {\n      key: 0,\n      class: \"hours\",\n      onScroll: _cache[14] || (_cache[14] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.hourLabelText)\n    }, null, 8 /* PROPS */, [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.hours, (hr, hIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: hIndex\n      }, [!$options.opts.hideDisabledHours || $options.opts.hideDisabledHours && !$options.isDisabled('hour', hr) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.hour === hr\n        },\n        disabled: $options.booleanAttr($options.isDisabled('hour', hr)),\n        \"data-key\": hr,\n        textContent: toDisplayString(hr),\n        onClick: $event => $options.select('hour', hr)\n      }, null, 10 /* CLASS, PROPS */, [\"disabled\", \"data-key\", \"textContent\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true), column === 'minute' ? (openBlock(), createBlock(\"ul\", {\n      key: 1,\n      class: \"minutes\",\n      onScroll: _cache[15] || (_cache[15] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.minuteLabelText)\n    }, null, 8 /* PROPS */, [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.minutes, (m, mIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: mIndex\n      }, [!$options.opts.hideDisabledMinutes || $options.opts.hideDisabledMinutes && !$options.isDisabled('minute', m) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.minute === m\n        },\n        disabled: $options.booleanAttr($options.isDisabled('minute', m)),\n        \"data-key\": m,\n        textContent: toDisplayString(m),\n        onClick: $event => $options.select('minute', m)\n      }, null, 10 /* CLASS, PROPS */, [\"disabled\", \"data-key\", \"textContent\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true), column === 'second' ? (openBlock(), createBlock(\"ul\", {\n      key: 2,\n      class: \"seconds\",\n      onScroll: _cache[16] || (_cache[16] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.secondLabelText)\n    }, null, 8 /* PROPS */, [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.seconds, (s, sIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: sIndex\n      }, [!$options.opts.hideDisabledSeconds || $options.opts.hideDisabledSeconds && !$options.isDisabled('second', s) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.second === s\n        },\n        disabled: $options.booleanAttr($options.isDisabled('second', s)),\n        \"data-key\": s,\n        textContent: toDisplayString(s),\n        onClick: $event => $options.select('second', s)\n      }, null, 10 /* CLASS, PROPS */, [\"disabled\", \"data-key\", \"textContent\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true), column === 'apm' ? (openBlock(), createBlock(\"ul\", {\n      key: 3,\n      class: \"apms\",\n      onScroll: _cache[17] || (_cache[17] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.apmLabelText)\n    }, null, 8 /* PROPS */, [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.apms, (a, aIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: aIndex\n      }, [!$options.opts.hideDisabledHours || $options.opts.hideDisabledHours && !$options.isDisabled('apm', a) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.apm === a\n        },\n        disabled: $options.booleanAttr($options.isDisabled('apm', a)),\n        \"data-key\": a,\n        textContent: toDisplayString($options.apmDisplayText(a)),\n        onClick: $event => $options.select('apm', a)\n      }, null, 10 /* CLASS, PROPS */, [\"disabled\", \"data-key\", \"textContent\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" / Common Keyboard Support \"), createCommentVNode(\"\\n        Advanced Keyboard Support\\n        Addeds hundreds of additional event lisenters\\n      \"), $props.advancedKeyboard ? (openBlock(true), createBlock(Fragment, {\n    key: 1\n  }, renderList($options.columnsSequence, column => {\n    return openBlock(), createBlock(Fragment, {\n      key: column\n    }, [column === 'hour' ? (openBlock(), createBlock(\"ul\", {\n      key: 0,\n      class: \"hours\",\n      tabindex: \"-1\",\n      onScroll: _cache[23] || (_cache[23] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.hourLabelText),\n      tabindex: \"-1\"\n    }, null, 8 /* PROPS */, [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.hours, (hr, hIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: hIndex\n      }, [!$options.opts.hideDisabledHours || $options.opts.hideDisabledHours && !$options.isDisabled('hour', hr) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.hour === hr\n        },\n        tabindex: $options.isDisabled('hour', hr) ? -1 : $props.tabindex,\n        \"data-key\": hr,\n        disabled: $options.booleanAttr($options.isDisabled('hour', hr)),\n        textContent: toDisplayString(hr),\n        onClick: $event => $options.select('hour', hr),\n        onKeydown: [withKeys(withModifiers($event => $options.select('hour', hr), [\"prevent\"]), [\"space\"]), withKeys(withModifiers($event => $options.select('hour', hr), [\"prevent\"]), [\"enter\"]), withKeys(withModifiers($event => $options.prevItem('hour', hr), [\"prevent\"]), [\"up\"]), withKeys(withModifiers($event => $options.nextItem('hour', hr), [\"prevent\"]), [\"down\"]), _cache[18] || (_cache[18] = withKeys(withModifiers($event => $options.toLeftColumn('hour'), [\"prevent\"]), [\"left\"])), _cache[19] || (_cache[19] = withKeys(withModifiers($event => $options.toRightColumn('hour'), [\"prevent\"]), [\"right\"])), _cache[20] || (_cache[20] = withKeys(withModifiers((...args) => $options.debounceBlur(...args), [\"exact\"]), [\"esc\"]))],\n        onBlur: _cache[21] || (_cache[21] = (...args) => $options.debounceBlur(...args)),\n        onFocus: _cache[22] || (_cache[22] = (...args) => $options.keepFocusing(...args))\n      }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, [\"tabindex\", \"data-key\", \"disabled\", \"textContent\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true), column === 'minute' ? (openBlock(), createBlock(\"ul\", {\n      key: 1,\n      class: \"minutes\",\n      tabindex: \"-1\",\n      onScroll: _cache[29] || (_cache[29] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.minuteLabelText),\n      tabindex: \"-1\"\n    }, null, 8 /* PROPS */, [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.minutes, (m, mIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: mIndex\n      }, [!$options.opts.hideDisabledMinutes || $options.opts.hideDisabledMinutes && !$options.isDisabled('minute', m) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.minute === m\n        },\n        tabindex: $options.isDisabled('minute', m) ? -1 : $props.tabindex,\n        \"data-key\": m,\n        disabled: $options.booleanAttr($options.isDisabled('minute', m)),\n        textContent: toDisplayString(m),\n        onClick: $event => $options.select('minute', m),\n        onKeydown: [withKeys(withModifiers($event => $options.select('minute', m), [\"prevent\"]), [\"space\"]), withKeys(withModifiers($event => $options.select('minute', m), [\"prevent\"]), [\"enter\"]), withKeys(withModifiers($event => $options.prevItem('minute', m), [\"prevent\"]), [\"up\"]), withKeys(withModifiers($event => $options.nextItem('minute', m), [\"prevent\"]), [\"down\"]), _cache[24] || (_cache[24] = withKeys(withModifiers($event => $options.toLeftColumn('minute'), [\"prevent\"]), [\"left\"])), _cache[25] || (_cache[25] = withKeys(withModifiers($event => $options.toRightColumn('minute'), [\"prevent\"]), [\"right\"])), _cache[26] || (_cache[26] = withKeys(withModifiers((...args) => $options.debounceBlur(...args), [\"exact\"]), [\"esc\"]))],\n        onBlur: _cache[27] || (_cache[27] = (...args) => $options.debounceBlur(...args)),\n        onFocus: _cache[28] || (_cache[28] = (...args) => $options.keepFocusing(...args))\n      }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, [\"tabindex\", \"data-key\", \"disabled\", \"textContent\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true), column === 'second' ? (openBlock(), createBlock(\"ul\", {\n      key: 2,\n      class: \"seconds\",\n      tabindex: \"-1\",\n      onScroll: _cache[35] || (_cache[35] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.secondLabelText),\n      tabindex: \"-1\"\n    }, null, 8 /* PROPS */, [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.seconds, (s, sIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: sIndex\n      }, [!$options.opts.hideDisabledSeconds || $options.opts.hideDisabledSeconds && !$options.isDisabled('second', s) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.second === s\n        },\n        tabindex: $options.isDisabled('second', s) ? -1 : $props.tabindex,\n        \"data-key\": s,\n        disabled: $options.booleanAttr($options.isDisabled('second', s)),\n        textContent: toDisplayString(s),\n        onClick: $event => $options.select('second', s),\n        onKeydown: [withKeys(withModifiers($event => $options.select('second', s), [\"prevent\"]), [\"space\"]), withKeys(withModifiers($event => $options.select('second', s), [\"prevent\"]), [\"enter\"]), withKeys(withModifiers($event => $options.prevItem('second', s), [\"prevent\"]), [\"up\"]), withKeys(withModifiers($event => $options.nextItem('second', s), [\"prevent\"]), [\"down\"]), _cache[30] || (_cache[30] = withKeys(withModifiers($event => $options.toLeftColumn('second'), [\"prevent\"]), [\"left\"])), _cache[31] || (_cache[31] = withKeys(withModifiers($event => $options.toRightColumn('second'), [\"prevent\"]), [\"right\"])), _cache[32] || (_cache[32] = withKeys(withModifiers((...args) => $options.debounceBlur(...args), [\"exact\"]), [\"esc\"]))],\n        onBlur: _cache[33] || (_cache[33] = (...args) => $options.debounceBlur(...args)),\n        onFocus: _cache[34] || (_cache[34] = (...args) => $options.keepFocusing(...args))\n      }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, [\"tabindex\", \"data-key\", \"disabled\", \"textContent\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true), column === 'apm' ? (openBlock(), createBlock(\"ul\", {\n      key: 3,\n      class: \"apms\",\n      tabindex: \"-1\",\n      onScroll: _cache[41] || (_cache[41] = (...args) => $options.keepFocusing(...args))\n    }, [createVNode(\"li\", {\n      class: \"hint\",\n      textContent: toDisplayString($options.apmLabelText),\n      tabindex: \"-1\"\n    }, null, 8 /* PROPS */, [\"textContent\"]), (openBlock(true), createBlock(Fragment, null, renderList($data.apms, (a, aIndex) => {\n      return openBlock(), createBlock(Fragment, {\n        key: aIndex\n      }, [!$options.opts.hideDisabledHours || $options.opts.hideDisabledHours && !$options.isDisabled('apm', a) ? (openBlock(), createBlock(\"li\", {\n        key: 0,\n        class: {\n          active: $data.apm === a\n        },\n        tabindex: $options.isDisabled('apm', a) ? -1 : $props.tabindex,\n        \"data-key\": a,\n        disabled: $options.booleanAttr($options.isDisabled('apm', a)),\n        textContent: toDisplayString($options.apmDisplayText(a)),\n        onClick: $event => $options.select('apm', a),\n        onKeydown: [withKeys(withModifiers($event => $options.select('apm', a), [\"prevent\"]), [\"space\"]), withKeys(withModifiers($event => $options.select('apm', a), [\"prevent\"]), [\"enter\"]), withKeys(withModifiers($event => $options.prevItem('apm', a), [\"prevent\"]), [\"up\"]), withKeys(withModifiers($event => $options.nextItem('apm', a), [\"prevent\"]), [\"down\"]), _cache[36] || (_cache[36] = withKeys(withModifiers($event => $options.toLeftColumn('apm'), [\"prevent\"]), [\"left\"])), _cache[37] || (_cache[37] = withKeys(withModifiers($event => $options.toRightColumn('apm'), [\"prevent\"]), [\"right\"])), _cache[38] || (_cache[38] = withKeys(withModifiers((...args) => $options.debounceBlur(...args), [\"exact\"]), [\"esc\"]))],\n        onBlur: _cache[39] || (_cache[39] = (...args) => $options.debounceBlur(...args)),\n        onFocus: _cache[40] || (_cache[40] = (...args) => $options.keepFocusing(...args))\n      }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, [\"tabindex\", \"data-key\", \"disabled\", \"textContent\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */)) : createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" / Advanced Keyboard Support \")], 4 /* STYLE */)], 38 /* CLASS, STYLE, HYDRATE_EVENTS */), [[vShow, $data.showDropdown]])], 4 /* STYLE */);\n}\nscript.render = render;\nscript.__file = \"src/VueTimepicker.vue\";\nexport default script;","map":{"version":3,"names":["CONFIG","HOUR_TOKENS","MINUTE_TOKENS","SECOND_TOKENS","APM_TOKENS","BASIC_TYPES","DEFAULT_OPTIONS","format","minuteInterval","secondInterval","hourRange","minuteRange","secondRange","hideDisabledHours","hideDisabledMinutes","hideDisabledSeconds","hideDisabledItems","advancedKeyboard","hideDropdown","blurDelay","manualInputTimeout","dropOffsetHeight","script","name","props","modelValue","type","Object","String","Number","Array","Boolean","default","hideClearButton","disabled","closeOnComplete","id","inputClass","placeholder","tabindex","inputWidth","autocomplete","hourLabel","minuteLabel","secondLabel","apmLabel","amText","pmText","lazy","autoScroll","dropDirection","containerId","manualInput","fixedDropdownButton","debugMode","data","timeValue","hours","minutes","seconds","apms","isActive","showDropdown","isFocusing","debounceTimer","undefined","hourType","minuteType","secondType","apmType","hour","minute","second","apm","fullValues","bakDisplayTime","doClearApmChecking","selectionTimer","kbInputTimer","kbInputLog","bakCurrentPos","forceDropOnTop","emits","computed","opts","options","assign","length","isNumber","debugLog","isArray","JSON","parse","stringify","useStringValue","formatString","inUse","typesInUse","filter","getTokenByType","sort","l","r","indexOf","tokensInUse","map","types","tokens","displayTime","replace","RegExp","customDisplayTime","apmDisplayText","inputIsEmpty","allValueSelected","columnsSequence","showClearBtn","showDropdownBtn","baseOn12Hours","hourRangeIn24HrFormat","range","forEach","value","start","end","is12hRange","translate12hRange","i","includes","push","restrictedHourRange","validHoursList","list","hr","substr","formatValue","am12Index","unshift","splice","shift","concat","has","result","customApmText","apmEnabled","am","some","pm","minuteRangeList","renderRangeList","secondRangeList","hourLabelText","minuteLabelText","secondLabelText","apmLabelText","inputWidthStyle","width","tokenRegexBase","join","tokenChunks","tokensRegxStr","tokensMatchAll","getMatchAllByRegex","tkMatch","rawToken","tokenMatchItem","index","token","getTokenType","needsCalibrate","len","needsPosCalibrate","chk","tokenChunksPos","calibrateLen","chunkCurrentLen","toLowerCase","invalidValues","isEmptyValue","isValidValue","isDisabled","notInInterval","hasInvalidInput","autoDirectionEnabled","dropdownDirClass","watch","opts.format","newValue","renderFormat","opts.minuteInterval","newInteval","renderList","opts.secondInterval","deep","handler","readValues","fillValues","toDisabled","invalidValues.length","newLength","oldLength","$emit","methods","checkAcceptingType","validValues","newFormat","renderHoursList","renderApmList","nextTick","hoursCount","listType","interval","isMinuteOrSecond","isMinute","readStringValues","readObjectValues","objValue","values","keys","addFallbackValues","sanitizedValue","testString","regexString","str","needsPolyfill","matchAll","polyfillMatchAll","stringValue","othersRegxStr","othersMatchAll","chunks","isValueToken","otMatch","regexCombo","chunk","tokenRegex","getTokenRegex","safeChars","comboReg","test","matchResults","match","valueResults","slice","vrIndex","targetToken","setValueFromString","tokenChunksForLog","tChunk","targetString","regxStr","matchesList","indicesReg","matchedItem","existIndex","findIndex","idxItem","regex","exec","itemIndicesRegex","parsedValue","tokenType","stdValue","forceEmit","baseHour","baseHourType","apmValue","lowerCasedApm","a","A","toUpperCase","hourValue","m","mm","s","ss","emitTimeValue","toggleActive","valueT","match12hRange","isBasicType","isDisabledHour","section","rawRange","formatedValue","fullList","validItems","item","forceApmSelection","emptyApmSelection","setDropdownState","$refs","input","selectionStart","selectionEnd","selectFirstSlot","checkForAutoScroll","toShow","fromUserClick","keepFocusing","checkDropDirection","blurEvent","select","clearTime","scrollToSelectedValues","firstColumn","scrollToSelected","column","allowFallback","targetList","$el","querySelectorAll","targetValue","activeItemInCol","validItemsInCol","scrollTop","offsetTop","focus","onFocus","escBlur","window","clearTimeout","inputBox","blur","debounceBlur","setTimeout","onBlur","columnClass","getClosestSibling","dataKey","getPrevious","siblingsInCol","selfIndex","prototype","call","sbl","getAttribute","prevItem","isManualInput","targetItem","nextItem","getSideColumnName","currentColumn","toLeft","currentColumnIndex","getFirstItemInSideColumn","targetColumn","listItems","getActiveItemInSideColumn","activeItems","toLeftColumn","toRightColumn","onMouseDown","nearestSlot","getNearestChunkByPos","debounceSetInputSelection","keyDownHandler","evt","isComposing","keyCode","preventDefault","stopPropagation","keyboardInput","key","clearKbInputLog","arrowHandler","tabHandler","metaKey","ctrlKey","onCompostionStart","getCurrentTokenChunk","onCompostionEnd","cpsData","inputIsCustomApmText","isCustomApmText","setSanitizedValueToSection","bakPos","pasteHandler","pastingText","clipboardData","getData","replaceCustomApmText","setKbInput","debounceClearKbLog","direction","selectFirstValidValue","currentChunk","getClosestValidItemInCol","newChunkPos","toLateralToken","firstChunk","lastChunk","shiftKey","newChar","isApm","chunkType","chunkToken","validValue","lastInputValue","onChange","autoFillValue","startPos","nearest","nearestDelta","delta","Math","abs","firstSlotType","getClosestHourItem","currentValue","setManualHour","currentIndex","valueKey","nextIndex","inputValue","hourT","setInputSelectionRange","setSelectionRange","firstChunkPos","currentChunkIndex","targetSlotPos","inputData","inputString","container","document","getElementById","el","spaceDown","offsetHeight","docHeight","max","body","scrollHeight","documentElement","clientHeight","isNaN","parseFloat","isFinite","testValue","tokenRegexStr","booleanAttr","isTrue","logText","identifier","inputClasses","split","clsName","trim","finalLogText","console","debug","log","mounted","beforeUnmount"],"sources":["../src/VueTimepicker.vue"],"sourcesContent":["<script>\nimport { nextTick } from 'vue'\n\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a'],\n  BASIC_TYPES: ['hour', 'minute', 'second', 'apm']\n}\n\nconst DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false,\n  advancedKeyboard: false,\n  hideDropdown: false,\n  blurDelay: 300,\n  manualInputTimeout: 1000,\n  dropOffsetHeight: 160\n}\n\nexport default {\n  name: 'VueTimepicker',\n\n  props: {\n    modelValue: { type: [ Object, String ] },\n    format: { type: String },\n    minuteInterval: { type: [ Number, String ] },\n    secondInterval: { type: [ Number, String ] },\n\n    hourRange: { type: Array },\n    minuteRange: { type: Array },\n    secondRange: { type: Array },\n\n    hideDisabledHours: { type: Boolean, default: false },\n    hideDisabledMinutes: { type: Boolean, default: false },\n    hideDisabledSeconds: { type: Boolean, default: false },\n    hideDisabledItems: { type: Boolean, default: false },\n\n    hideClearButton: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    closeOnComplete: { type: Boolean, default: false },\n\n    id: { type: String },\n    name: { type: String },\n    inputClass: { type: [ String, Object, Array ] },\n    placeholder: { type: String },\n    tabindex: { type: [ Number, String ], default: 0 },\n    inputWidth: { type: String },\n    autocomplete: { type: String, default: 'off' },\n\n    hourLabel: { type: String },\n    minuteLabel: { type: String },\n    secondLabel: { type: String },\n    apmLabel: { type: String },\n    amText: { type: String },\n    pmText: { type: String },\n\n    blurDelay: { type: [ Number, String ] },\n    advancedKeyboard: { type: Boolean, default: false },\n\n    lazy: { type: Boolean, default: false },\n    autoScroll: { type: Boolean, default: false },\n\n    dropDirection: { type: String, default: 'down' },\n    dropOffsetHeight: { type: [ Number, String ] },\n    containerId: { type: String },\n\n    manualInput: { type: Boolean, default: false },\n    manualInputTimeout: { type: [ Number, String ] },\n    hideDropdown: { type: Boolean, default: false },\n    fixedDropdownButton: { type: Boolean, default: false },\n\n    debugMode: { type: Boolean, default: false }\n  },\n\n  data () {\n    return {\n      timeValue: {},\n\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n\n      isActive: false,\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined,\n      doClearApmChecking: false,\n\n      selectionTimer: undefined,\n      kbInputTimer: undefined,\n      kbInputLog: '',\n      bakCurrentPos: undefined,\n      forceDropOnTop: false\n    }\n  },\n\n  emits: ['update:modelValue', 'change', 'open', 'close', 'focus', 'blur', 'error'],\n\n  computed: {\n    opts () {\n      const options = Object.assign({}, DEFAULT_OPTIONS)\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format)\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval\n      }\n      // minuteInterval failsafe\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (this.debugMode) {\n          if (options.minuteInterval > 60) {\n            this.debugLog(`\"minute-interval\" should be less than 60. Current value is ${this.minuteInterval}`)\n          } else if (options.minuteInterval === 0 || options.minuteInterval < 1) {\n            this.debugLog(`\"minute-interval\" should be NO less than 1. Current value is ${this.minuteInterval}`)\n          }\n        }\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60\n        } else {\n          options.minuteInterval = 1\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval\n      }\n      // secondInterval failsafe\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (this.debugMode) {\n          if (options.secondInterval > 60) {\n            this.debugLog(`\"second-interval\" should be less than 60. Current value is ${this.secondInterval}`)\n          } else if (options.secondInterval === 0 || options.secondInterval < 1) {\n            this.debugLog(`\"second-interval\" should be NO less than 1. Current value is ${this.secondInterval}`)\n          }\n        }\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60\n        } else {\n          options.secondInterval = 1\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange))\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange))\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange))\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true\n      }\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true\n      }\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true\n      }\n\n      if (this.hideDropdown) {\n        if (this.manualInput) {\n          options.hideDropdown = true\n        } else if (this.debugMode) {\n          this.debugLog('\"hide-dropdown\" only works with \"manual-input\" mode')\n        }\n      }\n\n      if (this.blurDelay && +this.blurDelay > 0) {\n        options.blurDelay = +this.blurDelay\n      }\n\n      if (this.manualInputTimeout && +this.manualInputTimeout > 0) {\n        options.manualInputTimeout = +this.manualInputTimeout\n      }\n\n      if (this.dropOffsetHeight && +this.dropOffsetHeight > 0) {\n        options.dropOffsetHeight = +this.dropOffsetHeight\n      }\n\n      return options\n    },\n\n    useStringValue () {\n      return typeof this.modelValue === 'string'\n    },\n\n    formatString () {\n      return this.opts.format || DEFAULT_OPTIONS.format\n    },\n\n    inUse () {\n      const typesInUse = CONFIG.BASIC_TYPES.filter(type => this.getTokenByType(type))\n      // Sort types and tokens by their sequence in the \"format\" string\n      typesInUse.sort((l, r) => {\n        return this.formatString.indexOf(this.getTokenByType(l) || null) - this.formatString.indexOf(this.getTokenByType(r) || null)\n      })\n      const tokensInUse = typesInUse.map(type => this.getTokenByType(type))\n      return {\n        hour: !!this.hourType,\n        minute: !!this.minuteType,\n        second: !!this.secondType,\n        apm: !!this.apmType,\n        types: typesInUse || [],\n        tokens: tokensInUse || []\n      }\n    },\n\n    displayTime () {\n      let formatString = String(this.formatString)\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour)\n      }\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute)\n      }\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second)\n      }\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm)\n      }\n      return formatString\n    },\n\n    customDisplayTime () {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime\n      }\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm))\n    },\n\n    inputIsEmpty () {\n      return this.formatString === this.displayTime\n    },\n\n    allValueSelected () {\n      if (\n        (this.inUse.hour && !this.hour) ||\n        (this.inUse.minute && !this.minute) ||\n        (this.inUse.second && !this.second) ||\n        (this.inUse.apm && !this.apm)\n      ) {\n        return false\n      }\n      return true\n    },\n\n    columnsSequence () {\n      return this.inUse.types.map(type => type) || []\n    },\n\n    showClearBtn () {\n      if (this.hideClearButton || this.disabled) {\n        return false\n      }\n      return !this.inputIsEmpty\n    },\n\n    showDropdownBtn () {\n      if (this.fixedDropdownButton) { return true }\n      if (this.opts.hideDropdown && this.isActive && !this.showDropdown) {\n        return true\n      }\n      return false\n    },\n\n    baseOn12Hours () {\n      return this.hourType === 'h' || this.hourType === 'hh'\n    },\n\n    hourRangeIn24HrFormat () {\n      if (!this.hourType || !this.opts.hourRange) { return false }\n      if (!this.opts.hourRange.length) { return [] }\n\n      const range = []\n      this.opts.hourRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"hour-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n\n          let start = value[0]\n          let end = value[1] || value[0]\n\n          if (this.is12hRange(start)) {\n            start = this.translate12hRange(start)\n          }\n          if (this.is12hRange(end)) {\n            end = this.translate12hRange(end)\n          }\n\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) { continue }\n            if (!range.includes(i)) {\n              range.push(i)\n            }\n          }\n        } else {\n          if (this.is12hRange(value)) {\n            value = this.translate12hRange(value)\n          } else {\n            value = +value\n          }\n          if (value < 0 || value > 24) { return }\n          if (!range.includes(value)) {\n            range.push(value)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      return range\n    },\n\n    restrictedHourRange () {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) { return false }\n      // 12-Hour\n      if (this.baseOn12Hours) {\n        const range = this.hourRangeIn24HrFormat.map((value) => {\n          if (value === 12) {\n            return '12p'\n          } else if (value === 24 || value === 0) {\n            return '12a'\n          }\n          return value > 12 ? `${value % 12}p` : `${value}a`\n        })\n        return range\n      }\n      // 24-Hour\n      return this.hourRangeIn24HrFormat\n    },\n\n    validHoursList () {\n      if (!this.manualInput) { return false }\n      if (this.restrictedHourRange) {\n        let list = []\n        if (this.baseOn12Hours) {\n          list = this.restrictedHourRange.map(hr => {\n            const l = hr.substr(0, hr.length - 1)\n            const r = hr.substr(-1)\n            return `${this.formatValue(this.hourType, l)}${r}`\n          })\n          const am12Index = list.indexOf('12a')\n          if (am12Index > 0) {\n            // Make '12a' the first item in h/hh\n            list.unshift(list.splice(am12Index, 1)[0])\n          }\n          return list\n        }\n        list = this.restrictedHourRange.map(hr => {\n          return this.formatValue(this.hourType, hr)\n        })\n        if (list.length > 1 && list[0] && list[0] === '24') {\n          // Make '24' the last item in k/kk\n          list.push(list.shift())\n        }\n        return list\n      }\n      if (this.baseOn12Hours) {\n        return [].concat([], this.hours.map(hr => `${hr}a`), this.hours.map(hr => `${hr}p`))\n      }\n      return this.hours\n    },\n\n    has () {\n      const result = {\n        customApmText: false\n      }\n      const apmEnabled = !!this.apmType\n\n      if (apmEnabled && this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        const range = [].concat([], this.hourRangeIn24HrFormat)\n        result.am = range.some(value => value < 12 || value === 24)\n        result.pm = range.some(value => value >= 12 && value < 24)\n      } else {\n        result.am = apmEnabled\n        result.pm = apmEnabled\n      }\n      if ((this.amText && this.amText.length) || (this.pmText && this.pmText.length)) {\n        result.customApmText = true\n      }\n      return result\n    },\n\n    minuteRangeList () {\n      if (!this.minuteType || !this.opts.minuteRange) { return false }\n      if (!this.opts.minuteRange.length) { return [] }\n      return this.renderRangeList(this.opts.minuteRange, 'minute')\n    },\n\n    secondRangeList () {\n      if (!this.secondType || !this.opts.secondRange) { return false }\n      if (!this.opts.secondRange.length) { return [] }\n      return this.renderRangeList(this.opts.secondRange, 'second')\n    },\n    \n    hourLabelText () {\n      return this.hourLabel || this.hourType\n    },\n    minuteLabelText () {\n      return this.minuteLabel || this.minuteType\n    },\n    secondLabelText() {\n      return this.secondLabel || this.secondType\n    },\n    apmLabelText () {\n      return this.apmLabel || this.apmType\n    },\n\n    inputWidthStyle () {\n      if (!this.inputWidth || !this.inputWidth.length) { return }\n      return {\n        width: this.inputWidth\n      }\n    },\n\n    tokenRegexBase () {\n      return this.inUse.tokens.join('|')\n    },\n\n    tokenChunks () {\n      if (!this.manualInput && !this.useStringValue) { return false }\n\n      const formatString = String(this.formatString)\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr)\n\n      const tokenChunks = []\n      for (let tkMatch of tokensMatchAll) {\n        const rawToken = tkMatch[0]\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: rawToken,\n          type: this.getTokenType(rawToken),\n          needsCalibrate: rawToken.length < 2,\n          len: (rawToken || '').length\n        }\n        tokenChunks.push(tokenMatchItem)\n      }\n      return tokenChunks\n    },\n\n    needsPosCalibrate () {\n      if (!this.manualInput) { return false }\n      return this.tokenChunks.some(chk => chk.needsCalibrate)\n    },\n\n    tokenChunksPos () {\n      if (!this.manualInput) { return false }\n      if (!this.needsPosCalibrate) {\n        return this.tokenChunks.map(chk => {\n          return {\n            token: chk.token,\n            type: chk.type,\n            start: chk.index,\n            end: chk.index + chk.len\n          }\n        })\n      }\n      const list = []\n      let calibrateLen = 0\n      this.tokenChunks.forEach(chk => {\n        let chunkCurrentLen\n        // Adjust for customized AM/PM text\n        if (chk.type === 'apm' && this.has.customApmText) {\n          if (this.apm && this.apm.length) {\n            const customApmText = this.apm.toLowerCase() === 'am' ? this.amText : this.pmText\n            chunkCurrentLen = (customApmText && customApmText.length) ? customApmText.length : chk.len\n          } else {\n            chunkCurrentLen = chk.len\n          }\n        // Others\n        } else {\n          chunkCurrentLen = this[chk.type] && this[chk.type].length ? this[chk.type].length : chk.len\n        }\n        list.push({\n          token: chk.token,\n          type: chk.type,\n          start: chk.index + calibrateLen,\n          end: chk.index + calibrateLen + chunkCurrentLen\n        })\n        if (chk.needsCalibrate && chunkCurrentLen > chk.len) {\n          calibrateLen += (chunkCurrentLen - chk.len)\n        }\n      })\n      return list\n    },\n\n    invalidValues () {\n      if (this.inputIsEmpty) { return [] }\n      if (!this.restrictedHourRange && !this.minuteRangeList && !this.secondRangeList && this.opts.minuteInterval === 1 && this.opts.secondInterval === 1) { return [] }\n\n      const result = []\n      if (this.inUse.hour && !this.isEmptyValue(this.hourType, this.hour) && (!this.isValidValue(this.hourType, this.hour) || this.isDisabled('hour', this.hour))) {\n        result.push('hour')\n      }\n      if (this.inUse.minute && !this.isEmptyValue(this.minuteType, this.minute) && (!this.isValidValue(this.minuteType, this.minute) || this.isDisabled('minute', this.minute) || this.notInInterval('minute', this.minute))) {\n        result.push('minute')\n      }\n      if (this.inUse.second && !this.isEmptyValue(this.secondType, this.second) && (!this.isValidValue(this.secondType, this.second) || this.isDisabled('second', this.second) || this.notInInterval('second', this.second))) {\n        result.push('second')\n      }\n      if (this.inUse.apm && !this.isEmptyValue(this.apmType, this.apm) && (!this.isValidValue(this.apmType, this.apm) || this.isDisabled('apm', this.apm))) {\n        result.push('apm')\n      }\n      if (result.length) {\n        return result\n      }\n      return []\n    },\n\n    hasInvalidInput () {\n      return Boolean(this.invalidValues && this.invalidValues.length)\n    },\n\n    autoDirectionEnabled () {\n      return this.dropDirection === 'auto'\n    },\n\n    dropdownDirClass () {\n      if (this.autoDirectionEnabled) {\n        return this.forceDropOnTop ? 'drop-up' : 'drop-down'\n      }\n      return this.dropDirection === 'up' ? 'drop-up' : 'drop-down'      \n    }\n  },\n\n  watch: {\n    'opts.format' (newValue) {\n      this.renderFormat(newValue)\n    },\n    'opts.minuteInterval' (newInteval) {\n      this.renderList('minute', newInteval)\n    },\n    'opts.secondInterval' (newInteval) {\n      this.renderList('second', newInteval)\n    },\n    value: {\n      deep: true,\n      handler () {\n        this.readValues()\n      }\n    },\n    displayTime () {\n      this.fillValues()\n    },\n    disabled (toDisabled) {\n      if (toDisabled) {\n        // Force close dropdown and reset status when disabled\n        if (this.isActive) {\n          this.isActive = false\n        }\n        if (this.showDropdown) {\n          this.showDropdown = false\n        }\n      }\n    },\n    'invalidValues.length' (newLength, oldLength) {\n      if (newLength && newLength >= 1) {\n        this.$emit('error', this.invalidValues)\n      } else if (oldLength && oldLength >= 1) {\n        this.$emit('error', [])\n      }\n    }\n  },\n\n  methods: {\n    formatValue (token, i) {\n      if (!this.isNumber(i)) { return '' }\n      i = +i\n      switch (token) {\n        case 'H':\n        case 'h':\n        case 'k':\n        case 'm':\n        case 's':\n          if (['h', 'k'].includes(token) && i === 0) {\n            return token === 'k' ? '24' : '12'\n          }\n          return String(i)\n        case 'HH':\n        case 'mm':\n        case 'ss':\n        case 'hh':\n        case 'kk':\n          if (['hh', 'kk'].includes(token) && i === 0) {\n            return token === 'kk' ? '24' : '12'\n          }\n          return i < 10 ? `0${i}` : String(i)\n        default:\n          return ''\n      }\n    },\n\n    checkAcceptingType (validValues, formatString) {\n      if (!validValues || !formatString || !formatString.length) { return '' }\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i]\n        }\n      }\n      return ''\n    },\n\n    renderFormat (newFormat) {\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format\n\n      let hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat)\n      let minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat)\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat)\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat)\n\n      // Failsafe checking\n      if (!hourType && !minuteType && !this.secondType && !this.apmType) {\n        if (this.debugMode && this.format) {\n          this.debugLog(`No valid tokens found in your defined \"format\" string \"${this.format}\". Fallback to the default \"HH:mm\" format.`)\n        }\n        hourType = 'HH'\n        minuteType = 'mm'\n      }\n      this.hourType = hourType\n      this.minuteType = minuteType\n\n      this.hourType ? this.renderHoursList() : this.hours = []\n      this.minuteType ? this.renderList('minute') : this.minutes = []\n      this.secondType ? this.renderList('second') : this.seconds = []\n      this.apmType ? this.renderApmList() : this.apms = []\n\n      nextTick(() => {\n        this.readValues()\n      })\n    },\n\n    renderHoursList () {\n      const hoursCount = this.baseOn12Hours ? 12 : 24\n      const hours = []\n      for (let i = 0; i < hoursCount; i++) {\n        if (this.hourType === 'k' || this.hourType === 'kk') {\n          hours.push(this.formatValue(this.hourType, i + 1))\n        } else {\n          hours.push(this.formatValue(this.hourType, i))\n        }\n      }\n      this.hours = hours\n    },\n\n    renderList (listType, interval) {\n      if (!this.isMinuteOrSecond(listType)) { return }\n\n      const isMinute = listType === 'minute'\n      interval = interval || (isMinute ? (this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval) : (this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval))\n\n      const result = []\n      for (let i = 0; i < 60; i += interval) {\n        result.push(this.formatValue(isMinute ? this.minuteType : this.secondType, i))\n      }\n      isMinute ? this.minutes = result : this.seconds = result\n    },\n\n    renderApmList () {\n      this.apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm']\n    },\n\n    readValues () {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(`Received a string value: \"${this.modelValue}\"`)\n        }\n        this.readStringValues(this.modelValue)\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`Received an object value: \"${JSON.stringify(this.modelValue || {})}\"`)\n        }\n        this.readObjectValues(this.modelValue)\n      }\n    },\n\n    readObjectValues (objValue) {\n      const timeValue = JSON.parse(JSON.stringify(objValue || {}))\n      const values = Object.keys(timeValue)\n\n      // Failsafe for empty `v-model` object\n      if (values.length === 0) {\n        this.addFallbackValues()\n        return\n      }\n\n      CONFIG.BASIC_TYPES.forEach(type => {\n        const token = this.getTokenByType(type)\n        if (values.indexOf(token) > -1) {\n          const sanitizedValue = this.sanitizedValue(token, timeValue[token])\n          this[type] = sanitizedValue\n          timeValue[token] = sanitizedValue\n        } else {\n          this[type] = ''\n        }\n      })\n      this.timeValue = timeValue\n    },\n\n    getMatchAllByRegex (testString, regexString) {\n      const str = 'polyfillTest'\n      const needsPolyfill = Boolean(!str.matchAll || typeof str.matchAll !== 'function')\n      return needsPolyfill ? this.polyfillMatchAll(testString, regexString) : testString.matchAll(new RegExp(regexString, 'g'))\n    },\n\n    readStringValues (stringValue) {\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues()\n        return\n      }\n\n      const formatString = String(this.formatString)\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`\n      const othersRegxStr = `[^(${this.tokenRegexBase})]+`\n\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr)\n      const othersMatchAll = this.getMatchAllByRegex(formatString, othersRegxStr)\n\n      const chunks = []\n      const tokenChunks = []\n\n      for (let tkMatch of tokensMatchAll) {\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: tkMatch[0],\n          isValueToken: true\n        }\n        chunks.push(tokenMatchItem)\n        tokenChunks.push(tokenMatchItem)\n      }\n\n      for (let otMatch of othersMatchAll) {\n        chunks.push({\n          index: otMatch.index,\n          token: otMatch[0]\n        })\n      }\n\n      chunks.sort((l, r) => l.index < r.index ? -1 : 1)\n\n      let regexCombo = ''\n      chunks.forEach(chunk => {\n        if (chunk.isValueToken) {\n          const tokenRegex = this.getTokenRegex(chunk.token) || ''\n          regexCombo += tokenRegex\n        } else {\n          const safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1')\n          regexCombo += `(?:${safeChars})`\n        }\n      })\n\n      const comboReg = new RegExp(regexCombo)\n\n      // Do test before match\n      if (comboReg.test(stringValue)) {\n        const matchResults = stringValue.match(new RegExp(regexCombo))\n        const valueResults = matchResults.slice(1, tokenChunks.length + 1)\n        const timeValue = {}\n        valueResults.forEach((value, vrIndex) => {\n          if (tokenChunks[vrIndex]) {\n            const targetToken = tokenChunks[vrIndex].token\n            timeValue[targetToken] = this.setValueFromString(value, targetToken)\n          }\n        })\n        this.timeValue = timeValue\n\n        if (this.debugMode) {\n          const tokenChunksForLog = tokenChunks.map(tChunk => tChunk && tChunk.token)\n          this.debugLog(`Successfully parsed values ${JSON.stringify(valueResults)}\\nfor ${JSON.stringify(tokenChunksForLog)}\\nin format pattern '${this.formatString}'`)\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`The input string in \"v-model\" does NOT match the \"format\" pattern\\nformat: ${this.formatString}\\nv-model: ${stringValue}`)\n        }\n      }\n    },\n\n    polyfillMatchAll (targetString, regxStr) {\n      const matchesList = targetString.match(new RegExp(regxStr, 'g'))\n      const result = []\n      const indicesReg = []\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(matchedItem => {\n          const existIndex = indicesReg.findIndex(idxItem => idxItem.str === matchedItem)\n          let index\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index\n            }\n          } else {\n            const itemIndicesRegex = new RegExp(matchedItem, 'g')\n            index = itemIndicesRegex.exec(targetString).index\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            })\n          }\n          result.push({\n            0: String(matchedItem),\n            index: index\n          })\n        })\n      }\n      return result\n    },\n\n    addFallbackValues () {\n      const timeValue = {}\n      this.inUse.types.forEach(type => {\n        timeValue[this.getTokenByType(type)] = ''\n      })\n      this.timeValue = timeValue\n    },\n\n    setValueFromString (parsedValue, token) {\n      if (!token || !parsedValue) { return '' }\n      const tokenType = this.getTokenType(token)\n      if (!tokenType || !tokenType.length) { return '' }\n      const stdValue = (parsedValue !== this.getTokenByType(tokenType)) ? parsedValue : ''\n      this[tokenType] = stdValue\n      return stdValue\n    },\n\n    fillValues (forceEmit) {\n      const fullValues = {}\n\n      const baseHour = this.hour\n      const baseHourType = this.hourType\n\n      let apmValue\n\n      // Hour type or hour value is NOT set in the \"format\" string\n      if (!baseHourType || !this.isNumber(baseHour)) {\n        CONFIG.HOUR_TOKENS.forEach(token => fullValues[token] = '')\n        apmValue = this.lowerCasedApm(this.apm || '')\n        fullValues.a = apmValue\n        fullValues.A = apmValue.toUpperCase()\n\n      // Both Hour type and value are set\n      } else {\n        const hourValue = +baseHour\n        const apmValue = (this.baseOn12Hours && this.apm) ? this.lowerCasedApm(this.apm) : false\n\n        CONFIG.HOUR_TOKENS.forEach((token) => {\n          if (token === baseHourType) {\n            fullValues[token] = baseHour\n            return\n          }\n\n          let value\n          let apm\n          switch (token) {\n            case 'H':\n            case 'HH':\n            case 'k':\n            case 'kk':\n              if (this.baseOn12Hours) {\n                if (apmValue === 'pm') {\n                  value = hourValue < 12 ? hourValue + 12 : hourValue\n                } else if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 12 ? 24 : hourValue\n                } else {\n                  value = hourValue % 12\n                }\n              } else {\n                if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 0 ? 24 : hourValue\n                } else {\n                  value = hourValue % 24\n                }\n              }\n              fullValues[token] = this.formatValue(token, value)\n              break\n            case 'h':\n            case 'hh':\n              // h <-> hh\n              if (this.baseOn12Hours) {\n                value = hourValue\n                apm = apmValue || ''\n              // Read from other hour formats\n              } else {\n                if (hourValue > 11 && hourValue < 24) {\n                  apm = 'pm'\n                  value = hourValue === 12 ? 12 : hourValue % 12\n                } else {\n                  apm = 'am'\n                  value = hourValue % 12 === 0 ? 12 : hourValue\n                }\n              }\n              fullValues[token] = this.formatValue(token, value)\n              fullValues.a = apm\n              fullValues.A = apm.toUpperCase()\n              break\n          }\n        })\n      }\n\n      fullValues.m = this.formatValue('m', this.minute)\n      fullValues.mm = this.formatValue('mm', this.minute)\n      fullValues.s = this.formatValue('s', this.second)\n      fullValues.ss = this.formatValue('ss', this.second)\n\n      this.fullValues = fullValues\n\n      // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue()\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleActive()\n      }\n    },\n\n    emitTimeValue () {\n      if (!this.fullValues) { return }\n\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.')\n        }\n        return\n      }\n\n      const fullValues = JSON.parse(JSON.stringify(this.fullValues))\n\n      if (this.useStringValue) {\n        this.$emit('update:modelValue', this.inputIsEmpty ? '' : String(this.displayTime))\n      } else {\n        const tokensInUse = this.inUse.tokens || []\n        const timeValue = {}\n        tokensInUse.forEach((token) => {\n          timeValue[token] = fullValues[token] || ''\n        })\n        this.$emit('update:modelValue', JSON.parse(JSON.stringify(timeValue)))\n      }\n\n      this.$emit('change', {\n        data: fullValues,\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      })\n    },\n\n    translate12hRange (value) {\n      const valueT = this.match12hRange(value)\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12)\n      }\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0)\n    },\n\n    isDisabled (type, value) {\n      if (!this.isBasicType(type) || !this.inUse[type]) { return true }\n      switch (type) {\n        case 'hour':\n          return this.isDisabledHour(value)\n        case 'minute':\n        case 'second':\n          if (!this[`${type}RangeList`]) {\n            return false\n          }\n          return !this[`${type}RangeList`].includes(value)\n        case 'apm':\n          if (!this.restrictedHourRange) {\n            return false\n          }\n          return !this.has[this.lowerCasedApm(value)]\n        default:\n          return true\n      }\n    },\n\n    isDisabledHour (value) {\n      if (!this.restrictedHourRange) { return false }\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false\n        } else {\n          const token = this.apm.toLowerCase() === 'am' ? 'a' : 'p'\n          return !this.restrictedHourRange.includes(`${+value}${token}`)\n        }\n      }\n      // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n      if (\n        (this.hourType === 'HH' || this.hourType === 'H') &&\n        +value === 0 && this.restrictedHourRange.includes(24)\n      ) {\n        return false\n      }\n      return !this.restrictedHourRange.includes(+value)\n    },\n\n    notInInterval (section, value) {\n      if (!section || !this.isMinuteOrSecond(section)) { return }\n      if (this.opts[`${section}Interval`] === 1) { return false }\n      return +value % this.opts[`${section}Interval`] !== 0\n    },\n\n    renderRangeList (rawRange, section) {\n      if (!rawRange || !section || !this.isMinuteOrSecond(section)) { return [] }\n      const range = []\n      let formatedValue\n      rawRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"${section}-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.getTokenByType(section), i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (+value < 0 || +value > 59) { return }\n          formatedValue = this.formatValue(this.getTokenByType(section), value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const fullList = (section === 'minute' ? this.minutes : this.seconds) || []\n        const validItems = fullList.filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          if (section === 'minute') {\n            this.debugLog(`The minute list is empty due to the \"minute-range\" config\\nminute-range: ${JSON.stringify(this.minuteRange)}\\nminute-interval: ${this.opts.minuteInterval}`)\n          } else {\n            this.debugLog(`The second list is empty due to the \"second-range\" config\\nsecond-range: ${JSON.stringify(this.secondRange)}\\nsecond-interval: ${this.opts.secondInterval}`)\n          }\n        }\n      }\n      return range\n    },\n\n    forceApmSelection () {\n      if (this.manualInput) {\n        // Skip this to allow users to paste a string value from the clipboard in Manual Input mode\n        return\n      }\n      if (this.apmType && !this.apm) {\n        if (this.has.am || this.has.pm) {\n          this.doClearApmChecking = true\n          const apmValue = this.has.am ? 'am' : 'pm'\n          this.apm = this.apmType === 'A' ? apmValue.toUpperCase() : apmValue\n        }\n      }\n    },\n\n    emptyApmSelection () {\n      if (this.doClearApmChecking && this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = ''\n      }\n      this.doClearApmChecking = false\n    },\n\n    apmDisplayText (apmValue) {\n      if (this.amText && this.lowerCasedApm(apmValue) === 'am') {\n        return this.amText\n      }\n      if (this.pmText && this.lowerCasedApm(apmValue) === 'pm') {\n        return this.pmText\n      }\n      return apmValue\n    },\n\n    toggleActive () {\n      if (this.disabled) { return }\n      this.isActive = !this.isActive\n\n      if (this.isActive) {\n        this.isFocusing = true\n        if (this.manualInput) {\n          this.$emit('focus')\n        }\n        if (!this.opts.hideDropdown) {\n          this.setDropdownState(true)\n        }\n        // Record to check if value did change in the later phase\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '')\n        }\n        if (this.manualInput && !this.inputIsEmpty) {\n          nextTick(() => {\n            if (this.$refs.input && this.$refs.input.selectionStart === 0 && this.$refs.input.selectionEnd === this.displayTime.length) {\n              // Select the first slot instead of the whole value string when tabbed in\n              this.selectFirstSlot()\n            }\n          })\n        }\n      } else {\n        if (this.showDropdown) {\n          this.setDropdownState(false)\n        } else if (this.manualInput) {\n          this.$emit('blur')\n        }\n        this.isFocusing = false\n        if (this.lazy) {\n          this.fillValues(true)\n          this.bakDisplayTime = undefined\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        this.showDropdown ? this.forceApmSelection() : this.emptyApmSelection()\n      }\n      if (this.showDropdown) {\n        this.checkForAutoScroll()\n      }\n    },\n\n    setDropdownState (toShow, fromUserClick = false) {\n      if (toShow) {\n        this.keepFocusing()\n        if (this.autoDirectionEnabled) {\n          this.checkDropDirection()\n        }\n        this.showDropdown = true\n        this.$emit('open') \n        if (fromUserClick) {\n          if (this.fixedDropdownButton) {\n            this.isActive = true\n          }\n          this.$emit('blur')\n          this.checkForAutoScroll()\n        }\n      } else {\n        this.showDropdown = false\n        this.$emit('close')\n      }\n    },\n\n    blurEvent () {\n      if (this.manualInput && !this.opts.hideDropdown) {\n        // hideDropdown's `blur` event is handled somewhere else\n        this.$emit('blur')\n      }\n    },\n\n    select (type, value) {\n      if (this.isBasicType(type) && !this.isDisabled(type, value)) {\n        this[type] = value\n        if (this.doClearApmChecking) {\n          this.doClearApmChecking = false\n        }\n      }\n    },\n\n    clearTime () {\n      if (this.disabled) { return }\n      this.hour = ''\n      this.minute = ''\n      this.second = ''\n      this.apm = ''\n\n      if (this.manualInput && this.$refs && this.$refs.input && this.$refs.input.value.length) {\n        this.$refs.input.value = ''\n      }\n\n      if (this.lazy) {\n        this.fillValues(true)\n      }\n    },\n\n    //\n    // Auto-Scroll\n    //\n\n    checkForAutoScroll () {\n      if (this.inputIsEmpty) { return }\n      if (this.autoScroll) {\n        nextTick(() => {\n          this.scrollToSelectedValues()\n        })\n      } else if (this.advancedKeyboard) {\n        // Auto-focus on selected value in the first column for advanced-keyboard\n        nextTick(() => {\n          const firstColumn = this.inUse.types[0]\n          this.scrollToSelected(firstColumn, true)\n        })\n      }\n    },\n\n    scrollToSelected (column, allowFallback = false) {\n      if (!this.timeValue || this.inputIsEmpty) { return }\n      const targetList = this.$el.querySelectorAll(`ul.${column}s`)[0]\n      let targetValue = this.activeItemInCol(column)[0]\n      if (!targetValue && allowFallback) {\n        // No value selected in the target column, fallback to the first found valid item\n        targetValue = this.validItemsInCol(column)[0]\n      }\n      if (targetList && targetValue) {\n        targetList.scrollTop = targetValue.offsetTop || 0\n        if (this.advancedKeyboard) {\n          targetValue.focus()\n        }\n      }\n    },\n\n    scrollToSelectedValues () {\n      if (!this.timeValue || this.inputIsEmpty) { return }\n      this.inUse.types.forEach(section => {\n        this.scrollToSelected(section)\n      })\n    },\n\n    //\n    // Additional Keyboard Navigation\n    //\n\n    onFocus () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n      if (!this.isActive) {\n        this.toggleActive()\n      }\n    },\n\n    escBlur () {\n      if (this.disabled) { return }\n      window.clearTimeout(this.debounceTimer)\n      this.isFocusing = false\n      const inputBox = this.$el.querySelectorAll('input.vue__time-picker-input')[0]\n      if (inputBox) {\n        inputBox.blur()\n      }\n    },\n\n    debounceBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      window.clearTimeout(this.debounceTimer)\n      this.debounceTimer = window.setTimeout(() => {\n        window.clearTimeout(this.debounceTimer)\n        this.onBlur()\n      }, this.opts.blurDelay)\n    },\n\n    onBlur () {\n      if (!this.disabled && !this.isFocusing && this.isActive) {\n        this.toggleActive()\n      }\n    },\n\n    keepFocusing () {\n      if (this.disabled) { return }\n      window.clearTimeout(this.debounceTimer)\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n    },\n\n    validItemsInCol (column) {\n      const columnClass = `${column}s`\n      return this.$el.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`)\n    },\n\n    activeItemInCol (column) {\n      const columnClass = `${column}s`\n      return this.$el.querySelectorAll(`ul.${columnClass} > li.active:not(.hint)`)\n    },\n\n    getClosestSibling (column, dataKey, getPrevious = false) {\n      const siblingsInCol = this.validItemsInCol(column)\n      const selfIndex = Array.prototype.findIndex.call(siblingsInCol, (sbl) => {\n        return sbl.getAttribute('data-key') === dataKey\n      })\n\n      // Already the first item\n      if (getPrevious && selfIndex === 0) {\n        return siblingsInCol[siblingsInCol.length - 1]\n      }\n      // Already the last item\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        return siblingsInCol[0]\n      }\n      // Selected value not in the valid values list\n      if (selfIndex < 0) {\n        return siblingsInCol[0]\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1]\n      }\n      return siblingsInCol[selfIndex + 1]\n    },\n\n    prevItem (column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, true)\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus()\n      }\n    },\n\n    nextItem (column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, false)\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus()\n      }\n    },\n\n    getSideColumnName (currentColumn, toLeft = false) {\n      const currentColumnIndex = this.inUse.types.indexOf(currentColumn)\n      if (toLeft && currentColumnIndex <= 0) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already')\n        }\n        return\n      } else if (!toLeft && currentColumnIndex === (this.inUse.types.length - 1)) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already')\n        }\n        return\n      }\n      return this.inUse.types[toLeft ? currentColumnIndex - 1 : currentColumnIndex + 1]\n    },\n\n    getFirstItemInSideColumn (currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft)\n      if (!targetColumn) { return }\n      const listItems = this.validItemsInCol(targetColumn)\n      if (listItems && listItems[0]) {\n        return listItems[0]\n      }\n    },\n\n    getActiveItemInSideColumn (currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft)\n      if (!targetColumn) { return }\n      const activeItems = this.activeItemInCol(targetColumn)\n      if (activeItems && activeItems[0]) {\n        return activeItems[0]\n      }\n    },\n\n    toLeftColumn (currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, true) || this.getFirstItemInSideColumn(currentColumn, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    toRightColumn (currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, false) || this.getFirstItemInSideColumn(currentColumn, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    //\n    // Manual Input\n    //\n\n    onMouseDown () {\n      if (!this.manualInput) { return }\n      window.clearTimeout(this.selectionTimer)\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer)\n        if (this.$refs && this.$refs.input) {\n          const nearestSlot = this.getNearestChunkByPos(this.$refs.input.selectionStart || 0)\n          this.debounceSetInputSelection(nearestSlot)\n        }\n      }, 50)\n    },\n\n    keyDownHandler (evt) {\n      if (evt.isComposing || evt.keyCode === 229) {\n        // Skip IME inputs\n        evt.preventDefault()\n        evt.stopPropagation()\n        return false\n      }\n      // Numbers\n      if ((evt.keyCode >= 48 && evt.keyCode <= 57) || (evt.keyCode >= 96 && evt.keyCode <= 105)) {\n        evt.preventDefault()\n        this.keyboardInput(evt.key)\n      // A|P|M\n      } else if ([65, 80, 77].includes(evt.keyCode)) {\n        evt.preventDefault()\n        this.keyboardInput(evt.key, true)\n      // Arrow keys\n      } else if (evt.keyCode >= 37 && evt.keyCode <= 40) {\n        evt.preventDefault()\n        this.clearKbInputLog()\n        this.arrowHandler(evt)\n      // Delete|Backspace\n      } else if (evt.keyCode === 8 || evt.keyCode === 46) {\n        evt.preventDefault()\n        this.clearKbInputLog()\n        this.clearTime()\n      // Tab\n      } else if (evt.keyCode === 9) {\n        this.clearKbInputLog()\n        this.tabHandler(evt)\n      // Prevent any Non-ESC and non-pasting inputs\n      } else if (evt.keyCode !== 27 && !(evt.metaKey || evt.ctrlKey)) {\n        evt.preventDefault()\n      }\n    },\n\n    onCompostionStart (evt) {\n      evt.preventDefault()\n      evt.stopPropagation()\n      this.bakCurrentPos = this.getCurrentTokenChunk()\n      return false\n    },\n\n    onCompostionEnd (evt) {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      const cpsData = evt.data\n      let inputIsCustomApmText = false\n      if (this.has.customApmText) {\n        inputIsCustomApmText = this.isCustomApmText(cpsData)\n      }\n      if (inputIsCustomApmText) {\n        this.setSanitizedValueToSection('apm', inputIsCustomApmText)\n      }\n\n      this.$refs.input.value = this.has.customApmText ? this.customDisplayTime : this.displayTime\n\n      nextTick(() => {\n        if (this.bakCurrentPos) {\n          const bakPos = JSON.parse(JSON.stringify(this.bakCurrentPos))\n          if (inputIsCustomApmText) {\n            bakPos.end = (bakPos.start + cpsData.length)\n          }\n          this.debounceSetInputSelection(bakPos)\n          this.bakCurrentPos = null\n        }\n      })\n      return false\n    },\n\n    pasteHandler (evt) {\n      evt.preventDefault()\n      let pastingText = (evt.clipboardData || window.clipboardData).getData('text')\n      if (this.debugMode) {\n        this.debugLog(`Pasting value \"${pastingText}\" from clipboard`)\n      }\n      if (!pastingText || !pastingText.length) { return }\n\n      // Replace custom AM/PM text (if any)\n      if (this.has.customApmText) {\n        pastingText = this.replaceCustomApmText(pastingText)\n      }\n\n      if (this.inputIsEmpty) {\n        this.readStringValues(pastingText)\n      } else {\n        this.kbInputLog = pastingText.substr(-2, 2)\n        this.setKbInput()\n        this.debounceClearKbLog()\n      }\n    },\n\n    arrowHandler (evt) {\n      const direction = { 37: 'L', 38: 'U', 39: 'R', 40: 'D' }[evt.keyCode]\n      if (direction === 'U' || direction === 'D') {\n        if (this.inputIsEmpty) {\n          this.selectFirstValidValue()\n        } else {\n          const currentChunk = this.getCurrentTokenChunk()\n          if (!currentChunk) {\n            this.selectFirstValidValue()\n            return\n          }\n          const tokenType = currentChunk.type\n          this.getClosestValidItemInCol(tokenType, this[tokenType], direction)\n          const newChunkPos = this.getCurrentTokenChunk()\n          this.debounceSetInputSelection(newChunkPos)\n        }\n      } else if (direction === 'R') {\n        this.toLateralToken(false)\n      } else if (direction === 'L') {\n        this.toLateralToken(true)\n      }\n    },\n\n    tabHandler (evt) {      \n      if (!this.inputIsEmpty && this.tokenChunksPos && this.tokenChunksPos.length) {\n        const currentChunk = this.getCurrentTokenChunk()\n        if (!currentChunk) { return }\n        const firstChunk = this.tokenChunksPos[0]\n        const lastChunk = this.tokenChunksPos[this.tokenChunksPos.length - 1]\n        if ((evt.shiftKey && currentChunk.token !== firstChunk.token) || (!evt.shiftKey && currentChunk.token !== lastChunk.token)) {\n          evt.preventDefault()\n          this.toLateralToken(evt.shiftKey)\n        }\n      }\n    },\n\n    keyboardInput (newChar, isApm = false) {\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk || (currentChunk.type !== 'apm' && isApm) || (currentChunk.type === 'apm' && !isApm)) { return }\n      this.kbInputLog = `${this.kbInputLog.substr(-1)}${newChar}`\n      this.setKbInput()\n      this.debounceClearKbLog()\n    },\n\n    clearKbInputLog () {\n      window.clearTimeout(this.kbInputTimer)\n      this.kbInputLog = ''\n    },\n\n    debounceClearKbLog () {\n      window.clearTimeout(this.kbInputTimer)\n      this.kbInputTimer = window.setTimeout(() => {\n        this.clearKbInputLog()\n      }, this.opts.manualInputTimeout)\n    },\n\n    setKbInput (value) {\n      value = value || this.kbInputLog\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk || !value || !value.length) { return }\n      const chunkType = currentChunk.type\n      const chunkToken = currentChunk.token\n\n      let validValue\n      if (chunkType === 'apm') {\n        if (this.lowerCasedApm(value).includes('a')) {\n          validValue = 'am'\n        } else if (this.lowerCasedApm(value).includes('p')) {\n          validValue = 'pm'\n        }\n        if (validValue) {\n          validValue = chunkToken === 'A' ? validValue.toUpperCase() : validValue\n        }\n      } else {\n        if (this.isValidValue(chunkToken, value)) {\n          validValue = value\n        } else {\n          const lastInputValue = this.formatValue(chunkToken, value.substr(-1))\n          if (this.isValidValue(chunkToken, lastInputValue)) {\n            validValue = lastInputValue\n          }\n        }\n      }\n\n      if (validValue) {\n        this.setSanitizedValueToSection(chunkType, validValue)\n        const newChunkPos = this.getCurrentTokenChunk()\n        this.debounceSetInputSelection(newChunkPos)      \n      }\n      if (this.debugMode) {\n        if (validValue) {\n          this.debugLog(`Successfully set value \"${validValue}\" from latest input \"${value}\" for the \"${chunkType}\" slot`)\n        } else {\n          this.debugLog(`Value \"${value}\" is invalid in the \"${chunkType}\" slot`)\n        }\n      }\n    },\n\n    // Form Autofill\n    onChange () {\n      if (!this.manualInput || !this.$refs || !this.$refs.input) { return }\n      const autoFillValue = this.$refs.input.value || ''\n      if (autoFillValue && autoFillValue.length) {\n        this.readStringValues(autoFillValue)\n      }\n    },\n\n    getNearestChunkByPos (startPos) {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) { return }\n      let nearest\n      let nearestDelta = -1\n      for (let i = 0; i < this.tokenChunksPos.length; i++) {\n        const chunk = JSON.parse(JSON.stringify(this.tokenChunksPos[i]))\n        if (chunk.start === startPos) {\n          return chunk\n        }\n        const delta = Math.abs(chunk.start - startPos)\n        if (nearestDelta < 0) {\n          nearest = chunk\n          nearestDelta = delta\n        } else {\n          if (nearestDelta <= delta) {\n            return nearest\n          }\n          nearestDelta = delta\n          nearest = chunk\n        }\n      }\n      return nearest\n    },\n\n    selectFirstValidValue () {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) { return }\n      const firstSlotType = this.tokenChunksPos[0].type\n      if (firstSlotType === 'hour') {\n        this.getClosestHourItem()\n      } else {\n        this.getClosestValidItemInCol(firstSlotType, this[firstSlotType])\n      }\n      this.selectFirstSlot()\n    },\n\n    getClosestHourItem (currentValue, direction = 'U') {\n      if (!this.validHoursList || !this.validHoursList.length) {\n        if (this.debugMode) {\n          this.debugLog(`No valid hour values found, please check your \"hour-range\" config\\nhour-range: ${JSON.stringify(this.hourRange)}`)\n        }\n        return\n      }\n      if (!currentValue) {\n        this.setManualHour(this.validHoursList[0])\n        return\n      }\n      const currentIndex = this.validHoursList.findIndex(item => {\n        if (!this.baseOn12Hours) {\n          return item === currentValue\n        } else {\n          const valueKey = `${currentValue}${this.lowerCasedApm(this.apm) === 'pm' ? 'p' : 'a'}` \n          return item === valueKey\n        }\n      })\n      let nextIndex\n      if (currentIndex === -1) {\n        nextIndex = 0\n      } else if (direction === 'D') {\n        nextIndex = currentIndex === 0 ? this.validHoursList.length - 1 : currentIndex - 1\n      } else {\n        nextIndex = (currentIndex + 1) % this.validHoursList.length\n      }\n      const nextItem = this.validHoursList[nextIndex]\n      this.setManualHour(nextItem)\n    },\n\n    getClosestValidItemInCol (column, currentValue, direction = 'U') {\n      if (column === 'hour') {\n        this.getClosestHourItem(currentValue, direction)\n      } else {\n        const nextItem = direction === 'D' ? this.prevItem(column, this[column], true) : this.nextItem(column, this[column], true)\n        if (nextItem) {\n          this.select(column, nextItem.getAttribute('data-key'))\n        }\n      }\n    },\n\n    setSanitizedValueToSection (section, inputValue) {\n      if (!section || !this.getTokenByType(section)) { return }\n      // NOTE: Disabled values are allowed here, followed by an 'error' event, though\n      const sanitizedValue = this.sanitizedValue(this.getTokenByType(section), inputValue)\n      this[section] = sanitizedValue\n    },\n\n    setManualHour (nextItem) {\n      if (this.is12hRange(nextItem)) {\n        const hourT = this.match12hRange(nextItem)\n        const apmValue = hourT[2] === 'a' ? 'AM' : 'PM'\n        this.setSanitizedValueToSection('apm', this.apmType === 'a' ? apmValue.toLowerCase() : apmValue)\n        this.setSanitizedValueToSection('hour', hourT[1])\n      } else {\n        this.setSanitizedValueToSection('hour', nextItem)\n      }\n    },\n\n    debounceSetInputSelection ({start = 0, end = 0 }) {\n      nextTick(() => {\n        this.setInputSelectionRange(start, end)\n      })\n      window.clearTimeout(this.selectionTimer)\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer)\n        // Double-check selection for 12hr format\n        if (this.$refs.input && (this.$refs.input.selectionStart !== start || this.$refs.input.selectionEnd !== end)) {\n          this.setInputSelectionRange(start, end)\n        }\n      }, 30)\n    },\n\n    setInputSelectionRange (start, end) {\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.setSelectionRange(start, end)\n      }\n    },\n\n    getCurrentTokenChunk () {\n      return this.getNearestChunkByPos((this.$refs.input && this.$refs.input.selectionStart) || 0)\n    },\n\n    selectFirstSlot () {\n      const firstChunkPos = this.getNearestChunkByPos(0)\n      this.debounceSetInputSelection(firstChunkPos)\n    },\n\n    toLateralToken (toLeft) {\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk) {\n        this.selectFirstValidValue()\n        return\n      }\n      const currentChunkIndex = this.tokenChunksPos.findIndex(chk => chk.token === currentChunk.token)\n      if ((!toLeft && currentChunkIndex >= this.tokenChunksPos.length - 1) || (toLeft && currentChunkIndex === 0)) {\n        if (this.debugMode) {\n          if (toLeft) {\n            this.debugLog('You\\'re in the leftmost slot already')\n          } else {\n            this.debugLog('You\\'re in the rightmost slot already')\n          }\n        }\n        return\n      }\n      const targetSlotPos = toLeft ? this.tokenChunksPos[currentChunkIndex - 1] : this.tokenChunksPos[currentChunkIndex + 1]\n      this.debounceSetInputSelection(targetSlotPos)\n    },\n\n    isCustomApmText (inputData) {\n      if (!inputData || !inputData.length) { return false }\n      if (this.amText && this.amText === inputData) {\n        return this.apmType === 'A' ? 'AM' : 'am'\n      }\n      if (this.pmText && this.pmText === inputData) {\n        return this.apmType === 'A' ? 'PM' : 'pm'\n      }\n      return false\n    },\n\n    replaceCustomApmText (inputString) {\n      if (this.amText && this.amText.length && inputString.includes(this.amText)) {\n        return inputString.replace(new RegExp(this.amText, 'g'), this.apmType === 'A' ? 'AM' : 'am')\n      } else if (this.pmText && this.pmText.length && inputString.includes(this.pmText)) {\n        return inputString.replace(new RegExp(this.pmText, 'g'), this.apmType === 'A' ? 'PM' : 'pm')\n      }\n      return inputString\n    },\n\n    checkDropDirection () {\n      if (!this.$el) { return }\n      let container\n      if (this.containerId && this.containerId.length) {\n        container = document.getElementById(this.containerId)\n        if (!container && this.debugMode) {\n          this.debugLog(`Container with id \"${this.containerId}\" not found. Fallback to document body.`)\n        }\n      }\n      const el = this.$el\n      let spaceDown\n      if (container && container.offsetHeight) {\n        // Valid container found\n        spaceDown = (container.offsetTop + container.offsetHeight) - (el.offsetTop + el.offsetHeight)\n      } else {\n        // Fallback to document body\n        const docHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)\n        spaceDown = docHeight - (el.offsetTop + el.offsetHeight)\n      }\n      this.forceDropOnTop = this.opts.dropOffsetHeight > spaceDown\n    },\n\n    //\n    // Helpers\n    //\n\n    is12hRange (value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value)\n    },\n\n    match12hRange (value) {\n      return value.match(/^(\\d{1,2})(a|p|A|P)$/)\n    },\n\n    isNumber (value) {\n      return !isNaN(parseFloat(value)) && isFinite(value)\n    },\n\n    isBasicType (type) {\n      return CONFIG.BASIC_TYPES.includes(type)\n    },\n\n    lowerCasedApm (apmValue) {\n      return (apmValue || '').toLowerCase()\n    },\n\n    getTokenRegex (token) {\n      switch (token) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})'\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})'\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})'\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})'\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})'\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})'\n        case 'mm':\n          return '([0-5][0-9]|m{2})'\n        case 'ss':\n          return '([0-5][0-9]|s{2})'\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})'\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})'\n        case 'A':\n          return '(AM|PM|A{1})'\n        case 'a':\n          return '(am|pm|a{1})'\n        default:\n          return ''\n      }\n    },\n\n    isEmptyValue (targetToken, testValue) {\n      return (!testValue || !testValue.length) || (testValue && testValue === targetToken)\n    },\n\n    isValidValue (targetToken, testValue) {\n      if (!targetToken || this.isEmptyValue(targetToken, testValue)) { return false }\n      const tokenRegexStr = this.getTokenRegex(targetToken)\n      if (!tokenRegexStr || !tokenRegexStr.length) { return false }\n      return (new RegExp(`^${tokenRegexStr}$`)).test(testValue)\n    },\n\n    sanitizedValue (targetToken, inputValue) {\n      if (this.isValidValue(targetToken, inputValue)) {\n        return inputValue\n      }\n      return ''\n    },\n\n    getTokenType (token) {\n      return this.inUse.types[this.inUse.tokens.indexOf(token)] || ''\n    },\n\n    getTokenByType (type) {\n      return this[`${type}Type`] || ''\n    },\n\n    isMinuteOrSecond (type) {\n      return ['minute', 'second'].includes(type)\n    },\n\n    // Breaking attribution coercion changes in Vue 3\n    // > https://v3.vuejs.org/guide/migration/attribute-coercion.html#overview\n    booleanAttr (isTrue = false) {\n      return isTrue ? true : null\n    },\n\n    debugLog (logText) {\n      if (!logText || !logText.length) { return }\n      let identifier = ''\n      if (this.id) {\n        identifier += `#${this.id}`\n      }\n      if (this.name) {\n        identifier += `[name=${this.name}]`\n      }\n      if (this.inputClass) {\n        let inputClasses = []\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g)\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass)\n        } else if (typeof this.inputClass === 'object') {\n          Object.keys(this.inputClass).forEach(clsName => {\n            if (this.inputClass[clsName]) {\n              inputClasses.push(clsName)\n            }\n          })\n        }\n        for (let inputClass of inputClasses) {\n          if (inputClass && inputClass.trim().length) {\n            identifier += `.${inputClass.trim()}`\n          }\n        }\n      }\n      const finalLogText = `DEBUG: ${logText}${identifier ? `\\n\\t(${identifier})` : '' }`\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText)\n      } else {\n        window.console.log(finalLogText)\n      }\n    }\n  },\n\n  mounted () {\n    window.clearTimeout(this.debounceTimer)\n    window.clearTimeout(this.selectionTimer)\n    window.clearTimeout(this.kbInputTimer)\n    this.renderFormat()\n  },\n\n  beforeUnmount () {\n    window.clearTimeout(this.debounceTimer)\n    window.clearTimeout(this.selectionTimer)\n    window.clearTimeout(this.kbInputTimer)\n  }\n}\n</script>\n\n<template>\n<span class=\"vue__time-picker\" :style=\"inputWidthStyle\">\n  <input type=\"text\" class=\"vue__time-picker-input\" ref=\"input\"\n         :class=\"[inputClass, {'is-empty': inputIsEmpty, 'invalid': hasInvalidInput, 'all-selected': allValueSelected, 'disabled': disabled, 'has-custom-icon': $slots && $slots.icon }]\"\n         :style=\"inputWidthStyle\"\n         :id=\"id\"\n         :name=\"name\"\n         :value=\"inputIsEmpty ? null : customDisplayTime\"\n         :placeholder=\"placeholder ? placeholder : formatString\"\n         :tabindex=\"disabled ? -1 : tabindex\"\n         :disabled=\"booleanAttr(disabled)\"\n         :readonly=\"booleanAttr(!manualInput)\"\n         :autocomplete=\"autocomplete\"\n         @focus=\"onFocus\"\n         @change=\"onChange\"\n         @blur=\"debounceBlur(); blurEvent()\"\n         @mousedown=\"onMouseDown\"\n         @keydown=\"keyDownHandler\"\n         @compositionstart=\"onCompostionStart\"\n         @compositionend=\"onCompostionEnd\"\n         @paste=\"pasteHandler\"\n         @keydown.esc.exact=\"escBlur\" />\n  <div class=\"controls\" v-if=\"showClearBtn || showDropdownBtn\" tabindex=\"-1\">\n    <span v-if=\"!isActive && showClearBtn\" class=\"clear-btn\" tabindex=\"-1\"\n          :class=\"{'has-custom-btn': $slots && $slots.clearButton }\"\n          @click=\"clearTime\">\n      <slot name=\"clearButton\"><span class=\"char\">&times;</span></slot>\n    </span>\n    <span v-if=\"showDropdownBtn\" class=\"dropdown-btn\" tabindex=\"-1\"\n          :class=\"{'has-custom-btn': $slots && $slots.dropdownButton }\"\n          @click=\"setDropdownState(fixedDropdownButton ? !showDropdown : true, true)\"\n          @mousedown=\"keepFocusing\">\n      <slot name=\"dropdownButton\"><span class=\"char\">&dtrif;</span></slot>\n    </span>\n  </div>\n  <div class=\"custom-icon\" v-if=\"$slots && $slots.icon\"><slot name=\"icon\"></slot></div>\n  <div class=\"time-picker-overlay\" v-if=\"showDropdown\" @click=\"toggleActive\" tabindex=\"-1\"></div>\n  <div class=\"dropdown\" v-show=\"showDropdown\" tabindex=\"-1\"\n       :class=\"[dropdownDirClass]\" :style=\"inputWidthStyle\"\n       @mouseup=\"keepFocusing\" @click.stop=\"\">\n    <div class=\"select-list\" :style=\"inputWidthStyle\" tabindex=\"-1\">\n      <!-- Common Keyboard Support: less event listeners -->\n      <template v-if=\"!advancedKeyboard\">\n        <template v-for=\"column in columnsSequence\" :key=\"column\">\n          <ul v-if=\"column === 'hour'\" class=\"hours\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"hourLabelText\"></li>\n            <template v-for=\"(hr, hIndex) in hours\" :key=\"hIndex\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('hour', hr))\"\n                  :class=\"{active: hour === hr}\"\n                  :disabled=\"booleanAttr(isDisabled('hour', hr))\"\n                  :data-key=\"hr\"\n                  v-text=\"hr\"\n                  @click=\"select('hour', hr)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'minute'\" class=\"minutes\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"minuteLabelText\"></li>\n            <template v-for=\"(m, mIndex) in minutes\" :key=\"mIndex\">\n              <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabled('minute', m))\"\n                  :class=\"{active: minute === m}\"\n                  :disabled=\"booleanAttr(isDisabled('minute', m))\"\n                  :data-key=\"m\"\n                  v-text=\"m\"\n                  @click=\"select('minute', m)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'second'\" class=\"seconds\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"secondLabelText\"></li>\n            <template v-for=\"(s, sIndex) in seconds\" :key=\"sIndex\">\n              <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabled('second', s))\"\n                  :class=\"{active: second === s}\"\n                  :disabled=\"booleanAttr(isDisabled('second', s))\"\n                  :data-key=\"s\"\n                  v-text=\"s\"\n                  @click=\"select('second', s)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'apm'\" class=\"apms\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"apmLabelText\"></li>\n            <template v-for=\"(a, aIndex) in apms\" :key=\"aIndex\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('apm', a))\"\n                  :class=\"{active: apm === a}\"\n                  :disabled=\"booleanAttr(isDisabled('apm', a))\"\n                  :data-key=\"a\"\n                  v-text=\"apmDisplayText(a)\"\n                  @click=\"select('apm', a)\"></li>\n            </template>\n          </ul>\n        </template>\n      </template><!-- / Common Keyboard Support -->\n\n      <!--\n        Advanced Keyboard Support\n        Addeds hundreds of additional event lisenters\n      -->\n      <template v-if=\"advancedKeyboard\">\n        <template v-for=\"column in columnsSequence\" :key=\"column\">\n          <ul v-if=\"column === 'hour'\" class=\"hours\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"hourLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(hr, hIndex) in hours\" :key=\"hIndex\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('hour', hr))\"\n                  :class=\"{active: hour === hr}\"\n                  :tabindex=\"isDisabled('hour', hr) ? -1 : tabindex\"\n                  :data-key=\"hr\"\n                  :disabled=\"booleanAttr(isDisabled('hour', hr))\"\n                  v-text=\"hr\"\n                  @click=\"select('hour', hr)\"\n                  @keydown.space.prevent=\"select('hour', hr)\"\n                  @keydown.enter.prevent=\"select('hour', hr)\"\n                  @keydown.up.prevent=\"prevItem('hour', hr)\"\n                  @keydown.down.prevent=\"nextItem('hour', hr)\"\n                  @keydown.left.prevent=\"toLeftColumn('hour')\"\n                  @keydown.right.prevent=\"toRightColumn('hour')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'minute'\" class=\"minutes\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"minuteLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(m, mIndex) in minutes\" :key=\"mIndex\">\n              <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabled('minute', m))\"\n                  :class=\"{active: minute === m}\"\n                  :tabindex=\"isDisabled('minute', m) ? -1 : tabindex\"\n                  :data-key=\"m\"\n                  :disabled=\"booleanAttr(isDisabled('minute', m))\"\n                  v-text=\"m\"\n                  @click=\"select('minute', m)\"\n                  @keydown.space.prevent=\"select('minute', m)\"\n                  @keydown.enter.prevent=\"select('minute', m)\"\n                  @keydown.up.prevent=\"prevItem('minute', m)\"\n                  @keydown.down.prevent=\"nextItem('minute', m)\"\n                  @keydown.left.prevent=\"toLeftColumn('minute')\"\n                  @keydown.right.prevent=\"toRightColumn('minute')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'second'\" class=\"seconds\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"secondLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(s, sIndex) in seconds\" :key=\"sIndex\">\n              <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabled('second', s))\"\n                  :class=\"{active: second === s}\"\n                  :tabindex=\"isDisabled('second', s) ? -1 : tabindex\"\n                  :data-key=\"s\"\n                  :disabled=\"booleanAttr(isDisabled('second', s))\"\n                  v-text=\"s\"\n                  @click=\"select('second', s)\"\n                  @keydown.space.prevent=\"select('second', s)\"\n                  @keydown.enter.prevent=\"select('second', s)\"\n                  @keydown.up.prevent=\"prevItem('second', s)\"\n                  @keydown.down.prevent=\"nextItem('second', s)\"\n                  @keydown.left.prevent=\"toLeftColumn('second')\"\n                  @keydown.right.prevent=\"toRightColumn('second')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'apm'\" class=\"apms\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"apmLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(a, aIndex) in apms\" :key=\"aIndex\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('apm', a))\"\n                  :class=\"{active: apm === a}\"\n                  :tabindex=\"isDisabled('apm', a) ? -1 : tabindex\"\n                  :data-key=\"a\"\n                  :disabled=\"booleanAttr(isDisabled('apm', a))\"\n                  v-text=\"apmDisplayText(a)\"\n                  @click=\"select('apm', a)\"\n                  @keydown.space.prevent=\"select('apm', a)\"\n                  @keydown.enter.prevent=\"select('apm', a)\"\n                  @keydown.up.prevent=\"prevItem('apm', a)\"\n                  @keydown.down.prevent=\"nextItem('apm', a)\"\n                  @keydown.left.prevent=\"toLeftColumn('apm')\"\n                  @keydown.right.prevent=\"toRightColumn('apm')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n        </template>\n      </template><!-- / Advanced Keyboard Support -->\n    </div>\n  </div>\n</span>\n</template>\n\n<style lang=\"css\">\n.vue__time-picker {\n  display: inline-block;\n  position: relative;\n  font-size: 1em;\n  width: 10em;\n  font-family: sans-serif;\n  vertical-align: middle;\n}\n\n.vue__time-picker * {\n  box-sizing: border-box;\n}\n\n.vue__time-picker input.vue__time-picker-input {\n  border: 1px solid #d2d2d2;\n  width: 10em;\n  height: 2.2em;\n  padding: 0.3em 0.5em;\n  font-size: 1em;\n}\n\n.vue__time-picker input.has-custom-icon {\n  padding-left: 1.8em;\n}\n\n.vue__time-picker input.vue__time-picker-input.invalid:not(.skip-error-style) {\n  border-color: #cc0033;\n  outline-color: #cc0033;\n}\n\n.vue__time-picker input.vue__time-picker-input:disabled,\n.vue__time-picker input.vue__time-picker-input.disabled {\n  color: #d2d2d2;\n}\n\n.vue__time-picker .controls {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  z-index: 3;\n\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-end;\n  align-items: stretch;\n\n  /* Prevent browser focusing on the controls layer */\n  pointer-events: none;\n}\n\n.vue__time-picker .controls > * {\n  cursor: pointer;\n  \n  width: auto;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n\n  padding: 0 0.35em;\n\n  color: #d2d2d2;\n  line-height: 100%;\n  font-style: normal;\n\n  /* Resume pointer-events on children components */\n  pointer-events: initial;\n\n  transition: color .2s, opacity .2s;\n}\n\n.vue__time-picker .controls > *:hover {\n  color: #797979;\n}\n\n.vue__time-picker .controls > *:focus,\n.vue__time-picker .controls > *:active {\n  outline: 0;\n}\n\n.vue__time-picker .controls .char {\n  font-size: 1.1em;\n  line-height: 100%;\n\n  /* Vertical align fixes for webkit browsers only */\n  -webkit-margin-before: -0.15em;\n}\n\n.vue__time-picker .custom-icon {\n  z-index: 2;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 1.8em;\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n\n  /* pass down mouse events to the <input> underneath */\n  pointer-events: none;\n}\n\n.vue__time-picker .custom-icon img,\n.vue__time-picker .custom-icon svg,\n.vue__time-picker .controls img,\n.vue__time-picker .controls svg {\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  border: 0;\n  outline: 0;\n  max-width: 1em;\n  height: auto;\n}\n\n.vue__time-picker .time-picker-overlay {\n  z-index: 4;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.vue__time-picker .dropdown {\n  position: absolute;\n  z-index: 5;\n  top: calc(2.2em + 2px);\n  left: 0;\n  background: #fff;\n  box-shadow: 0 1px 6px rgba(0,0,0,0.15);\n  width: 10em;\n  height: 10em;\n  font-weight: normal;\n}\n\n.vue__time-picker .dropdown.drop-up {\n  top: auto;\n  bottom: calc(2.2em + 1px);\n}\n\n.vue__time-picker .dropdown .select-list {\n  width: 10em;\n  height: 10em;\n  overflow: hidden;\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: space-between;\n}\n\n.vue__time-picker .dropdown .select-list:focus,\n.vue__time-picker .dropdown .select-list:active {\n  outline: 0;\n}\n\n.vue__time-picker .dropdown ul {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  outline: 0;\n\n  flex: 1 1 0.00001px;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.vue__time-picker .dropdown ul.minutes,\n.vue__time-picker .dropdown ul.seconds,\n.vue__time-picker .dropdown ul.apms{\n  border-left: 1px solid #fff;\n}\n\n.vue__time-picker .dropdown ul li {\n  list-style: none;\n  text-align: center;\n  padding: 0.3em 0;\n  color: #161616;\n}\n\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):hover,\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):focus {\n  background: rgba(0,0,0,.08);\n  color: #161616;\n  cursor: pointer;\n}\n\n.vue__time-picker .dropdown ul li:not([disabled]).active,\n.vue__time-picker .dropdown ul li:not([disabled]).active:hover,\n.vue__time-picker .dropdown ul li:not([disabled]).active:focus {\n  background: #41B883;\n  color: #fff;\n}\n\n.vue__time-picker .dropdown ul li[disabled],\n.vue__time-picker .dropdown ul li[disabled]:hover {\n  background: transparent;\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.vue__time-picker .dropdown .hint {\n  color: #a5a5a5;\n  cursor: default;\n  font-size: 0.8em;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}