{"ast":null,"code":"export default {\n  data() {\n    return {\n      columns: [{\n        title: \"Title\",\n        data: \"title\",\n        sortable: true\n      }\n      // ... more columns\n      ],\n      eventsFromAPI: [],\n      sortOrder: null,\n      sortColumn: null\n    };\n  },\n  computed: {\n    filteredData() {\n      // Implement filtering/search logic here if needed\n      return this.eventsFromAPI.slice().sort(this.sortComparator);\n    }\n  },\n  methods: {\n    fetchEvents() {\n      // ... (your API fetching logic)\n    },\n    sort(column) {\n      // Implement sorting logic, update sortOrder and sortColumn\n    },\n    sortComparator(a, b) {\n      // Implement comparison logic based on sortColumn and sortOrder\n    }\n  }\n};","map":{"version":3,"names":["data","columns","title","sortable","eventsFromAPI","sortOrder","sortColumn","computed","filteredData","slice","sort","sortComparator","methods","fetchEvents","column","a","b"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\Working System\\clinicsystem\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n  <table>\n    <thead>\n      <tr>\n        <th v-for=\"(column, index) in columns\" :key=\"index\">\n          {{ column.title }}\n          <button v-if=\"column.sortable\" @click=\"sort(column.data)\">\n            </button>\n        </th> \n      </tr>\n    </thead>\n    <tbody>\n      <tr v-for=\"(row, index) in filteredData\" :key=\"index\">\n        <td v-for=\"(column, index) in columns\" :key=\"index\">\n          {{ row[column.data] }} \n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      columns: [\n        { title: \"Title\", data: \"title\", sortable: true },\n        // ... more columns\n      ],\n      eventsFromAPI: [],\n      sortOrder: null,\n      sortColumn: null,\n    }\n  },\n  computed: {\n    filteredData() {\n      // Implement filtering/search logic here if needed\n      return this.eventsFromAPI.slice().sort(this.sortComparator);\n    }\n  },\n  methods: {\n    fetchEvents() {\n      // ... (your API fetching logic)\n    },\n    sort(column) {\n      // Implement sorting logic, update sortOrder and sortColumn\n    },\n    sortComparator(a, b) {\n       // Implement comparison logic based on sortColumn and sortOrder\n    }\n  }\n}\n</script>\n"],"mappings":"AAsBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,CACP;QAAEC,KAAK,EAAE,OAAO;QAAEF,IAAI,EAAE,OAAO;QAAEG,QAAQ,EAAE;MAAK;MAChD;MAAA,CACD;MACDC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAE,IAAI;MACfC,UAAU,EAAE;IACd;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb;MACA,OAAO,IAAI,CAACJ,aAAa,CAACK,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAACC,cAAc,CAAC;IAC7D;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ;IAAA,CACD;IACDH,IAAIA,CAACI,MAAM,EAAE;MACX;IAAA,CACD;IACDH,cAAcA,CAACI,CAAC,EAAEC,CAAC,EAAE;MAClB;IAAA;EAEL;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}