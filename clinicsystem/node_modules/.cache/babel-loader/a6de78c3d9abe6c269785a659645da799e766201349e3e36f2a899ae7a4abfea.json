{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nimport _imports_0 from '../assets/icon.png';\nconst _hoisted_1 = {\n  class: \"demo-app\"\n};\nconst _hoisted_2 = {\n  class: \"demo-app-sidebar\",\n  style: {\n    \"display\": \"flex\",\n    \"flex-direction\": \"column\",\n    \"justify-content\": \"space-between\"\n  }\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"text-center\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"Ears Nose and Throat\",\n  style: {\n    \"width\": \"100px\",\n    \"height\": \"auto\"\n  },\n  class: \"img-fluid\"\n})], -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"margin\": \"50px 5px 10px 5px\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Instructions\"), /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createElementVNode(\"li\", null, \"Select dates and you will be prompted to create a new event\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"Drag, drop, and resize events\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"Click an event to delete it\")])], -1 /* HOISTED */);\nconst _hoisted_5 = {\n  style: {\n    \"margin\": \"20px 5px 10px 5px\"\n  }\n};\nconst _hoisted_6 = {\n  class: \"event-list\"\n};\nconst _hoisted_7 = {\n  class: \"text-center\",\n  style: {\n    \"margin\": \"10px 5px 10px 5px\"\n  }\n};\nconst _hoisted_8 = {\n  class: \"demo-app-main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  const _component_FullCalendar = _resolveComponent(\"FullCalendar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", null, [_hoisted_3, _hoisted_4, _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"h2\", null, \"All Events (\" + _toDisplayString(_ctx.allevents.length) + \")\", 1 /* TEXT */), _createElementVNode(\"ul\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.allevents, event => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: event.id\n    }, [_createElementVNode(\"b\", null, _toDisplayString(event.start), 1 /* TEXT */), _createElementVNode(\"i\", null, _toDisplayString(event.title), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _createCommentVNode(\" Admin Login \"), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_router_link, {\n    to: \"/admin-login\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Admin Login\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_router_view)])]), _createElementVNode(\"div\", _hoisted_8, [_createVNode(_component_FullCalendar, {\n    class: \"demo-app-calendar\",\n    options: _ctx.calendarOptions\n  }, {\n    eventContent: _withCtx(arg => [_createElementVNode(\"b\", null, _toDisplayString(arg.start), 1 /* TEXT */), _createElementVNode(\"i\", null, _toDisplayString(arg.event.title), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"options\"])])]);\n}","map":{"version":3,"names":["_imports_0","class","style","_createElementVNode","src","alt","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","_ctx","allevents","length","_hoisted_6","_Fragment","_renderList","event","key","id","start","title","_createCommentVNode","_hoisted_7","_createVNode","_component_router_link","to","default","_withCtx","_createTextVNode","_","_component_router_view","_hoisted_8","_component_FullCalendar","options","calendarOptions","eventContent","arg"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\clinicsystem\\src\\views\\ClientView.vue"],"sourcesContent":["<!-- ClientView.vue -->\n\n<script>\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport listPlugin from '@fullcalendar/list'\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\n\n\n\nlet eventGuid = 0\nexport function createEventId() {\n  return String(eventGuid++)\n}\n\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\n\nimport { ref } from 'vue';\n\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n\n  data: function () {\n    return {\n      calendarOptions: {\n        plugins: [\n          listPlugin,\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        },\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop, // Add eventDrop handler\n        eventResize: this.handleEventResize\n\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      // allevents: []\n    }\n  },\n\n  mounted() {\n    this.fetchEvents();\n  },\n\n  methods: {\n\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n          let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => ({\n            id: event.id,\n            title: event.title,\n            start: event.start,\n            user: event.user,\n            end: event.end,\n            allDay: event.allDay\n          }));\n\n          // Combine events from local storage and API\n          let allEvents = eventsFromLocalStorage.concat(eventsFromAPI);\n\n          // Update the calendar events with combined events\n          this.$set(this.calendarOptions, 'events', allEvents);\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      let title = prompt('Please enter a new title for your event')\n      let calendarApi = selectInfo.view.calendar\n\n      calendarApi.unselect() // clear date selection\n\n      if (title) {\n\n        console.log(formatDatetime(new Date().toISOString()));\n\n        axios.post('http://localhost:8000/api/events', {\n\n          title: title,\n          start: formatDatetime(selectInfo.startStr),\n          end: formatDatetime(selectInfo.endStr),\n          user: 'clientApproval',\n          allDay: selectInfo.allDay\n        })\n          .then(response => {\n            // Handle success\n            console.log('Event added:', response.data);\n            console.log('Event added ID:', response.data.id);\n            this.allevents.push(response.data);\n\n            let newEvent = {\n              id: response.data.id,\n              title: response.data.title,\n              start: response.data.start,\n              end: response.data.end,\n              allDay: response.data.allDay\n            };\n\n            // this.allevents.push(newEvent);\n            // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n            // Get existing events from local storage or initialize an empty array\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            events.push(newEvent); // Append the new event to existing events\n            localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n            calendarApi.addEvent(newEvent);\n            // Fetch events again to update the calendar\n            this.fetchEvents();\n\n          })\n          .catch(error => {\n            // Handle error\n            console.error('Error adding event:', error.response.data);\n          });\n      }\n    },\n\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`)\n          .then(response => {\n            // this.fetchEvents(); // Refresh events after deleting\n            console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n            // Fetch events from local storage\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            console.log('Events before deletion:', events);\n            // Filter out the event to be deleted\n            const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n            console.log('Updated events after deletion:', updatedEvents);\n            // Store the updated events back into local storage\n            localStorage.setItem('events', JSON.stringify(updatedEvents));\n            this.fetchEvents();\n\n          })\n          .catch(error => {\n            \n            console.error('Error deleting event:', error);\n          });\n      }\n    },\n\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      })\n        .then(response => {\n          console.log('Event updated:', response.data);\n\n          // Retrieve events from local storage\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          console.log('Existing events:', events);\n\n          // Find index of event being updated\n          const eventIndex = events.findIndex(event => event.id === eventId);\n          console.log('Event index:', eventIndex);\n\n          // Update event if found\n          if (eventIndex !== -1) {\n            events[eventIndex].start = response.data.start;\n            events[eventIndex].end = response.data.end;\n\n            // Save updated events to local storage\n            localStorage.setItem('events', JSON.stringify(events));\n            console.log('Updated events:', events);\n          } else {\n            // If event is not found, it might be a new event, handle accordingly\n            console.log('Event not found in local storage. Adding new event...');\n            events.push(response.data);\n            localStorage.setItem('events', JSON.stringify(events));\n            console.log('Updated events:', events);\n          }\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n\n\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      })\n        .then(response => {\n          console.log('Event updated Resize:', response.data);\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  },\n\n\n}\n</script>\n\n\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-sidebar' style=\"display: flex; flex-direction: column; justify-content: space-between;\">\n  <div>\n    <div class=\"text-center\">\n      <img src=\"../assets/icon.png\" alt=\"Ears Nose and Throat\" style=\"width: 100px; height: auto; \" class=\"img-fluid\">\n    </div>\n    <div style=\"margin: 50px 5px 10px 5px ;\">\n      <h2>Instructions</h2>\n      <ul>\n        <li>Select dates and you will be prompted to create a new event</li>\n        <li>Drag, drop, and resize events</li>\n        <li>Click an event to delete it</li>\n      </ul>\n    </div>\n\n    <div style=\"margin: 20px 5px 10px 5px ;\">\n      <h2>All Events ({{ allevents.length }})</h2>\n      <ul class=\"event-list\">\n          <li v-for='event in allevents' :key='event.id'>\n              <b>{{ event.start }}</b>\n              <i>{{ event.title }}</i>\n          </li>\n      </ul>\n    </div>\n  </div>\n\n  <!-- Admin Login -->\n  <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n    <router-link to=\"/admin-login\">Admin Login</router-link>\n    <router-view></router-view>\n  </div>\n</div>\n\n\n    <div class='demo-app-main'>\n      <FullCalendar class='demo-app-calendar' :options='calendarOptions'>\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.start }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n    </div>\n  </div>\n</template>\n\n\n\n<style lang='css'>\n\n\nhtml, body {\n    height: 100vh;\n    margin: 0;\n    padding: 0;\n    \n   /* overflow: hidden; Disable scrolling of the entire page */\n}\n@media (max-width: 650px) {\n    ul {\n      margin: 0;\n      /* padding: 0 0 0 1.5em; */\n      font-size: 10px;\n    }\n\n    li {\n      /* margin: 1.5em 0; */\n      padding: 0;\n      font-size: 10px;\n    }\n  }\n\n\n  h2 {\n    margin: 0;\n    font-size: 16px;\n  }\n\n  ul {\n    margin: 0;\n    /* padding: 0 0 0 1.5em; */\n  }\n\n  li {\n    /* margin: 1.5em 0; */\n    padding: 0;\n  }\n\n  b {\n    /* used for event dates/times */\n    margin-right: 3px;\n    color: black;\n  }\n\n  i {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  .demo-app {\n    display: flex;\n    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n    font-size: 14px;\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n  }\n\n\n  .demo-app-sidebar {\n    padding: 10px;\n    width: 300px;\n    line-height: 1.5;\n    /* background: #eaf9ff; */\n    background-color: #e6e7e9;\n    border-right: 1px solid #d3e2e8;\n    /* overflow-y: auto; */\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n    \n}\n  .demo-app-main {\n    flex-grow: 1;\n    padding: 3em;\n  }\n\n    /* Adjust the height of FullCalendar to fit within the main content area */\n.demo-app-calendar {\n    height: calc(100vh - 6em); /* Adjust as needed, considering header/footer heights */\n}\n\n.event-list {\n    max-height: 200px; /* Adjust as needed */\n    overflow-y: auto;\n    margin: 0;\n    padding: 0 1.5em; /* Adjust as needed */\n    \n}\n\n  .fc {\n    /* the calendar root */\n    /* max-width: 1100px; */\n    margin: 0 auto;\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n  }\n  .fc-col-header-cell-cushion{\n    text-decoration: none;\n    color: black;\n  }\n  .fc-scrollgrid .fc-daygrid-day-number{\n    text-decoration: none;\n    color: black;\n\n  }\n  .fc-event{\n    color: white;\n  }\n\n  </style>\n"],"mappings":";OAgRWA,UAAwB;;EAJ5BC,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC,kBAAkB;EAACC,KAA8E,EAA9E;IAAA;IAAA;IAAA;EAAA;;gCAE9BC,mBAAA,CAEM;EAFDF,KAAK,EAAC;AAAa,I,aACtBE,mBAAA,CAAgH;EAA3GC,GAAwB,EAAxBJ,UAAwB;EAACK,GAAG,EAAC,sBAAsB;EAACH,KAAoC,EAApC;IAAA;IAAA;EAAA,CAAoC;EAACD,KAAK,EAAC;;gCAEtGE,mBAAA,CAOM;EAPDD,KAAmC,EAAnC;IAAA;EAAA;AAAmC,I,aACtCC,mBAAA,CAAqB,YAAjB,cAAY,G,aAChBA,mBAAA,CAIK,a,aAHHA,mBAAA,CAAoE,YAAhE,6DAA2D,G,aAC/DA,mBAAA,CAAsC,YAAlC,+BAA6B,G,aACjCA,mBAAA,CAAoC,YAAhC,6BAA2B,E;;EAI9BD,KAAmC,EAAnC;IAAA;EAAA;AAAmC;;EAElCD,KAAK,EAAC;AAAY;;EAUrBA,KAAK,EAAC,aAAa;EAACC,KAAmC,EAAnC;IAAA;EAAA;;;EAOlBD,KAAK,EAAC;AAAe;;;;;uBAlC5BK,mBAAA,CA0CM,OA1CNC,UA0CM,GAzCJJ,mBAAA,CA8BE,OA9BFK,UA8BE,GA7BJL,mBAAA,CAsBM,cArBJM,UAEM,EACNC,UAOM,EAENP,mBAAA,CAQM,OARNQ,UAQM,GAPJR,mBAAA,CAA4C,YAAxC,cAAY,GAAAS,gBAAA,CAAGC,IAAA,CAAAC,SAAS,CAACC,MAAM,IAAG,GAAC,iBACvCZ,mBAAA,CAKK,MALLa,UAKK,I,kBAJDV,mBAAA,CAGKW,SAAA,QAjSfC,WAAA,CA8R8BL,IAAA,CAAAC,SAAS,EAAlBK,KAAK;yBAAhBb,mBAAA,CAGK;MAH2Bc,GAAG,EAAED,KAAK,CAACE;QACvClB,mBAAA,CAAwB,WAAAS,gBAAA,CAAlBO,KAAK,CAACG,KAAK,kBACjBnB,mBAAA,CAAwB,WAAAS,gBAAA,CAAlBO,KAAK,CAACI,KAAK,iB;wCAM7BC,mBAAA,iBAAoB,EACpBrB,mBAAA,CAGM,OAHNsB,UAGM,GAFJC,YAAA,CAAwDC,sBAAA;IAA3CC,EAAE,EAAC;EAAc;IAxSlCC,OAAA,EAAAC,QAAA,CAwSmC,MAAW,CAxS9CC,gBAAA,CAwSmC,aAAW,E;IAxS9CC,CAAA;MAySIN,YAAA,CAA2BO,sBAAA,E,KAK3B9B,mBAAA,CAOM,OAPN+B,UAOM,GANJR,YAAA,CAKeS,uBAAA;IALDlC,KAAK,EAAC,mBAAmB;IAAEmC,OAAO,EAAEvB,IAAA,CAAAwB;;IAC/BC,YAAY,EAAAR,QAAA,CACLS,GADU,KAChCpC,mBAAA,CAAsB,WAAAS,gBAAA,CAAhB2B,GAAG,CAACjB,KAAK,kBACfnB,mBAAA,CAA4B,WAAAS,gBAAA,CAAtB2B,GAAG,CAACpB,KAAK,CAACI,KAAK,iB;IAlT/BS,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}