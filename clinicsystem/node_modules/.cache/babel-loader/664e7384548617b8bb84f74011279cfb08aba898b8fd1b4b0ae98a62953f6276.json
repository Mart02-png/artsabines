{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5';\nimport * as bootstrap from 'bootstrap';\nlet eventGuid = 0;\nexport function createEventId() {\n  return String(eventGuid++);\n}\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\nfunction checkEventExistence(eventId, events) {\n  // Check if eventId exists in stored events\n  return events.some(event => event.id === eventId);\n}\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n  data: function () {\n    return {\n      modal: null,\n      newEventTitle: '',\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1); // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [bootstrap5Plugin, listPlugin, dayGridPlugin, timeGridPlugin, interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5',\n        // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop,\n        // Add eventDrop handler\n        eventResize: this.handleEventResize\n\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: []\n    };\n  },\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n  },\n  methods: {\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events').then(response => {\n        let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => {\n          let color;\n          switch (event.user) {\n            case 'clientApproval':\n              color = '#007FFF';\n              break;\n            case 'clientApproved':\n              color = '#FF9E00';\n              break;\n            case 'admin':\n              color = '#FF2D00';\n              break;\n            default:\n              // Handle default case if needed\n              break;\n          }\n          return {\n            id: event.id,\n            title: event.title,\n            user: event.user,\n            start: event.start,\n            end: event.end,\n            allDay: event.allDay,\n            color: color // Assign color based on user type\n          };\n        });\n\n        // Update local events with API events and update user if IDs match\n        eventsFromLocalStorage.forEach(localEvent => {\n          let correspondingAPIEvent = response.data.find(apiEvent => apiEvent.id === localEvent.id);\n          if (correspondingAPIEvent) {\n            if (correspondingAPIEvent.user !== localEvent.user) {\n              console.log(\"Delete Approved clients:::\", correspondingAPIEvent.id, correspondingAPIEvent.user, \"  :  \", localEvent.id, localEvent.user);\n              const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n              console.log('Updated events after deletion:', updatedEvents);\n              // Store the updated events back into local storage\n              localStorage.setItem('events', JSON.stringify(updatedEvents));\n              this.fetchEvents();\n            }\n          }\n        });\n\n        // console.log('Events before deletion:', eventsFromLocalStorage);\n\n        let allEvents = eventsFromAPI.concat(eventsFromLocalStorage);\n        this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n    saveChanges(selectedInfo) {\n      console.log(\"Successfully saved\");\n      if (this.newEventTitle.trim() !== '') {\n        console.log(\"Successfully saved\", this.newEventTitle);\n        console.log(\"Select Info:\", this.selectedInfo); // Access selectedInfo here\n\n        let calendarApi = selectedInfo.view.calendar;\n        calendarApi.unselect(); // clear date selection\n\n        if (this.newEventTitle.trim() !== '') {\n          // Format start and end dates\n          let start = formatDatetime(selectedInfo.startStr);\n          let end = formatDatetime(selectedInfo.endStr);\n          axios.post('http://localhost:8000/api/events', {\n            title: this.newEventTitle,\n            start: start,\n            end: end,\n            user: 'clientApproval',\n            allDay: selectedInfo.allDay\n          }).then(response => {\n            // Handle success\n            console.log('Event added:', response.data);\n            this.allevents.push(response.data);\n            let newEvent = {\n              id: response.data.id,\n              title: response.data.title,\n              user: response.data.user,\n              start: response.data.start,\n              end: response.data.end,\n              allDay: response.data.allDay\n            };\n\n            // this.allevents.push(newEvent);\n            // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n            // Get existing events from local storage or initialize an empty array\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            events.push(newEvent); // Append the new event to existing events\n            localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n            calendarApi.addEvent(newEvent);\n            // Fetch events again to update the calendar\n            this.fetchEvents();\n\n            // Hide the modal\n            this.modal.hide();\n            this.newEventTitle = '';\n          }).catch(error => {\n            // Handle error\n            console.error('Error adding event:', error.response.data);\n          });\n        }\n      } else {\n        // Alert the user if the input field is empty\n        alert('Please enter a title for the event');\n      }\n    },\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      this.modal.show();\n      this.selectedInfo = selectInfo; // Store selectInfo in selectedInfo\n      // let title = prompt('Please enter a new title for your event')\n      // let calendarApi = selectInfo.view.calendar;\n\n      // calendarApi.unselect() // clear date selection\n\n      // if (title) {\n\n      //   // Format start and end dates\n      //   let start = formatDatetime(selectInfo.startStr);\n      //   let end = formatDatetime(selectInfo.endStr);\n      //   console.log(start, end);\n      //   // console.log(formatDatetime(new Date().toISOString()));\n\n      //   axios.post('http://localhost:8000/api/events', {\n\n      //     title: title,\n      //     start: start,\n      //     end: end,\n      //     user: 'clientApproval',\n      //     allDay: selectInfo.allDay\n      //   })\n      //     .then(response => {\n      //       // Handle success\n      //       console.log('Event added:', response.data);\n      //       this.allevents.push(response.data);\n\n      //       let newEvent = {\n      //         id: response.data.id,\n      //         title: response.data.title,\n      //         user: response.data.user,\n      //         start: response.data.start,\n      //         end: response.data.end,\n      //         allDay: response.data.allDay,\n\n      //       };\n\n      //       // this.allevents.push(newEvent);\n      //       // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n      //       // Get existing events from local storage or initialize an empty array\n      //       let events = JSON.parse(localStorage.getItem('events')) || [];\n      //       events.push(newEvent); // Append the new event to existing events\n      //       localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n      //       calendarApi.addEvent(newEvent);\n      //       // Fetch events again to update the calendar\n      //       this.fetchEvents();\n\n      //     })\n      //     .catch(error => {\n      //       // Handle error\n      //       console.error('Error adding event:', error.response.data);\n      //     });\n      // }\n    },\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`).then(response => {\n          // this.fetchEvents(); // Refresh events after deleting\n          console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n          // Fetch events from local storage\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          // console.log('Events before deletion:', events);\n          // Filter out the event to be deleted\n          const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n          console.log('Updated events after deletion:', updatedEvents);\n          // Store the updated events back into local storage\n          localStorage.setItem('events', JSON.stringify(updatedEvents));\n          this.fetchEvents();\n        }).catch(error => {\n          console.error('Error deleting event:', error);\n        });\n      }\n    },\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n\n      // Retrieve events from local storage\n      const events = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Log the id of each event in the events array\n      events.forEach(event => {\n        // console.log(\"Event ID:\", event.id);\n        if (event.id === eventId) {\n          console.log(\"Event ID:\", event.id, eventId, \"event.id, eventId\");\n        } else {\n          console.log(\"Event ID:\", event.id, eventId, \"ERROR\");\n        }\n      });\n      // Check if eventId exists in local storage\n      const eventExistsInLocalStorage = checkEventExistence(eventId, events);\n      if (eventExistsInLocalStorage) {\n        console.log(\"Event with ID\", eventId, \"already exists in local storage. Skipping PUT request.\");\n        return; // Skip making the PUT request\n      } else {\n        console.log(\"Event with ID\", eventId, \"NOT  NOT exists in local storage. Skipping PUT request.\");\n      }\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      }).then(response => {\n        console.log('response.data:', response.data);\n        let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n        console.log('eventsFromLocalStorage:', eventsFromLocalStorage);\n\n        // // Retrieve events from local storage\n        // let events = JSON.parse(localStorage.getItem('events')) || [];\n        // console.log('Existing events:', events);\n\n        // // Find index of event being updated\n        // const eventIndex = events.findIndex(event => event.id === eventId);\n        // console.log('Event index:', eventIndex);\n\n        // // Update event if found\n        // if (eventIndex !== -1) {\n        //   events[eventIndex].start = response.data.start;\n        //   events[eventIndex].end = response.data.end;\n\n        //   // Save updated events to local storage\n        //   localStorage.setItem('events', JSON.stringify(events));\n        //   console.log('Updated events:', events);\n        // } else {\n        //   // If event is not found, it might be a new event, handle accordingly\n        //   console.log('Event not found in local storage. Adding new event...');\n        //   events.push(response.data);\n        //   localStorage.setItem('events', JSON.stringify(events));\n        //   console.log('Else Updated events:', events);\n        // }\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      }).then(response => {\n        console.log('Event updated Resize:', response.data);\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  }\n};","map":{"version":3,"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","axios","bootstrap5Plugin","bootstrap","eventGuid","createEventId","String","formatDatetime","datetimeStr","replace","checkEventExistence","eventId","events","some","event","id","components","data","modal","newEventTitle","calendarOptions","selectAllow","selectionInfo","startDate","start","endDate","end","setSeconds","getSeconds","getDate","plugins","headerToolbar","left","center","right","themeSystem","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","select","handleDateSelect","eventClick","deleteItem","eventsSet","handleEvents","eventDrop","handleEventDrop","eventResize","handleEventResize","allevents","mounted","fetchEvents","Modal","document","getElementById","methods","eventsFromLocalStorage","JSON","parse","localStorage","getItem","get","then","response","eventsFromAPI","filter","user","map","color","title","allDay","forEach","localEvent","correspondingAPIEvent","find","apiEvent","console","log","updatedEvents","setItem","stringify","allEvents","concat","catch","error","handleWeekendsToggle","saveChanges","selectedInfo","trim","calendarApi","view","calendar","unselect","startStr","endStr","post","push","newEvent","addEvent","hide","alert","selectInfo","show","clickInfo","confirm","delete","info","start_formatdate","end_formatdate","eventExistsInLocalStorage","put"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\clinicsystem\\src\\views\\ClientView.vue"],"sourcesContent":["<!-- ClientView.vue -->\n\n<script>\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport listPlugin from '@fullcalendar/list'\n\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5'\nimport * as bootstrap from 'bootstrap';\n\n\nlet eventGuid = 0\nexport function createEventId() {\n  return String(eventGuid++)\n}\n\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\n\nfunction checkEventExistence(eventId, events) {\n  // Check if eventId exists in stored events\n  return events.some(event => event.id === eventId);\n}\n\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n\n  data: function () {\n    return {\n      modal: null,\n      newEventTitle: '',\n\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1);  // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [\n          bootstrap5Plugin,\n          listPlugin,\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5', // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop, // Add eventDrop handler\n        eventResize: this.handleEventResize,\n\n\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: [],\n    }\n  },\n\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n  },\n\n  methods: {\n\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n          let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => {\n            let color;\n            switch (event.user) {\n              case 'clientApproval':\n                color = '#007FFF';\n                break;\n              case 'clientApproved':\n                color = '#FF9E00';\n                break;\n              case 'admin':\n                color = '#FF2D00';\n                break;\n              default:\n                // Handle default case if needed\n                break;\n            }\n            return {\n              id: event.id,\n              title: event.title,\n              user: event.user,\n              start: event.start,\n              end: event.end,\n              allDay: event.allDay,\n              color: color // Assign color based on user type\n\n            };\n\n          });\n\n          // Update local events with API events and update user if IDs match\n          eventsFromLocalStorage.forEach(localEvent => {\n            let correspondingAPIEvent = response.data.find(apiEvent => apiEvent.id === localEvent.id);\n            if (correspondingAPIEvent) {\n\n              if (correspondingAPIEvent.user !== localEvent.user) {\n                console.log(\"Delete Approved clients:::\", correspondingAPIEvent.id, correspondingAPIEvent.user, \"  :  \", localEvent.id, localEvent.user);\n                const updatedEvents = eventsFromLocalStorage.filter(event => event.id !== localEvent.id);\n                console.log('Updated events after deletion:', updatedEvents);\n                // Store the updated events back into local storage\n                localStorage.setItem('events', JSON.stringify(updatedEvents));\n                this.fetchEvents();\n              }\n            }\n          });\n\n          // console.log('Events before deletion:', eventsFromLocalStorage);\n\n          let allEvents = eventsFromAPI.concat(eventsFromLocalStorage);\n\n          this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n    saveChanges(selectedInfo) {\n      console.log(\"Successfully saved\");\n      if (this.newEventTitle.trim() !== '') {\n        console.log(\"Successfully saved\", this.newEventTitle);\n        console.log(\"Select Info:\", this.selectedInfo); // Access selectedInfo here\n\n        let calendarApi = selectedInfo.view.calendar;\n        calendarApi.unselect() // clear date selection\n\n        if (this.newEventTitle.trim() !== '') {\n          // Format start and end dates\n          let start = formatDatetime(selectedInfo.startStr);\n          let end = formatDatetime(selectedInfo.endStr);\n\n          axios.post('http://localhost:8000/api/events', {\n\n            title: this.newEventTitle,\n            start: start,\n            end: end,\n            user: 'clientApproval',\n            allDay: selectedInfo.allDay\n          })\n            .then(response => {\n              // Handle success\n              console.log('Event added:', response.data);\n\n\n              this.allevents.push(response.data);\n\n              let newEvent = {\n                id: response.data.id,\n                title: response.data.title,\n                user: response.data.user,\n                start: response.data.start,\n                end: response.data.end,\n                allDay: response.data.allDay,\n\n              };\n\n              // this.allevents.push(newEvent);\n              // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n              // Get existing events from local storage or initialize an empty array\n              let events = JSON.parse(localStorage.getItem('events')) || [];\n              events.push(newEvent); // Append the new event to existing events\n              localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n              calendarApi.addEvent(newEvent);\n              // Fetch events again to update the calendar\n              this.fetchEvents();\n\n              // Hide the modal\n              this.modal.hide();\n              this.newEventTitle = '';\n\n            })\n            .catch(error => {\n              // Handle error\n              console.error('Error adding event:', error.response.data);\n            });\n        }\n\n      } else {\n        // Alert the user if the input field is empty\n        alert('Please enter a title for the event');\n      }\n    },\n\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      this.modal.show();\n      this.selectedInfo = selectInfo; // Store selectInfo in selectedInfo\n      // let title = prompt('Please enter a new title for your event')\n      // let calendarApi = selectInfo.view.calendar;\n\n      // calendarApi.unselect() // clear date selection\n\n\n      // if (title) {\n\n      //   // Format start and end dates\n      //   let start = formatDatetime(selectInfo.startStr);\n      //   let end = formatDatetime(selectInfo.endStr);\n      //   console.log(start, end);\n      //   // console.log(formatDatetime(new Date().toISOString()));\n\n      //   axios.post('http://localhost:8000/api/events', {\n\n      //     title: title,\n      //     start: start,\n      //     end: end,\n      //     user: 'clientApproval',\n      //     allDay: selectInfo.allDay\n      //   })\n      //     .then(response => {\n      //       // Handle success\n      //       console.log('Event added:', response.data);\n      //       this.allevents.push(response.data);\n\n      //       let newEvent = {\n      //         id: response.data.id,\n      //         title: response.data.title,\n      //         user: response.data.user,\n      //         start: response.data.start,\n      //         end: response.data.end,\n      //         allDay: response.data.allDay,\n\n      //       };\n\n      //       // this.allevents.push(newEvent);\n      //       // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n      //       // Get existing events from local storage or initialize an empty array\n      //       let events = JSON.parse(localStorage.getItem('events')) || [];\n      //       events.push(newEvent); // Append the new event to existing events\n      //       localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n      //       calendarApi.addEvent(newEvent);\n      //       // Fetch events again to update the calendar\n      //       this.fetchEvents();\n\n      //     })\n      //     .catch(error => {\n      //       // Handle error\n      //       console.error('Error adding event:', error.response.data);\n      //     });\n      // }\n    },\n\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`)\n          .then(response => {\n            // this.fetchEvents(); // Refresh events after deleting\n            console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n            // Fetch events from local storage\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            // console.log('Events before deletion:', events);\n            // Filter out the event to be deleted\n            const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n            console.log('Updated events after deletion:', updatedEvents);\n            // Store the updated events back into local storage\n            localStorage.setItem('events', JSON.stringify(updatedEvents));\n            this.fetchEvents();\n\n          })\n          .catch(error => {\n\n            console.error('Error deleting event:', error);\n          });\n      }\n    },\n\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n\n// Retrieve events from local storage\nconst events = JSON.parse(localStorage.getItem('events')) || [];\n\n\n// Log the id of each event in the events array\nevents.forEach(event => {\n  // console.log(\"Event ID:\", event.id);\n  if(event.id === eventId){\n    console.log(\"Event ID:\", event.id, eventId, \"event.id, eventId\");\n  }else{\n    console.log(\"Event ID:\", event.id, eventId, \"ERROR\");\n  }\n});\n  // Check if eventId exists in local storage\n  const eventExistsInLocalStorage = checkEventExistence(eventId, events);\n\n  if (eventExistsInLocalStorage) {\n    console.log(\"Event with ID\", eventId, \"already exists in local storage. Skipping PUT request.\");\n    return; // Skip making the PUT request\n  }else{\n    console.log(\"Event with ID\", eventId, \"NOT  NOT exists in local storage. Skipping PUT request.\");\n    \n  }\n  \n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      })\n        .then(response => {\n         \n          console.log('response.data:', response.data);\n          let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n          console.log('eventsFromLocalStorage:', eventsFromLocalStorage);\n\n          // // Retrieve events from local storage\n          // let events = JSON.parse(localStorage.getItem('events')) || [];\n          // console.log('Existing events:', events);\n\n          // // Find index of event being updated\n          // const eventIndex = events.findIndex(event => event.id === eventId);\n          // console.log('Event index:', eventIndex);\n\n          // // Update event if found\n          // if (eventIndex !== -1) {\n          //   events[eventIndex].start = response.data.start;\n          //   events[eventIndex].end = response.data.end;\n\n          //   // Save updated events to local storage\n          //   localStorage.setItem('events', JSON.stringify(events));\n          //   console.log('Updated events:', events);\n          // } else {\n          //   // If event is not found, it might be a new event, handle accordingly\n          //   console.log('Event not found in local storage. Adding new event...');\n          //   events.push(response.data);\n          //   localStorage.setItem('events', JSON.stringify(events));\n          //   console.log('Else Updated events:', events);\n          // }\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      })\n        .then(response => {\n          console.log('Event updated Resize:', response.data);\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  },\n\n\n}\n</script>\n\n\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-sidebar' style=\"display: flex; flex-direction: column; justify-content: space-between;\">\n      <div>\n        <div class=\"text-center\">\n          <img src=\"../assets/icon.png\" alt=\"Ears Nose and Throat\" style=\"width: 160px; height: auto; \"\n            class=\"img-fluid\">\n        </div>\n        <div style=\"margin: 50px 5px 10px 5px ;\">\n          <h2>Instructions</h2>\n          <ul style=\"text-align: left;\">\n            <li>Select dates and you will be prompted to create a new event</li>\n            <li>Drag, drop, and resize events</li>\n            <li>Click an event to delete it</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'about' }\">about</router-link>\n        <router-view />\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'login' }\">Admin Login</router-link>\n        <router-view />\n      </div>\n    </div>\n\n\n    <div class='demo-app-main'>\n      <FullCalendar class='demo-app-calendar' :options='calendarOptions'>\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.start }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n      <!-- Button trigger modal -->\n      <button type=\"button\" class=\"btn btn-primary\" @click=\"openModal\">\n        Launch demo modal\n      </button>\n\n      <!-- Modal -->\n      <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            <div class=\"modal-body\">\n              <h1>Add Event</h1>\n              <input type=\"text\" v-model=\"newEventTitle\">\n              <!-- Modal Body Content -->\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n              <button type=\"button\" class=\"btn btn-primary\" @click=\"saveChanges(selectedInfo)\">Save changes</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n\n<style lang='css'>\nhtml,\nbody {\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n\n  /* overflow: hidden; Disable scrolling of the entire page */\n}\n\n@media (max-width: 650px) {\n  ul {\n    margin: 0;\n    /* padding: 0 0 0 1.5em; */\n    font-size: 10px;\n  }\n\n  li {\n    /* margin: 1.5em 0; */\n    padding: 0;\n    font-size: 10px;\n  }\n}\n\n\nh2 {\n  margin: 0;\n  font-size: 16px;\n}\n\nul {\n  margin: 0;\n  /* padding: 0 0 0 1.5em; */\n}\n\nli {\n  /* margin: 1.5em 0; */\n  padding: 0;\n}\n\nb {\n  /* used for event dates/times */\n  margin-right: 3px;\n  color: black;\n}\n\ni {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.demo-app {\n  display: flex;\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n  font-size: 14px;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-sidebar {\n  padding: 10px;\n  width: 300px;\n  line-height: 1.5;\n  /* background: #eaf9ff; */\n  background-color: #e6e7e9;\n  border-right: 1px solid #d3e2e8;\n  /* overflow-y: auto; */\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-main {\n  flex-grow: 1;\n  padding: 3em;\n}\n\n/* Adjust the height of FullCalendar to fit within the main content area */\n.demo-app-calendar {\n  height: calc(100vh - 6em);\n  /* Adjust as needed, considering header/footer heights */\n}\n\n.fc {\n  /* the calendar root */\n  /* max-width: 1100px; */\n  margin: 0 auto;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.fc-col-header-cell-cushion {\n  text-decoration: none;\n  color: black;\n}\n\n.fc-scrollgrid .fc-daygrid-day-number {\n  text-decoration: none;\n  color: black;\n\n}\n\n.fc-event {\n  color: white;\n}\n\n.fc-list-event-title {\n  color: black;\n}\n\n.fc-list-event-time {\n  color: black;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}