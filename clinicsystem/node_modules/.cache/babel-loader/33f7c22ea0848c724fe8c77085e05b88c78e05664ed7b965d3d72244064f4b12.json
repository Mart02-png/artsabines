{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport FullCalendar from '@fullcalendar/vue3';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport axios from 'axios';\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5';\nimport * as bootstrap from 'bootstrap';\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\nfunction updateErrorMessage(message) {\n  const errorMessageElement = document.getElementById('errorMessage');\n  errorMessageElement.textContent = message;\n}\nexport default {\n  components: {\n    FullCalendar\n  },\n  data: function () {\n    return {\n      modal: null,\n      errorModal: null,\n      nameInput: '',\n      lastnameInput: '',\n      emailInput: '',\n      emailRegex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n      numberRegex: /^09\\d{9}$/,\n      nameInputValid: true,\n      lastnameInputValid: true,\n      emailInputValid: true,\n      validEmail: true,\n      validNumber: true,\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1); // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [bootstrap5Plugin, listPlugin, dayGridPlugin, timeGridPlugin, interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5',\n        initialView: 'dayGridMonth',\n        editable: false,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventsSet: this.handleEvents,\n        eventDisplay: 'block',\n        slotDuration: '01:00'\n      },\n      allevents: []\n    };\n  },\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n    this.errorModal = new bootstrap.Modal(document.getElementById('errorModal'), {\n      // Optional: specify options here\n    });\n  },\n  methods: {\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n    fetchEvents() {\n      axios.get('http://localhost:8000/api/events').then(response => {\n        let eventsFromAPI = response.data.filter(event => event.user === 'clientApproval').map(event => {\n          let color;\n          switch (event.user) {\n            case 'clientApproval':\n              color = '#007FFF';\n              break;\n            case 'admin':\n              color = '#FF2D00';\n              break;\n            default:\n              color = '#007FFF';\n              break;\n          }\n          return {\n            id: event.id,\n            title: event.title,\n            start: event.start,\n            end: event.end,\n            allDay: event.allDay,\n            user: event.user,\n            color: color // Assign color based on user type\n          };\n        });\n        this.calendarOptions.events = eventsFromAPI;\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    // //ADD EVENT\n    // handleDateSelect(selectInfo) {\n    //   const moment = require('moment');\n    //   // Get the current time in HH:mm:ss format\n    //   const currentTime = moment().format('HH:mm:ss');\n    //   let startSelectedDate = selectInfo.startStr + \" \" + currentTime;\n\n    //   axios.get('http://localhost:8000/api/events')\n    //     .then(response => {\n    //       let canAddEvent = true;\n    //       response.data.forEach(event => {\n    //         const moment = require('moment');\n    //         // Combine the current time with selectInfo.startStr\n    //         let startSelectedDateNoTime = moment(selectInfo.startStr).format('YYYY-MM-DD');\n    //         let EndSelectedDateNoTime = moment(event.start).format('YYYY-MM-DD');\n    //         // Check if the admin has added an event that overlaps with the selected time range\n    //         if (event.user === 'admin' && event.allDay === 1 && startSelectedDateNoTime === EndSelectedDateNoTime || event.user === 'admin' && startSelectedDate >= event.start && startSelectedDate <= event.end) {\n    //           canAddEvent = false;\n    //           updateErrorMessage(\"The schedule is busy on this day. Please select another date\");\n    //           this.errorModal.show();\n    //         }\n    //       });\n\n    //       if (canAddEvent) {\n    //         this.modal.show();\n    //         this.selectedInfo = selectInfo;\n    //         // console.log(\"YOU CAN NOW ADD\");\n    //       }\n    //     })\n    //     .catch(error => {\n    //       console.error('Error fetching events:', error);\n    //     });\n    // },\n\n    handleDateSelect(selectInfo) {\n      const moment = require('moment');\n\n      // Get the current time in HH:mm format\n      // const currentTime = moment().format('HH:mm');\n      const selectedTime = moment(selectInfo.startStr).format('HH:mm');\n      console.log(selectedTime);\n      // Check if the view is timeGridWeek\n      if (selectInfo.view.type === 'dayGridMonth' || selectInfo.view.type === 'timeGridWeek' || selectInfo.view.type === 'timeGridDay') {\n        // Check if the selected time is within the restricted time ranges\n        if (selectInfo.allDay ||\n        // 5pm to 5am or 12pm to 1pm\n        selectedTime >= '00:00' && selectedTime < '05:00' || selectedTime >= '12:00' && selectedTime < '13:00' || selectedTime >= '17:00' && selectedTime < '24:00') {\n          // Show modal with the message\n          updateErrorMessage(\"No Appointment on this hours\");\n          this.errorModal.show();\n        } else {\n          // Proceed with adding the event\n          this.checkEventOverlap(selectInfo);\n        }\n        return;\n      }\n    },\n    checkEventOverlap(selectInfo) {\n      const moment = require('moment');\n      const currentTime = moment().format('HH:mm:ss');\n      let startSelectedDate = selectInfo.startStr + \" \" + currentTime;\n      axios.get('http://localhost:8000/api/events').then(response => {\n        let canAddEvent = true;\n        response.data.forEach(event => {\n          const moment = require('moment');\n          let startSelectedDateNoTime = moment(selectInfo.startStr).format('YYYY-MM-DD');\n          let EndSelectedDateNoTime = moment(event.start).format('YYYY-MM-DD');\n          if (event.user === 'admin' && event.allDay === 1 && startSelectedDateNoTime === EndSelectedDateNoTime || event.user === 'admin' && startSelectedDate >= event.start && startSelectedDate <= event.end) {\n            canAddEvent = false;\n            updateErrorMessage(\"The schedule is busy on this day. Please select another date\");\n            this.errorModal.show();\n          }\n        });\n        if (canAddEvent) {\n          this.modal.show();\n          this.selectedInfo = selectInfo;\n        }\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    saveChanges(selectedInfo) {\n      // Reset validity flags\n      this.nameInputValid = this.nameInput.trim() !== '';\n      this.lastnameInputValid = this.lastnameInput.trim() !== '';\n      this.emailInputValid = this.emailInput.trim() !== '';\n      this.validEmail = this.emailRegex.test(this.emailInput);\n      this.validNumber = this.numberRegex.test(this.emailInput);\n\n      // Check if all inputs are filled\n\n      if (!this.lastnameInputValid) {\n        this.lastnameInputValid = false;\n        return;\n      }\n      if (!this.nameInputValid) {\n        this.nameInputValid = false;\n        return;\n      }\n      if (!this.emailInputValid || !this.validEmail || !this.validNumber) {\n        this.emailInputValid = false;\n        return;\n      }\n      this.newEventTitle = this.nameInput + ' ' + this.lastnameInput;\n      if (this.newEventTitle.trim() !== '') {\n        let calendarApi = selectedInfo.view.calendar;\n        calendarApi.unselect(); // clear date selection\n\n        // Format start and end dates\n        let start = formatDatetime(selectedInfo.startStr);\n        let end = formatDatetime(selectedInfo.endStr);\n        axios.post('http://localhost:8000/api/events', {\n          title: this.newEventTitle,\n          email: this.emailInput,\n          start: start,\n          end: end,\n          user: 'clientApproval',\n          allDay: selectedInfo.allDay\n        }).then(response => {\n          this.modal.hide();\n          this.allevents.push(response.data);\n\n          // calendarApi.addEvent(response.data);\n          this.fetchEvents();\n\n          // this.newEventTitle = '';\n          this.nameInput = '';\n          this.lastnameInput = '';\n          this.emailInput = '';\n        }).catch(error => {\n          // Handle error\n          console.error('Error adding event:', error.response.data);\n        });\n      } else {\n        // Alert the user if the input field is empty\n        alert('Please enter a title for the event');\n      }\n    }\n  }\n};","map":{"version":3,"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","axios","bootstrap5Plugin","bootstrap","formatDatetime","datetimeStr","replace","updateErrorMessage","message","errorMessageElement","document","getElementById","textContent","components","data","modal","errorModal","nameInput","lastnameInput","emailInput","emailRegex","numberRegex","nameInputValid","lastnameInputValid","emailInputValid","validEmail","validNumber","calendarOptions","selectAllow","selectionInfo","startDate","start","endDate","end","setSeconds","getSeconds","getDate","plugins","headerToolbar","left","center","right","themeSystem","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","select","handleDateSelect","eventsSet","handleEvents","eventDisplay","slotDuration","allevents","mounted","fetchEvents","Modal","methods","handleWeekendsToggle","get","then","response","eventsFromAPI","filter","event","user","map","color","id","title","allDay","events","catch","error","console","selectInfo","moment","require","selectedTime","startStr","format","log","view","type","show","checkEventOverlap","currentTime","startSelectedDate","canAddEvent","forEach","startSelectedDateNoTime","EndSelectedDateNoTime","selectedInfo","saveChanges","trim","test","newEventTitle","calendarApi","calendar","unselect","endStr","post","email","hide","push","alert"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\Working System\\clinicsystem\\src\\views\\ClientView.vue"],"sourcesContent":["<!-- ClientView.vue -->\n\n<script>\n\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport listPlugin from '@fullcalendar/list'\n\nimport axios from 'axios';\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5'\nimport * as bootstrap from 'bootstrap';\n\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\n\nfunction updateErrorMessage(message) {\n  const errorMessageElement = document.getElementById('errorMessage');\n  errorMessageElement.textContent = message;\n}\n\nexport default {\n  components: {\n    FullCalendar\n  },\n\n  data: function () {\n    return {\n      modal: null,\n      errorModal: null,\n      nameInput: '',\n      lastnameInput: '',\n      emailInput: '',\n      emailRegex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n      numberRegex: /^09\\d{9}$/,\n      nameInputValid: true,\n        lastnameInputValid: true,\n        emailInputValid: true,\n        validEmail: true,\n        validNumber: true,\n\n      calendarOptions: {\n        //1 day only\n        selectAllow: function (selectionInfo) {\n          let startDate = selectionInfo.start;\n          let endDate = selectionInfo.end;\n          endDate.setSeconds(endDate.getSeconds() - 1);  // allow full day selection\n          if (startDate.getDate() === endDate.getDate()) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        plugins: [\n          bootstrap5Plugin,\n          listPlugin,\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5',\n        initialView: 'dayGridMonth',\n        editable: false,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventsSet: this.handleEvents,\n        eventDisplay: 'block',\n        slotDuration: '01:00'\n\n      },\n      allevents: [],\n    }\n  },\n\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n    this.errorModal = new bootstrap.Modal(document.getElementById('errorModal'), {\n      // Optional: specify options here\n    });\n\n  },\n\n  methods: {\n\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n\n    fetchEvents() {\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n\n          let eventsFromAPI = response.data.filter(event => event.user === 'clientApproval').map(event => {\n\n            let color;\n            switch (event.user) {\n              case 'clientApproval':\n                color = '#007FFF';\n                break;\n              case 'admin':\n                color = '#FF2D00';\n                break;\n              default:\n                color = '#007FFF';\n                break;\n            }\n\n            return {\n              id: event.id,\n              title: event.title,\n              start: event.start,\n              end: event.end,\n              allDay: event.allDay,\n              user: event.user,\n              color: color // Assign color based on user type\n            };\n          });\n\n          this.calendarOptions.events = eventsFromAPI;\n\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n\n\n    // //ADD EVENT\n    // handleDateSelect(selectInfo) {\n    //   const moment = require('moment');\n    //   // Get the current time in HH:mm:ss format\n    //   const currentTime = moment().format('HH:mm:ss');\n    //   let startSelectedDate = selectInfo.startStr + \" \" + currentTime;\n\n    //   axios.get('http://localhost:8000/api/events')\n    //     .then(response => {\n    //       let canAddEvent = true;\n    //       response.data.forEach(event => {\n    //         const moment = require('moment');\n    //         // Combine the current time with selectInfo.startStr\n    //         let startSelectedDateNoTime = moment(selectInfo.startStr).format('YYYY-MM-DD');\n    //         let EndSelectedDateNoTime = moment(event.start).format('YYYY-MM-DD');\n    //         // Check if the admin has added an event that overlaps with the selected time range\n    //         if (event.user === 'admin' && event.allDay === 1 && startSelectedDateNoTime === EndSelectedDateNoTime || event.user === 'admin' && startSelectedDate >= event.start && startSelectedDate <= event.end) {\n    //           canAddEvent = false;\n    //           updateErrorMessage(\"The schedule is busy on this day. Please select another date\");\n    //           this.errorModal.show();\n    //         }\n    //       });\n\n    //       if (canAddEvent) {\n    //         this.modal.show();\n    //         this.selectedInfo = selectInfo;\n    //         // console.log(\"YOU CAN NOW ADD\");\n    //       }\n    //     })\n    //     .catch(error => {\n    //       console.error('Error fetching events:', error);\n    //     });\n    // },\n\n    handleDateSelect(selectInfo) {\n      const moment = require('moment');\n\n      // Get the current time in HH:mm format\n      // const currentTime = moment().format('HH:mm');\n      const selectedTime = moment(selectInfo.startStr).format('HH:mm');\n      console.log(selectedTime);\n       // Check if the view is timeGridWeek\n      if (selectInfo.view.type === 'dayGridMonth' || \n          selectInfo.view.type === 'timeGridWeek' ||\n          selectInfo.view.type === 'timeGridDay') {\n         // Check if the selected time is within the restricted time ranges\n         if (\n          selectInfo.allDay ||\n          // 5pm to 5am or 12pm to 1pm\n            (selectedTime >= '00:00' && selectedTime < '05:00') || \n            (selectedTime >= '12:00' && selectedTime < '13:00') ||\n            (selectedTime >= '17:00' && selectedTime < '24:00') \n        ) {\n          // Show modal with the message\n          updateErrorMessage(\"No Appointment on this hours\");\n          this.errorModal.show();\n        } else {\n          // Proceed with adding the event\n          this.checkEventOverlap(selectInfo);\n        }\n        return;\n      }\n},\n\ncheckEventOverlap(selectInfo) {\n  const moment = require('moment');\n  const currentTime = moment().format('HH:mm:ss');\n  let startSelectedDate = selectInfo.startStr + \" \" + currentTime;\n\n  axios.get('http://localhost:8000/api/events')\n    .then(response => {\n      let canAddEvent = true;\n      response.data.forEach(event => {\n        const moment = require('moment');\n        let startSelectedDateNoTime = moment(selectInfo.startStr).format('YYYY-MM-DD');\n        let EndSelectedDateNoTime = moment(event.start).format('YYYY-MM-DD');\n        if (event.user === 'admin' && event.allDay === 1 && startSelectedDateNoTime === EndSelectedDateNoTime || event.user === 'admin' && startSelectedDate >= event.start && startSelectedDate <= event.end) {\n          canAddEvent = false;\n          updateErrorMessage(\"The schedule is busy on this day. Please select another date\");\n          this.errorModal.show();\n        }\n      });\n\n      if (canAddEvent) {\n        this.modal.show();\n        this.selectedInfo = selectInfo;\n      }\n    })\n    .catch(error => {\n      console.error('Error fetching events:', error);\n    });\n},\n\n    saveChanges(selectedInfo) {\n\n         // Reset validity flags\n    this.nameInputValid = this.nameInput.trim() !== '';\n    this.lastnameInputValid = this.lastnameInput.trim() !== '';\n    this.emailInputValid = this.emailInput.trim() !== '';\n    this.validEmail = this.emailRegex.test(this.emailInput);\n    this.validNumber = this.numberRegex.test(this.emailInput);\n\n    // Check if all inputs are filled\n\n    if(!this.lastnameInputValid){\n      this.lastnameInputValid = false;\n      return;\n    }\n\n    if (!this.nameInputValid) {\n        this.nameInputValid = false;\n        return;\n    }\n\n\n    if (!this.emailInputValid || !this.validEmail || !this.validNumber) {\n      this.emailInputValid = false;\n      return;\n    }\n          \n\n      this.newEventTitle = this.nameInput + ' ' + this.lastnameInput;\n      if (this.newEventTitle.trim() !== '') {\n\n        let calendarApi = selectedInfo.view.calendar;\n        calendarApi.unselect() // clear date selection\n\n        // Format start and end dates\n        let start = formatDatetime(selectedInfo.startStr);\n        let end = formatDatetime(selectedInfo.endStr);\n\n        axios.post('http://localhost:8000/api/events', {\n          title: this.newEventTitle,\n          email: this.emailInput,\n          start: start,\n          end: end,\n          user: 'clientApproval',\n          allDay: selectedInfo.allDay\n        })\n          .then(response => {\n            this.modal.hide();\n            this.allevents.push(response.data);\n\n            // calendarApi.addEvent(response.data);\n            this.fetchEvents();\n\n            // this.newEventTitle = '';\n            this.nameInput = '';\n            this.lastnameInput = '';\n            this.emailInput = '';\n\n          })\n          .catch(error => {\n            // Handle error\n            console.error('Error adding event:', error.response.data);\n          });\n      } else {\n        // Alert the user if the input field is empty\n        alert('Please enter a title for the event');\n      }\n    },\n\n  }\n}\n</script>\n\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-sidebar' style=\"display: flex; flex-direction: column; justify-content: space-between;\">\n      <div>\n        <div class=\"text-center\">\n          <img src=\"../assets/icon.png\" alt=\"Ears Nose and Throat\" style=\"width: 160px; height: auto; \"\n            class=\"img-fluid\">\n        </div>\n        <div style=\"margin: 50px 5px 10px 5px ;\">\n          <h2>Instructions</h2>\n          <ul style=\"text-align: left;\">\n            <li>Select dates and you will be prompted to create a new event</li>\n            <li>Drag, drop, and resize events</li>\n            <li>Click an event to delete it</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'about' }\">about</router-link>\n        <router-view />\n      </div>\n\n      <!-- Admin Login -->\n      <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n        <router-link :to=\"{ name: 'login' }\">Admin Login</router-link>\n        <router-view />\n      </div>\n    </div>\n\n\n    <div class='demo-app-main'>\n      <FullCalendar class='demo-app-calendar' :options='calendarOptions'>\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.start }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n\n      <!-- Modal -->\n      <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header bg-primary text-white\">\n              <h5 class=\"modal-title\" id=\"exampleModalLabel\">Create Schedule</h5>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            <!-- Modal Body Content -->\n            <div class=\"modal-body\">\n              <div class=\"mb-3\">\n                <input type=\"text\" class=\"form-control\" id=\"nameInput\" v-model=\"nameInput\" placeholder=\"Name\">\n                <small v-if=\"!nameInput && !nameInputValid\" class=\"text-danger\">Please fill Name</small>\n              </div>\n\n              <div class=\"mb-3\">\n                  <input type=\"text\" class=\"form-control\" id=\"lastnameInput\" v-model=\"lastnameInput\" placeholder=\"Lastname\">\n                  <small v-if=\"!lastnameInput && !lastnameInputValid\" class=\"text-danger\">Please fill Lastname</small>\n              </div>\n              <div class=\"mb-3\">\n                <input type=\"email\" class=\"form-control\" id=\"emailInput\" v-model=\"emailInput\" placeholder=\"Email\" autocomplete=\"current-emailInput\" required>\n                <small v-if=\"!emailInput && !emailInputValid\" class=\"text-danger\">Please fill Email</small>\n                <small v-else-if=\"!emailRegex.test(emailInput) && !numberRegex.test(emailInput)\" class=\"text-danger\">Please fill valid Email or valid phone number</small>\n              </div>\n              <!-- Rest of your modal content -->\n            </div>\n\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n              <button type=\"button\" class=\"btn btn-primary\" @click=\"saveChanges(selectedInfo)\">Save changes</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Error -->\n      <div class=\"modal fade\" id=\"errorModal\" tabindex=\"-1\" aria-labelledby=\"errorModal\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header bg-danger text-white\">\n              <h5 class=\"modal-title bi-exclamation-triangle-fill\"> Error</h5>\n              <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"></button>\n            </div>\n            <div class=\"modal-body\">\n              <h4>\n                <p><i class=\"bi\"></i> <span id=\"errorMessage\"></span></p>\n              </h4>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-danger\" data-bs-dismiss=\"modal\">Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n\n\n<style lang='css'>\nhtml,\nbody {\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n\n  /* overflow: hidden; Disable scrolling of the entire page */\n}\n\n@media (max-width: 650px) {\n  ul {\n    margin: 0;\n    /* padding: 0 0 0 1.5em; */\n    font-size: 10px;\n  }\n\n  li {\n    /* margin: 1.5em 0; */\n    padding: 0;\n    font-size: 10px;\n  }\n}\n\n/* .modal-backdrop {\n    display: none;\n    z-index: 1040 !important;\n}\n\n.modal-content {\n    margin: 2px auto;\n    z-index: 1100 !important;\n} */\n\nh2 {\n  margin: 0;\n  font-size: 16px;\n}\n\nul {\n  margin: 0;\n  /* padding: 0 0 0 1.5em; */\n}\n\nli {\n  /* margin: 1.5em 0; */\n  padding: 0;\n}\n\nb {\n  /* used for event dates/times */\n  margin-right: 3px;\n  color: black;\n}\n\ni {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.demo-app {\n  display: flex;\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n  font-size: 14px;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-sidebar {\n  padding: 10px;\n  width: 300px;\n  line-height: 1.5;\n  /* background: #eaf9ff; */\n  background-color: #e6e7e9;\n  border-right: 1px solid #d3e2e8;\n  /* overflow-y: auto; */\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.demo-app-main {\n  flex-grow: 1;\n  padding: 3em;\n}\n\n/* Adjust the height of FullCalendar to fit within the main content area */\n.demo-app-calendar {\n  height: calc(100vh - 6em);\n  /* Adjust as needed, considering header/footer heights */\n}\n\n.fc {\n  /* the calendar root */\n  /* max-width: 1100px; */\n  margin: 0 auto;\n  max-height: 100vh;\n  /* Set sidebar height to match viewport height */\n}\n\n.fc-col-header-cell-cushion {\n  text-decoration: none;\n  color: black;\n}\n\n.fc-scrollgrid .fc-daygrid-day-number {\n  text-decoration: none;\n  color: black;\n\n}\n\n.fc-event {\n  color: white;\n}\n\n.fc-list-event-title {\n  color: black;\n}\n\n.fc-list-event-time {\n  color: black;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n\n/* Make the text bold in the week view of FullCalendar */\n.fc-timegrid-event .fc-content {\n  /* For event titles */\n  font-weight: bold;\n}\n\n.fc-timegrid-axis,\n/* For time labels on the left */\n.fc-day-header,\n/* For day headers */\n.fc-timegrid-slots td,\n/* For time slots */\n.fc-timegrid-slots .fc-timegrid-slot-lane {\n  /* For the content within time slots */\n  font-weight: bold;\n}\n\n\n/* Make the dates bold in FullCalendar */\n.fc-daygrid-day-number {\n  /* For day numbers in month view */\n  font-weight: bold;\n}\n\n.fc-col-header {\n  /* For day headers (e.g., Sun, Mon, Tue) */\n  font-weight: bold;\n  background-color: white;\n  font-size: 20px;\n}\n\n.fc table {\n  font-size: 14px;\n}\n\n\n/* Make the text bold in FullCalendar */\n.fc-daygrid-event,\n/* Event titles */\n.fc-list-item-title\n\n/* List view event titles */\n  {\n  font-weight: bold;\n  overflow: hidden;\n}\n\n.fc-toolbar-title\n\n/* Calendar header title */\n  {\n  font-weight: bold;\n  color: white;\n}\n\n.fc-view-harness {\n  background-color: rgba(230, 231, 233, 0.783);\n  /* Adjust the alpha value (0.5) to make it more or less transparent */\n}\n\n:root {\n  --fc-list-event-hover-bg-color: #ADD8E6;\n  /* Light blue color */\n  --fc-today-bg-color: rgba(77, 76, 75, 0.53);\n}\n\n.fc-day:hover {\n  background-color: #ADD8E6;\n  /* Light blue color on hover */\n  cursor: pointer;\n  /* Change cursor to pointer on hover */\n}\n\n.fc-event-time,\n.fc-event-title {\n  display: inline;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}