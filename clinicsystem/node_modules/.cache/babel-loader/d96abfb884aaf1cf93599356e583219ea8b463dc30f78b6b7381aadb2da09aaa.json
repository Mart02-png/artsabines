{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5';\nlet eventGuid = 0;\nexport function createEventId() {\n  return String(eventGuid++);\n}\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n  data: function () {\n    return {\n      calendarOptions: {\n        plugins: [bootstrap5Plugin, listPlugin, dayGridPlugin, timeGridPlugin, interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5',\n        // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop,\n        // Add eventDrop handler\n        eventResize: this.handleEventResize\n\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: []\n    };\n  },\n  mounted() {\n    this.fetchEvents();\n  },\n  methods: {\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events').then(response => {\n        // let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => ({\n        //   id: event.id,\n        //   title: event.title,\n        //   start: event.start,\n        //   user: event.user,\n        //   end: event.end,\n        //   allDay: event.allDay,\n        // }));\n\n        // Update local events with API events and update user if IDs match\n        eventsFromLocalStorage.forEach(localEvent => {\n          let correspondingAPIEvent = eventsFromAPI.find(apiEvent => apiEvent.id === localEvent.id);\n          if (correspondingAPIEvent) {\n            localEvent.user = correspondingAPIEvent.user;\n            console.log(localEvent.user, correspondingAPIEvent.user);\n          }\n        });\n        let eventsFromAPI = response.data.map(event => {\n          let color;\n          switch (event.user) {\n            case 'clientApproval':\n              color = '#007FFF';\n              break;\n            case 'clientApproved':\n              color = '#FF9E00';\n              break;\n            case 'admin':\n              color = '#FF2D00';\n              break;\n            default:\n              // Handle default case if needed\n              break;\n          }\n          return {\n            id: event.id,\n            title: event.title,\n            start: event.start,\n            end: event.end,\n            allDay: event.allDay,\n            user: event.user,\n            color: color // Assign color based on user type\n          };\n        });\n\n        // Filter out duplicate events by ID\n        let uniqueEventsFromAPI = eventsFromAPI.filter(apiEvent => !eventsFromLocalStorage.some(localEvent => localEvent.id === apiEvent.id));\n        let allEvents = eventsFromLocalStorage.concat(uniqueEventsFromAPI);\n        this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n        localStorage.setItem('events', JSON.stringify(allEvents));\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        console.log(formatDatetime(new Date().toISOString()));\n        axios.post('http://localhost:8000/api/events', {\n          title: title,\n          start: formatDatetime(selectInfo.startStr),\n          end: formatDatetime(selectInfo.endStr),\n          user: 'clientApproval',\n          allDay: selectInfo.allDay\n        }).then(response => {\n          // Handle success\n          console.log('Event added:', response.data);\n          console.log('Event added ID:', response.data.id);\n          this.allevents.push(response.data);\n          let newEvent = {\n            id: response.data.id,\n            title: response.data.title,\n            start: response.data.start,\n            end: response.data.end,\n            allDay: response.data.allDay\n          };\n\n          // this.allevents.push(newEvent);\n          // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n          // Get existing events from local storage or initialize an empty array\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          events.push(newEvent); // Append the new event to existing events\n          localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n          calendarApi.addEvent(newEvent);\n          // Fetch events again to update the calendar\n          this.fetchEvents();\n        }).catch(error => {\n          // Handle error\n          console.error('Error adding event:', error.response.data);\n        });\n      }\n    },\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`).then(response => {\n          // this.fetchEvents(); // Refresh events after deleting\n          console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n          // Fetch events from local storage\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          console.log('Events before deletion:', events);\n          // Filter out the event to be deleted\n          const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n          console.log('Updated events after deletion:', updatedEvents);\n          // Store the updated events back into local storage\n          localStorage.setItem('events', JSON.stringify(updatedEvents));\n          this.fetchEvents();\n        }).catch(error => {\n          console.error('Error deleting event:', error);\n        });\n      }\n    },\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      }).then(response => {\n        console.log('Event updated:', response.data);\n\n        // Retrieve events from local storage\n        let events = JSON.parse(localStorage.getItem('events')) || [];\n        console.log('Existing events:', events);\n\n        // Find index of event being updated\n        const eventIndex = events.findIndex(event => event.id === eventId);\n        console.log('Event index:', eventIndex);\n\n        // Update event if found\n        if (eventIndex !== -1) {\n          events[eventIndex].start = response.data.start;\n          events[eventIndex].end = response.data.end;\n\n          // Save updated events to local storage\n          localStorage.setItem('events', JSON.stringify(events));\n          console.log('Updated events:', events);\n        } else {\n          // If event is not found, it might be a new event, handle accordingly\n          console.log('Event not found in local storage. Adding new event...');\n          events.push(response.data);\n          localStorage.setItem('events', JSON.stringify(events));\n          console.log('Updated events:', events);\n        }\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      }).then(response => {\n        console.log('Event updated Resize:', response.data);\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  }\n};","map":{"version":3,"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","axios","bootstrap5Plugin","eventGuid","createEventId","String","formatDatetime","datetimeStr","replace","components","data","calendarOptions","plugins","headerToolbar","left","center","right","themeSystem","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","select","handleDateSelect","eventClick","deleteItem","eventsSet","handleEvents","eventDrop","handleEventDrop","eventResize","handleEventResize","allevents","mounted","fetchEvents","methods","eventsFromLocalStorage","JSON","parse","localStorage","getItem","get","then","response","forEach","localEvent","correspondingAPIEvent","eventsFromAPI","find","apiEvent","id","user","console","log","map","event","color","title","start","end","allDay","uniqueEventsFromAPI","filter","some","allEvents","concat","events","setItem","stringify","catch","error","handleWeekendsToggle","selectInfo","prompt","calendarApi","view","calendar","unselect","Date","toISOString","post","startStr","endStr","push","newEvent","addEvent","clickInfo","confirm","delete","updatedEvents","info","eventId","start_formatdate","end_formatdate","put","eventIndex","findIndex"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\clinicsystem\\src\\views\\ClientView.vue"],"sourcesContent":["<!-- HelloWorld.vue -->\n\n<script>\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport listPlugin from '@fullcalendar/list'\n\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5'\n\n\nlet eventGuid = 0\nexport function createEventId() {\n  return String(eventGuid++)\n}\n\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\n\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n\n  data: function () {\n    return {\n      calendarOptions: {\n        plugins: [\n          bootstrap5Plugin,\n          listPlugin,\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5', // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop, // Add eventDrop handler\n        eventResize: this.handleEventResize\n\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: [],\n    }\n  },\n\n  mounted() {\n    this.fetchEvents();\n  },\n\n  methods: {\n\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n          // let eventsFromAPI = response.data.filter(event => event.user === 'admin').map(event => ({\n          //   id: event.id,\n          //   title: event.title,\n          //   start: event.start,\n          //   user: event.user,\n          //   end: event.end,\n          //   allDay: event.allDay,\n          // }));\n\n                       // Update local events with API events and update user if IDs match\n                       eventsFromLocalStorage.forEach(localEvent => {\n                let correspondingAPIEvent = eventsFromAPI.find(apiEvent => apiEvent.id === localEvent.id);\n                if (correspondingAPIEvent) {\n                    localEvent.user = correspondingAPIEvent.user;\n                    console.log(localEvent.user,correspondingAPIEvent.user   );\n                } \n            });\n\n          let eventsFromAPI = response.data.map(event => {\n            let color;\n            switch (event.user) {\n                case 'clientApproval':\n                    color = '#007FFF';\n                    break;\n                case 'clientApproved':\n                    color = '#FF9E00';\n                    break;\n                case 'admin':\n                    color = '#FF2D00';\n                    break;\n                default:\n                    // Handle default case if needed\n                    break;\n            }\n\n            return {\n                id: event.id,\n                title: event.title,\n                start: event.start,\n                end: event.end,\n                allDay: event.allDay,\n                user: event.user,\n                color: color // Assign color based on user type\n            };\n        });\n\n       \n\n         // Filter out duplicate events by ID\n          let uniqueEventsFromAPI = eventsFromAPI.filter(apiEvent => !eventsFromLocalStorage.some(localEvent => localEvent.id === apiEvent.id));\n\n          let allEvents = eventsFromLocalStorage.concat(uniqueEventsFromAPI);\n\n          this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n          localStorage.setItem('events', JSON.stringify(allEvents));\n\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      let title = prompt('Please enter a new title for your event')\n      let calendarApi = selectInfo.view.calendar\n\n      calendarApi.unselect() // clear date selection\n\n      if (title) {\n\n        console.log(formatDatetime(new Date().toISOString()));\n\n        axios.post('http://localhost:8000/api/events', {\n\n          title: title,\n          start: formatDatetime(selectInfo.startStr),\n          end: formatDatetime(selectInfo.endStr),\n          user: 'clientApproval',\n          allDay: selectInfo.allDay\n        })\n          .then(response => {\n            // Handle success\n            console.log('Event added:', response.data);\n            console.log('Event added ID:', response.data.id);\n            this.allevents.push(response.data);\n\n            let newEvent = {\n              id: response.data.id,\n              title: response.data.title,\n              start: response.data.start,\n              end: response.data.end,\n              allDay: response.data.allDay\n            };\n\n            // this.allevents.push(newEvent);\n            // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n            // Get existing events from local storage or initialize an empty array\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            events.push(newEvent); // Append the new event to existing events\n            localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n            calendarApi.addEvent(newEvent);\n            // Fetch events again to update the calendar\n            this.fetchEvents();\n\n          })\n          .catch(error => {\n            // Handle error\n            console.error('Error adding event:', error.response.data);\n          });\n      }\n    },\n\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`)\n          .then(response => {\n            // this.fetchEvents(); // Refresh events after deleting\n            console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n            // Fetch events from local storage\n            let events = JSON.parse(localStorage.getItem('events')) || [];\n            console.log('Events before deletion:', events);\n            // Filter out the event to be deleted\n            const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n            console.log('Updated events after deletion:', updatedEvents);\n            // Store the updated events back into local storage\n            localStorage.setItem('events', JSON.stringify(updatedEvents));\n            this.fetchEvents();\n\n          })\n          .catch(error => {\n            \n            console.error('Error deleting event:', error);\n          });\n      }\n    },\n\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      })\n        .then(response => {\n          console.log('Event updated:', response.data);\n\n          // Retrieve events from local storage\n          let events = JSON.parse(localStorage.getItem('events')) || [];\n          console.log('Existing events:', events);\n\n          // Find index of event being updated\n          const eventIndex = events.findIndex(event => event.id === eventId);\n          console.log('Event index:', eventIndex);\n\n          // Update event if found\n          if (eventIndex !== -1) {\n            events[eventIndex].start = response.data.start;\n            events[eventIndex].end = response.data.end;\n\n            // Save updated events to local storage\n            localStorage.setItem('events', JSON.stringify(events));\n            console.log('Updated events:', events);\n          } else {\n            // If event is not found, it might be a new event, handle accordingly\n            console.log('Event not found in local storage. Adding new event...');\n            events.push(response.data);\n            localStorage.setItem('events', JSON.stringify(events));\n            console.log('Updated events:', events);\n          }\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n\n\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      })\n        .then(response => {\n          console.log('Event updated Resize:', response.data);\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  },\n\n\n}\n</script>\n\n\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-sidebar' style=\"display: flex; flex-direction: column; justify-content: space-between;\">\n  <div>\n    <div class=\"text-center\">\n      <img src=\"../assets/icon.png\" alt=\"Ears Nose and Throat\" style=\"width: 160px; height: auto; \" class=\"img-fluid\">\n    </div>\n    <div style=\"margin: 50px 5px 10px 5px ;\">\n      <h2>Instructions</h2>\n      <ul style=\"text-align: left;\">\n        <li>Select dates and you will be prompted to create a new event</li>\n        <li>Drag, drop, and resize events</li>\n        <li>Click an event to delete it</li>\n      </ul>\n    </div>\n  </div>\n\n  <!-- Admin Login -->\n  <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px ;\">\n    <router-link :to= \"{ name: 'login' }\">Admin Login</router-link>\n    <router-view/>\n  </div>\n</div>\n\n\n    <div class='demo-app-main'>\n      <FullCalendar class='demo-app-calendar' :options='calendarOptions'>\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.start }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n    </div>\n  </div>\n</template>\n\n\n\n<style lang='css'>\n\n\nhtml, body {\n    height: 100vh;\n    margin: 0;\n    padding: 0;\n    \n   /* overflow: hidden; Disable scrolling of the entire page */\n}\n@media (max-width: 650px) {\n    ul {\n      margin: 0;\n      /* padding: 0 0 0 1.5em; */\n      font-size: 10px;\n    }\n\n    li {\n      /* margin: 1.5em 0; */\n      padding: 0;\n      font-size: 10px;\n    }\n  }\n\n\n  h2 {\n    margin: 0;\n    font-size: 16px;\n  }\n\n  ul {\n    margin: 0;\n    /* padding: 0 0 0 1.5em; */\n  }\n\n  li {\n    /* margin: 1.5em 0; */\n    padding: 0;\n  }\n\n  b {\n    /* used for event dates/times */\n    margin-right: 3px;\n    color: black;\n  }\n\n  i {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  .demo-app {\n    display: flex;\n    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n    font-size: 14px;\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n  }\n\n  .demo-app-sidebar {\n    padding: 10px;\n    width: 300px;\n    line-height: 1.5;\n    /* background: #eaf9ff; */\n    background-color: #e6e7e9;\n    border-right: 1px solid #d3e2e8;\n    /* overflow-y: auto; */\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n  }\n\n  .demo-app-main {\n    flex-grow: 1;\n    padding: 3em;\n  }\n\n    /* Adjust the height of FullCalendar to fit within the main content area */\n  .demo-app-calendar {\n      height: calc(100vh - 6em); /* Adjust as needed, considering header/footer heights */\n  }\n\n  .fc {\n    /* the calendar root */\n    /* max-width: 1100px; */\n    margin: 0 auto;\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n  }\n  .fc-col-header-cell-cushion{\n    text-decoration: none;\n    color: black;\n  }\n  .fc-scrollgrid .fc-daygrid-day-number{\n    text-decoration: none;\n    color: black;\n\n  }\n  .fc-event{\n    color: white;\n  }\n\n  .fc-list-event-title{\n    color: black;\n  }\n\n  .fc-list-event-time{\n    color: black;\n  }\n\n  </style>\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}