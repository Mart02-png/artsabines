{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5';\nimport * as bootstrap from 'bootstrap';\nlet eventGuid = 0;\nexport function createEventId() {\n  return String(eventGuid++);\n}\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n  data: function () {\n    return {\n      modal: null,\n      deletemodal: null,\n      nameInput: '',\n      lastnameInput: '',\n      emailInput: '',\n      calendarOptions: {\n        plugins: [bootstrap5Plugin, listPlugin, dayGridPlugin, timeGridPlugin, interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5',\n        // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop,\n        // Add eventDrop handler\n        eventResize: this.handleEventResize,\n        eventDisplay: 'block'\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: []\n    };\n  },\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n    this.deletemodal = new bootstrap.Modal(document.getElementById('deleteModal'), {\n      // Optional: specify options here\n    });\n  },\n  methods: {\n    // logout() {\n    //   axios.post('http://localhost:8000/api/auth/logout', null, {\n    //     headers: {\n    //       Authorization: `Bearer ${localStorage.getItem('token')}`\n    //     }\n    //   })\n    //   .then(response => {\n    //     localStorage.removeItem('token');\n    //     this.$router.push({ name: 'login' });\n    //     console.log(response.data);\n    //   })\n    //   .catch(error => {\n    //     console.error('Logout error:', error);\n    //     console.log('An error occurred while logging out. Please try again.');\n    //   });\n    // },\n    logout() {\n      const token = localStorage.getItem('token');\n      const decodedToken = jwt_decode(token);\n      const currentTime = Date.now() / 1000; // Convert to seconds\n\n      console.log;\n      // Check if the token has expired\n      if (decodedToken.exp < currentTime) {\n        // Token has expired\n        // localStorage.removeItem('token');\n        // Redirect user to login page or handle accordingly\n        console.log('token');\n      }\n\n      // Perform logout request using Axios\n      axios.post('http://localhost:8000/api/auth/logout', {}, {\n        // headers: {\n        //   'Authorization': `Bearer ${localStorage.getItem('token')}`\n        // }\n        // Decode the token to get its expiration time\n      }).then(response => {\n        // Handle successful logout\n        console.log(response.data); // For debugging\n        // Remove the token from local storage\n        localStorage.removeItem('token');\n        // Redirect to the login page or home page\n        this.$router.push({\n          name: 'login'\n        });\n      }).catch(error => {\n        // Handle logout error\n        console.error(error.response.data); // For debugging\n        // You can display an error message or perform any other action\n      });\n    },\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events').then(response => {\n        //   let eventsFromAPI = response.data.filter(event => event.user === 'admin' ||  event.user === 'clientApproved' ).map(event => ({\n        //   id: event.id,\n        //   title: event.title,\n        //   start: event.start,\n        //   user: event.user,\n        //   end: event.end,\n        //   allDay: event.allDay  \n        // }));\n\n        // let eventsFromAPI = response.data.map(event => {\n        let eventsFromAPI = response.data.filter(event => event.user === 'admin' || event.user === 'clientApproved').map(event => {\n          let color;\n          switch (event.user) {\n            case 'clientApproval':\n              color = '#007FFF';\n              break;\n            case 'clientApproved':\n              color = '#FF9E00';\n              break;\n            case 'admin':\n              color = '#FF2D00';\n              break;\n            default:\n              // Handle default case if needed\n              break;\n          }\n          return {\n            id: event.id,\n            title: event.title,\n            start: event.start,\n            end: event.end,\n            allDay: event.allDay,\n            user: event.user,\n            color: color // Assign color based on user type\n          };\n        });\n\n        // Combine events from local storage and API\n        let allEvents = eventsFromLocalStorage.concat(eventsFromAPI);\n\n        // Update the calendar events with combined events\n        // this.$set(this.calendarOptions, 'events', allEvents);\n        this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n      }).catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      this.modal.show();\n      this.selectedInfo = selectInfo; // Store selectInfo in selectedInfo\n    },\n    saveChanges(selectedInfo) {\n      let calendarApi = selectedInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n      this.newEventTitle = this.nameInput + ' ' + this.lastnameInput;\n      axios.post('http://localhost:8000/api/events', {\n        title: this.newEventTitle,\n        email: this.emailInput,\n        start: formatDatetime(selectedInfo.startStr),\n        end: formatDatetime(selectedInfo.endStr),\n        user: 'admin',\n        allDay: selectedInfo.allDay\n      }).then(response => {\n        // Hide the modal\n        this.modal.hide();\n        // Handle success\n        console.log('Event added:', response.data);\n        console.log('Event added ID:', response.data.id);\n        this.allevents.push(response.data);\n        this.fetchEvents();\n\n        // this.newEventTitle = '';\n        this.nameInput = '';\n        this.lastnameInput = '';\n        this.emailInput = '';\n      }).catch(error => {\n        // Handle error\n        console.error('Error adding event:', error.response.data);\n      });\n    },\n    // handleDateSelect(selectInfo) {\n    //   let title = prompt('Please enter a new title for your event')\n    //   let calendarApi = selectInfo.view.calendar\n\n    //   calendarApi.unselect() // clear date selection\n\n    //   if (title) {\n\n    //     console.log(formatDatetime(new Date().toISOString()));\n\n    //     axios.post('http://localhost:8000/api/events', {\n\n    //       title: title,\n    //       start: formatDatetime(selectInfo.startStr),\n    //       end: formatDatetime(selectInfo.endStr),\n    //       user: 'admin',\n    //       allDay: selectInfo.allDay\n    //     })\n    //       .then(response => {\n    //         // Handle success\n    //         console.log('Event added:', response.data);\n    //         console.log('Event added ID:', response.data.id);\n    //         this.allevents.push(response.data);\n\n    //         // let newEvent = {\n    //         //   id: response.data.id,\n    //         //   title: response.data.title,\n    //         //   start: response.data.start,\n    //         //   end: response.data.end,\n    //         //   allDay: response.data.allDay\n    //         // };\n\n    //         // this.allevents.push(newEvent);\n    //         // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n    //         // Get existing events from local storage or initialize an empty array\n    //         // let events = JSON.parse(localStorage.getItem('events')) || [];\n    //         // events.push(newEvent); // Append the new event to existing events\n    //         // localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n    //         // calendarApi.addEvent(newEvent);\n    //         // Fetch events again to update the calendar\n    //         this.fetchEvents();\n\n    //       })\n    //       .catch(error => {\n    //         // Handle error\n    //         console.error('Error adding event:', error.response.data);\n    //       });\n    //   }\n    // },\n\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n      this.deletemodal.show();\n      this.clickedInfo = clickInfo;\n    },\n    deleteItemModal(clickedInfo) {\n      axios.delete(`http://localhost:8000/api/events/${clickedInfo.event.id}`).then(response => {\n        this.deletemodal.hide();\n        // this.fetchEvents(); // Refresh events after deleting\n        console.log(\"Succesfully Deleted: \" + response.data + clickedInfo.event.id);\n        this.fetchEvents();\n      }).catch(error => {\n        console.error('Error deleting event:', error);\n      });\n    },\n    // deleteItem(clickInfo) {\n    //   console.log(\"Deleted? : \" + clickInfo.event.id);\n\n    //   if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n    //     axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`)\n    //       .then(response => {\n    //         // this.fetchEvents(); // Refresh events after deleting\n    //         console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n    //         // Fetch events from local storage\n    //         // let events = JSON.parse(localStorage.getItem('events')) || [];\n    //         // console.log('Events before deletion:', events);\n    //         // Filter out the event to be deleted\n    //         // const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n    //         // console.log('Updated events after deletion:', updatedEvents);\n    //         // Store the updated events back into local storage\n    //         // localStorage.setItem('events', JSON.stringify(updatedEvents));\n    //         this.fetchEvents();\n\n    //       })\n    //       .catch(error => {\n\n    //         console.error('Error deleting event:', error);\n    //       });\n    //   }\n    // },\n\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      }).then(response => {\n        console.log('Event updated:', response.data);\n\n        // Retrieve events from local storage\n        // let events = JSON.parse(localStorage.getItem('events')) || [];\n        // console.log('Existing events:', events);\n\n        // Find index of event being updated\n        // const eventIndex = events.findIndex(event => event.id === eventId);\n        // console.log('Event index:', eventIndex);\n\n        // Update event if found\n        // if (eventIndex !== -1) {\n        // events[eventIndex].start = response.data.start;\n        // events[eventIndex].end = response.data.end;\n\n        // Save updated events to local storage\n        // localStorage.setItem('events', JSON.stringify(events));\n        // console.log('Updated events:', events);\n        // } else {\n        // If event is not found, it might be a new event, handle accordingly\n        // console.log('Event not found in local storage. Adding new event...');\n        // events.push(response.data);\n        // localStorage.setItem('events', JSON.stringify(events));\n        // console.log('Updated events:', events);\n        // }\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      }).then(response => {\n        console.log('Event updated Resize:', response.data);\n      }).catch(error => {\n        console.error('Error updating event:', error.response.data);\n      });\n    },\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  }\n};","map":{"version":3,"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","axios","bootstrap5Plugin","bootstrap","eventGuid","createEventId","String","formatDatetime","datetimeStr","replace","components","data","modal","deletemodal","nameInput","lastnameInput","emailInput","calendarOptions","plugins","headerToolbar","left","center","right","themeSystem","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","select","handleDateSelect","eventClick","deleteItem","eventsSet","handleEvents","eventDrop","handleEventDrop","eventResize","handleEventResize","eventDisplay","allevents","mounted","fetchEvents","Modal","document","getElementById","methods","logout","token","localStorage","getItem","decodedToken","jwt_decode","currentTime","Date","now","console","log","exp","post","then","response","removeItem","$router","push","name","catch","error","eventsFromLocalStorage","JSON","parse","get","eventsFromAPI","filter","event","user","map","color","id","title","start","end","allDay","allEvents","concat","events","handleWeekendsToggle","selectInfo","show","selectedInfo","saveChanges","calendarApi","view","calendar","unselect","newEventTitle","email","startStr","endStr","hide","clickInfo","clickedInfo","deleteItemModal","delete","info","eventId","start_formatdate","end_formatdate","put"],"sources":["C:\\Users\\Asus\\Desktop\\Clinic\\clinicsystem\\src\\views\\AdminView.vue"],"sourcesContent":["<!-- AdminView.vue -->\n\n<script>\n// require('@fullcalendar/core/main.min.css')\n\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport listPlugin from '@fullcalendar/list'\n\nimport axios from 'axios';\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrap5Plugin from '@fullcalendar/bootstrap5'\nimport * as bootstrap from 'bootstrap';\n\nlet eventGuid = 0\nexport function createEventId() {\n  return String(eventGuid++)\n}\n\nfunction formatDatetime(datetimeStr) {\n  return datetimeStr.replace('T', ' ').replace(/\\+.*$/, '');\n}\n\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n\n  data: function () {\n    return {\n      modal: null,\n      deletemodal: null,\n      nameInput: '',\n      lastnameInput: '',\n      emailInput: '',\n      calendarOptions: {\n        plugins: [\n          bootstrap5Plugin,\n          listPlugin,\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n        },\n        themeSystem: 'bootstrap5', // important!\n        initialView: 'dayGridMonth',\n        // initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.deleteItem,\n        eventsSet: this.handleEvents,\n        eventDrop: this.handleEventDrop, // Add eventDrop handler\n        eventResize: this.handleEventResize,\n        eventDisplay: 'block'\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      allevents: []\n    }\n  },\n\n  mounted() {\n    this.fetchEvents();\n    this.modal = new bootstrap.Modal(document.getElementById('exampleModal'), {\n      // Optional: specify options here\n    });\n    this.deletemodal = new bootstrap.Modal(document.getElementById('deleteModal'), {\n      // Optional: specify options here\n    });\n  },\n\n  methods: {\n    // logout() {\n    //   axios.post('http://localhost:8000/api/auth/logout', null, {\n    //     headers: {\n    //       Authorization: `Bearer ${localStorage.getItem('token')}`\n    //     }\n    //   })\n    //   .then(response => {\n    //     localStorage.removeItem('token');\n    //     this.$router.push({ name: 'login' });\n    //     console.log(response.data);\n    //   })\n    //   .catch(error => {\n    //     console.error('Logout error:', error);\n    //     console.log('An error occurred while logging out. Please try again.');\n    //   });\n    // },\n    logout() {\n        const token = localStorage.getItem('token');\n        const decodedToken = jwt_decode(token);\n        const currentTime = Date.now() / 1000; // Convert to seconds\n\n        console.log\n      // Check if the token has expired\n      if (decodedToken.exp < currentTime) {\n        // Token has expired\n        // localStorage.removeItem('token');\n        // Redirect user to login page or handle accordingly\n        console.log('token');\n      }\n\n    // Perform logout request using Axios\n    axios.post('http://localhost:8000/api/auth/logout', {}, {\n      // headers: {\n      //   'Authorization': `Bearer ${localStorage.getItem('token')}`\n      // }\n      // Decode the token to get its expiration time\n\n    })\n    .then(response => {\n      // Handle successful logout\n      console.log(response.data); // For debugging\n      // Remove the token from local storage\n      localStorage.removeItem('token');\n      // Redirect to the login page or home page\n      this.$router.push({ name: 'login' });\n    })\n    .catch(error => {\n      // Handle logout error\n      console.error(error.response.data); // For debugging\n      // You can display an error message or perform any other action\n    });\n  },\n\n    fetchEvents() {\n      // Fetch events from local storage\n      let eventsFromLocalStorage = JSON.parse(localStorage.getItem('events')) || [];\n      // Fetch events from the API\n      axios.get('http://localhost:8000/api/events')\n        .then(response => {\n          //   let eventsFromAPI = response.data.filter(event => event.user === 'admin' ||  event.user === 'clientApproved' ).map(event => ({\n          //   id: event.id,\n          //   title: event.title,\n          //   start: event.start,\n          //   user: event.user,\n          //   end: event.end,\n          //   allDay: event.allDay  \n          // }));\n\n          // let eventsFromAPI = response.data.map(event => {\n            let eventsFromAPI = response.data.filter(event => event.user === 'admin' ||  event.user === 'clientApproved' ).map(event => {\n          \n            let color;\n            switch (event.user) {\n                case 'clientApproval':\n                    color = '#007FFF';\n                    break;\n                case 'clientApproved':\n                    color = '#FF9E00';\n                    break;\n                case 'admin':\n                    color = '#FF2D00';\n                    break;\n                default:\n                    // Handle default case if needed\n                    break;\n            }\n\n            return {\n                id: event.id,\n                title: event.title,\n                start: event.start,\n                end: event.end,\n                allDay: event.allDay,\n                user: event.user,\n                color: color // Assign color based on user type\n            };\n        });\n\n          // Combine events from local storage and API\n          let allEvents = eventsFromLocalStorage.concat(eventsFromAPI);\n\n          // Update the calendar events with combined events\n          // this.$set(this.calendarOptions, 'events', allEvents);\n          this.calendarOptions.events = allEvents; // Directly assign events to calendarOptions\n\n        })\n        .catch(error => {\n          console.error('Error fetching events:', error);\n        });\n    },\n\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n\n    //ADD EVENT\n    handleDateSelect(selectInfo) {\n      this.modal.show();\n      this.selectedInfo = selectInfo; // Store selectInfo in selectedInfo\n    },\n\n    saveChanges(selectedInfo) {\n      let calendarApi = selectedInfo.view.calendar\n      calendarApi.unselect() // clear date selection\n      this.newEventTitle = this.nameInput + ' ' + this.lastnameInput;\n      \n      axios.post('http://localhost:8000/api/events', {\n\n          title: this.newEventTitle,\n          email: this.emailInput,\n          start: formatDatetime(selectedInfo.startStr),\n          end: formatDatetime(selectedInfo.endStr),\n          user: 'admin',\n          allDay: selectedInfo.allDay\n        })\n          .then(response => {\n            // Hide the modal\n            this.modal.hide();\n            // Handle success\n            console.log('Event added:', response.data);\n            console.log('Event added ID:', response.data.id);\n            this.allevents.push(response.data);\n            this.fetchEvents();\n\n            // this.newEventTitle = '';\n            this.nameInput = '';\n              this.lastnameInput = '';\n              this.emailInput = '';\n\n          })\n          .catch(error => {\n            // Handle error\n            console.error('Error adding event:', error.response.data);\n          });\n    },\n\n    // handleDateSelect(selectInfo) {\n    //   let title = prompt('Please enter a new title for your event')\n    //   let calendarApi = selectInfo.view.calendar\n\n    //   calendarApi.unselect() // clear date selection\n\n    //   if (title) {\n\n    //     console.log(formatDatetime(new Date().toISOString()));\n\n    //     axios.post('http://localhost:8000/api/events', {\n\n    //       title: title,\n    //       start: formatDatetime(selectInfo.startStr),\n    //       end: formatDatetime(selectInfo.endStr),\n    //       user: 'admin',\n    //       allDay: selectInfo.allDay\n    //     })\n    //       .then(response => {\n    //         // Handle success\n    //         console.log('Event added:', response.data);\n    //         console.log('Event added ID:', response.data.id);\n    //         this.allevents.push(response.data);\n\n    //         // let newEvent = {\n    //         //   id: response.data.id,\n    //         //   title: response.data.title,\n    //         //   start: response.data.start,\n    //         //   end: response.data.end,\n    //         //   allDay: response.data.allDay\n    //         // };\n\n    //         // this.allevents.push(newEvent);\n    //         // localStorage.setItem('events', JSON.stringify(this.allevents));\n\n    //         // Get existing events from local storage or initialize an empty array\n    //         // let events = JSON.parse(localStorage.getItem('events')) || [];\n    //         // events.push(newEvent); // Append the new event to existing events\n    //         // localStorage.setItem('events', JSON.stringify(events)); // Set the updated events array to local storage\n\n    //         // calendarApi.addEvent(newEvent);\n    //         // Fetch events again to update the calendar\n    //         this.fetchEvents();\n\n    //       })\n    //       .catch(error => {\n    //         // Handle error\n    //         console.error('Error adding event:', error.response.data);\n    //       });\n    //   }\n    // },\n\n    deleteItem(clickInfo) {\n      console.log(\"Deleted? : \" + clickInfo.event.id);\n      this.deletemodal.show();\n      this.clickedInfo = clickInfo;\n    },\n\n    deleteItemModal(clickedInfo){\n      axios.delete(`http://localhost:8000/api/events/${clickedInfo.event.id}`)\n        .then(response => {\n          this.deletemodal.hide();\n          // this.fetchEvents(); // Refresh events after deleting\n          console.log(\"Succesfully Deleted: \" + response.data + clickedInfo.event.id);\n          this.fetchEvents();\n\n        })\n        .catch(error => {\n          \n          console.error('Error deleting event:', error);\n        });\n\n    },\n    \n    // deleteItem(clickInfo) {\n    //   console.log(\"Deleted? : \" + clickInfo.event.id);\n\n    //   if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n    //     axios.delete(`http://localhost:8000/api/events/${clickInfo.event.id}`)\n    //       .then(response => {\n    //         // this.fetchEvents(); // Refresh events after deleting\n    //         console.log(\"Succesfully Deleted: \" + response.data + clickInfo.event.id);\n\n    //         // Fetch events from local storage\n    //         // let events = JSON.parse(localStorage.getItem('events')) || [];\n    //         // console.log('Events before deletion:', events);\n    //         // Filter out the event to be deleted\n    //         // const updatedEvents = events.filter(event => String(event.id) !== String(clickInfo.event.id));\n    //         // console.log('Updated events after deletion:', updatedEvents);\n    //         // Store the updated events back into local storage\n    //         // localStorage.setItem('events', JSON.stringify(updatedEvents));\n    //         this.fetchEvents();\n\n    //       })\n    //       .catch(error => {\n            \n    //         console.error('Error deleting event:', error);\n    //       });\n    //   }\n    // },\n\n    handleEventDrop(info) {\n      const eventId = info.event.id;\n      const allDay = info.event.allDay;\n      const start_formatdate = formatDatetime(info.event.startStr);\n      let end_formatdate = formatDatetime(info.event.endStr);\n\n      // If end date is empty, set it to start date\n      if (end_formatdate === \"\") {\n        end_formatdate = start_formatdate;\n      }\n\n      console.log(\"handleEventDrop : \", eventId, \"start_formatdate: \" + start_formatdate, \"End: \" + end_formatdate, \"AllDay: \", allDay);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start_formatdate,\n        end: end_formatdate,\n        allDay: allDay\n      })\n        .then(response => {\n          console.log('Event updated:', response.data);\n\n          // Retrieve events from local storage\n          // let events = JSON.parse(localStorage.getItem('events')) || [];\n          // console.log('Existing events:', events);\n\n          // Find index of event being updated\n          // const eventIndex = events.findIndex(event => event.id === eventId);\n          // console.log('Event index:', eventIndex);\n\n          // Update event if found\n          // if (eventIndex !== -1) {\n            // events[eventIndex].start = response.data.start;\n            // events[eventIndex].end = response.data.end;\n\n            // Save updated events to local storage\n            // localStorage.setItem('events', JSON.stringify(events));\n            // console.log('Updated events:', events);\n          // } else {\n            // If event is not found, it might be a new event, handle accordingly\n            // console.log('Event not found in local storage. Adding new event...');\n            // events.push(response.data);\n            // localStorage.setItem('events', JSON.stringify(events));\n            // console.log('Updated events:', events);\n          // }\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    // Function to handle resize event\n    handleEventResize(info) {\n      const eventId = info.event.id;\n      const start = formatDatetime(info.event.startStr);\n      const end = formatDatetime(info.event.endStr);\n\n      console.log(\"handleEventResize : \", eventId, \"start \", start, \"  end \", end);\n\n      axios.put(`http://localhost:8000/api/events/${eventId}`, {\n        start: start,\n        end: end,\n        allDay: false\n      })\n        .then(response => {\n          console.log('Event updated Resize:', response.data);\n        })\n        .catch(error => {\n          console.error('Error updating event:', error.response.data);\n        });\n    },\n\n    handleEvents(events) {\n      this.allevents = events;\n    }\n  },\n\n\n}\n</script>\n\n\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-sidebar' style=\"display: flex; flex-direction: column; justify-content: space-between;\">\n  <div>\n    <div class=\"text-center\">\n      <img src=\"../assets/icon.png\" alt=\"Ears Nose and Throat\" style=\"width: 160px; height: auto; \" class=\"img-fluid\">\n    </div>\n    <div style=\"margin: 50px 5px 10px 5px ;\">\n      \n    </div>\n  </div>\n\n  <!-- Admin Logout -->\n  <div class=\"text-center\" style=\"margin: 10px 5px 10px 5px;\">\n    <button @click=\"logout\" class=\"btn btn-danger\">Admin Logout</button>\n  </div>\n</div>\n\n\n    <div class='demo-app-main'>\n      <FullCalendar class='demo-app-calendar' :options='calendarOptions'>\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.start }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n    </div>\n\n     <!-- Modal -->\n     <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\" id=\"exampleModalLabel\">Create Schedule</h5>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n              <!-- Modal Body Content -->\n              <div class=\"modal-body\">\n                <!-- <div class=\"mb-3\">\n                  <input type=\"text\" class=\"form-control\" id=\"newEventTitle\" v-model=\"newEventTitle\" placeholder=\"Event Title\">\n                </div> -->\n                <div class=\"mb-3\">\n                  <input type=\"text\" class=\"form-control\" id=\"nameInput\" v-model=\"nameInput\" placeholder=\"Name\">\n                </div>\n                <div class=\"mb-3\">\n                  <input type=\"text\" class=\"form-control\" id=\"lastnameInput\" v-model=\"lastnameInput\" placeholder=\"Lastname\">\n                </div>\n                <div class=\"mb-3\">\n                  <input type=\"email\" class=\"form-control\" id=\"emailInput\" v-model=\"emailInput\" placeholder=\"Email\">\n                </div>\n                <!-- Rest of your modal content -->\n              </div>\n\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n              <button type=\"button\" class=\"btn btn-primary\" @click=\"saveChanges(selectedInfo)\">Save changes</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n            <!-- Delete -->\n            <div class=\"modal fade\" id=\"deleteModal\" tabindex=\"-1\" aria-labelledby=\"deleteModal\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\">Delete</h5>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            <div class=\"modal-body\">\n              <p>Are you sure you want to delete?</p>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n              <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteItemModal(clickedInfo)\">Delete</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n  </div>\n</template>\n\n\n\n<style lang='css'>\n\n\nhtml, body {\n    height: 100vh;\n    margin: 0;\n    padding: 0;\n    \n   /* overflow: hidden; Disable scrolling of the entire page */\n}\n@media (max-width: 650px) {\n    ul {\n      margin: 0;\n      /* padding: 0 0 0 1.5em; */\n      font-size: 10px;\n    }\n\n    li {\n      /* margin: 1.5em 0; */\n      padding: 0;\n      font-size: 10px;\n    }\n  }\n\n\n  h2 {\n    margin: 0;\n    font-size: 16px;\n  }\n\n  ul {\n    margin: 0;\n    /* padding: 0 0 0 1.5em; */\n  }\n\n  li {\n    /* margin: 1.5em 0; */\n    padding: 0;\n  }\n\n  b {\n    /* used for event dates/times */\n    margin-right: 3px;\n    color: black;\n  }\n\n  i {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  .demo-app {\n    display: flex;\n    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n    font-size: 14px;\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n  }\n\n  .demo-app-sidebar {\n    padding: 10px;\n    width: 300px;\n    line-height: 1.5;\n    /* background: #eaf9ff; */\n    background-color: #e6e7e9;\n    border-right: 1px solid #d3e2e8;\n    /* overflow-y: auto; */\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n  }\n\n  .demo-app-main {\n    flex-grow: 1;\n    padding: 3em;\n  }\n\n    /* Adjust the height of FullCalendar to fit within the main content area */\n  .demo-app-calendar {\n      height: calc(100vh - 6em); /* Adjust as needed, considering header/footer heights */\n  }\n\n  .fc {\n    /* the calendar root */\n    /* max-width: 1100px; */\n    margin: 0 auto;\n    max-height: 100vh; /* Set sidebar height to match viewport height */\n  }\n  .fc-col-header-cell-cushion{\n    text-decoration: none;\n    color: black;\n  }\n  .fc-scrollgrid .fc-daygrid-day-number{\n    text-decoration: none;\n    color: black;\n\n  }\n  .fc-event{\n    color: white;\n  }\n\n  .fc-list-event-title{\n    color: black;\n  }\n\n  .fc-list-event-time{\n    color: black;\n  }\n\n  </style>\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}